{"version":3,"sources":["../../src/constants/index.ts","../../src/crypto.ts","../../src/functions/jwkToBase58.ts","../../src/functions/fingerprintToDid.ts","../../src/functions/fromJwk.ts","../../src/functions/getMultibaseFromJwk.ts","../../src/functions/base58KeyPairToJwk.ts","../../src/Jws/Jws.ts","../../src/functions/getJwkTypeFromMultibase.ts","../../src/functions/toJwkPair.ts","../../src/KeyPair.ts","../../src/Jwe/Jwe.ts","../../src/functions/generate.ts","../../src/driver.ts","../../src/Bls12381G2KeyPair.ts","../../bls12381/node_modules/@mattrglobal/bls12381-key-pair/node_modules/@mattrglobal/bbs-signatures/lib sync","../../bls12381/node_modules/@mattrglobal/bbs-signatures/lib sync","../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../../src/resolver.ts","../../src/Cipher/crypto.ts","../../src/Cipher/algorithms/ecdhkdf.ts","../../src/Cipher/algorithms/classes/KeyEncryptionKey.ts","../../src/Cipher/algorithms/xc20p.ts","../../src/Cipher/DecryptTransformer.ts","../../src/Cipher/EncryptTransformer.ts","../../src/Cipher/getEpkGenerator.ts","serviceWorker.js","store/history.js","store/universal-wallet/actions.js","store/universal-wallet/reducer.js","store/universal-wallet/redux.js","store/universal-wallet/index.js","store/universal-wallet/container.js","store/index.js","components/Theme/Theme.js","pages/base/menu.js","pages/base/drawer.js","pages/base/base.js","components/ContentTypeToggle/ContentTypeToggle.js","pages/home/util.js","pages/home/VerticalTabs.js","pages/home/Home.js","pages/home/index.js","pages/resolver/Resolver.js","pages/index.js","pages/resolver/index.js","components/ParticlesContainer/ParticlesContainer.js","pages/errors/404.js","store/create.js","index.js","../../src/keyUtils.ts","../../src/X25519KeyPair.ts","../../src/EdDSA.ts","../../src/Ed25519KeyPair.ts","../../src/Secp256k1KeyPair.ts","../../src/ES256K.ts","../../bls12381/dist/index.js","../../bls12381/node_modules/@mattrglobal/bls12381-key-pair/node_modules/@mattrglobal/node-bbs-signatures/lib sync","../node_modules/jspdf/dist sync","store/universal-wallet/handlers.js","assets/logo.svg","../../src/types/index.ts","../../src/Jws/index.ts","../../src/getResolver.ts","../../src/getGet.ts"],"names":["SUPPORTED_EC","crvToMulticodecPrefix","multicodecToJwkType","0","kty","crv","crvToJwsHashAlg","process","window","crypto","jwkToBase58","jwk","keypair","bs58","Buffer","base64url","fingerprintToDid","fingerprint","methodName","fromJwk","id","publicKeyJwk","publicKeyBase58","publicKeyBytes","prefix","buffer","Uint8Array","getMultibaseFromJwk","type","controller","base58KeyPairToJwk","Jws","createJws","createDetachedJws","publicKeyBuffer","x","y","getJwkTypeFromMultibase","Error","toJwkPair","_keypair","privateKeyBase58","staticImplements","KeyPair","this","options","args","fingerprintFromPublicKey","KeyPair_1","kp","generateEphemeralKeyPair","epkArgs","getEpkGenerator","kekFromEphemeralPeer","keyAgreementKey","epk","TypeError","ephemeralPublicKey","producerInfo","consumerInfo","publicKey","secret","deriveKey","keyData","kek","kekFromStaticPeer","ephemeralKeyPair","staticPublicKey","epkPair","apu","apv","toJsonWebKeyPair","toKeyPair","exportPrivateKey","signer","privateKeyJwk","name","namedCurve","privateKey","sign","hash","privateKeyToSigner","verifier","verify","publicKeyToVerifier","deriveSecret","public","result","crvOrSize","d","generate","resolve","getResolve","getGet","Bls12381G2KeyPair","from","privateKeyBuffer","keyPair","generateBls12381KeyPair","secretKey","mattr","fromFingerprint","_options","mattrKey","kid","webpackEmptyContext","req","e","code","keys","module","exports","Symbol","iterator","asyncIterator","prefixToDriverMap","z6Mk","z6LS","zUC7","zQ3s","zXwp","zACH","zJss","didWebDriver","resolver","resolutionMetaData","accept","didUrl","encodedType","idchar","body","recover","then","input","ALGORITHM_ID","offset","dv","DataView","HASH_ALGORITHM","KEY_LENGTH","KeyEncryptionKey","key","wrapKey","unwrappedKey","wrappedKey","aeskw","bs64","unwrapKey","_wrappedKey","console","ciphertext","iv","tag","additionalData","cek","cipher","encrypted","data","k0","Boolean","location","hostname","match","createBrowserHistory","setUniversalWalletProp","createAction","payload","handleActions","state","status","contents","vaultEndpoint","isSyncEnabled","isSyncing","connect","wallet","actions","reducer","container","compose","withRedux","withHandlers","router","connectRouter","history","font1","font2","font3","Theme","children","props","theme","createMuiTheme","splashImage","palette","primary","light","lighten","main","dark","darken","secondary","typography","useNextVariants","fontSize","fontFamily","join","h1","fontWeight","h2","h3","h4","textTransform","letterSpacing","h5","h6","subtitle1","subtitle2","body1","body2","button","caption","overline","overrides","MuiInput","MuiInputLabel","root","MuiAppBar","MuiButton","contained","boxShadow","Component","StyledMenu","withStyles","paper","border","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","StyledMenuItem","backgroundColor","color","common","white","MenuItem","CustomizedMenus","React","useState","anchorEl","setAnchorEl","IconButton","aria-controls","aria-haspopup","onClick","event","currentTarget","keepMounted","open","onClose","push","ListItemIcon","ListItemText","DrawerContent","List","ListItem","useStyles","makeStyles","display","width","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","spacing","breakpoints","up","toolbar","alignItems","justifyContent","padding","mixins","content","flexGrow","MiniDrawer","classes","useTheme","setOpen","className","CssBaseline","AppBar","position","clsx","Toolbar","aria-label","edge","src","logo","alt","title","style","height","Drawer","variant","direction","Divider","ContentTypeToggle","alignment","setAlignment","ToggleButtonGroup","value","exclusive","onChange","newAlignment","ToggleButton","disabled","generateEd25519","contentType","a","_keys","ed25519","ed25519Key","x25519","x25519Key","secureRandom","randomBytes","fromEdKeyPair","didDocument","generateX25519","generateSecp256k1","secp256k1","generateBls12381","bls12381","generateP256","didKeyWebCrypto","generateP384","generateP521","TabPanel","index","other","role","hidden","aria-labelledby","Box","p","background","tabs","borderRight","divider","Panel","onToggleRepresentation","onGenerate","Grid","item","sm","xs","Button","Typography","gutterBottom","JSON","stringify","VerticalTabs","setState","setValue","refresh","handleGenerate","useEffect","Tabs","orientation","newValue","map","opt","Tab","label","Home","require","Resolver","setDidDocument","params","did","routes","path","exact","component","ParticlesContainer","particles","line_linked","shadow","enable","blur","Fragment","top","NotFound","pathname","href","appReducers","persistConfig","whitelist","storage","middlewares","thunk","routerMiddleware","store","createStore","persistReducer","combineReducers","rootReducer","composeWithDevTools","applyMiddleware","withReduxEnhancer","persistor","persistStore","ReactGA","initialize","listen","set","page","pageview","App","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","log","getKid","copy","digest","canonicalize","privateKeyJwkFromPrivateKeyBase58","privateKeyBytes","_jwk","publicKeyJwkFromPublicKeyBase58","privateKeyBase58FromPrivateKeyJwk","publicKeyBase58FromPublicKeyJwk","X25519KeyPair","keyUtils","pubkeyBytes","isAvailable","keyId","X25519KeyPair_1","ed25519KeyPair","convertPublicKeyToX25519","convertSecretKeyToX25519","verifyFingerprint","error","valid","fingerprintBuffer","_private","toJwk","remotePubkeyBytes","privateKeyBuf","Ed25519KeyPair","publicNode","equals","toX25519KeyPair","signatureUInt8Array","signature","verified","privateKeyJwkFromPrivateKeyHex","privateKeyHex","keyto","publicKeyJwkFromPublicKeyHex","publicKeyHex","keyBin","privateKeyHexFromJwk","publicKeyHexFromJwk","uncompressedPublicKey","compressed","privateKeyUInt8ArrayFromJwk","publicKeyUInt8ArrayFromJwk","publicKeyBase58FromPublicKeyHex","privateKeyBase58FromPrivateKeyHex","privateKeyPem","publicKeyPem","Secp256k1KeyPair","_generate","messageHashUInt8Array","sigObj","toString","toHex","exportPrivate","getClient","_wallet","UniversalWallet2020","entropy","find","c","split","VaultClient","fromDerivedContents","client","isContentPersisted","localContents","undefined","generateWallet","_seed","toggleLockStatus","password","unlock","lock","deleteWallet","importWallet","encryptedWallet","import","exportWallet","export","saveWallet","issueCredential","credential","issue","verifiableCredential","proveVerifiableCredential","prove","verifiablePresentation","syncVault","getWalletContents","message","parse","tableData","EdvClient","generateId","schema","doc","addWalletContent","toBeSigned","jws","header","toBeVerified","encodedHeader","b64","crit","encodedSignature","getVerificationMethod","externalKeyRepresentation","didKeyPairInstance","keyToDidDoc","verificationRelationships","verificationMethod","authentication","assertionMethod","capabilityInvocation","capabilityDelegation","keyAgreement","externalKeyRepresentation2","DidKeyPairClass","didUri","didDocumentMetaData","didResolutionMetaData","url"],"mappings":";+0BAEO,IAAMA,EAAe,CAAC,QAAD,QAArB,SAUMC,EAA6B,CACxC,QADwC,EAExC,QAFwC,EAGxC,QAAS,GAKEC,EAA2B,CACtCC,EAAM,CAAEC,IAAF,KAAaC,IAAK,SACxB,EAAM,CAAED,IAAF,KAAaC,IAAK,SACxB,EAAM,CAAED,IAAF,KAAaC,IAAK,UAWbC,EAAuB,CAClC,QADkC,UAElC,QAFkC,UAGlC,QAAS,WClBX,I,EAAA,EAfuB,kBAAZC,GAAP,kBACOA,EAAP,UADA,qBAEOA,WAAP,WAHF,WAISC,OAOA,IAATC,IAESD,OAATC,OCXWC,EAAc,SAACC,GAC1B,IAAIC,EAAJ,GAiBA,OAhBID,EAAJ,IACEC,mBAA2BC,WACzBC,SAAc,CAACC,aAAmBJ,EADpCC,OAIED,EAAJ,IACEC,kBAA0BC,WACxBC,SAAc,CAACC,aAAmBJ,EADpCC,OAIED,KAASA,EAAb,IACEC,kBAA0BC,WACxBC,SAAc,CAACC,aAAmBJ,EAApB,GAA4BI,aAAmBJ,EAD/DC,OAKF,GCvBWI,EAAmB,SAACC,EAAD,GAC9B,YADoDC,UAAa,OACjE,gBCKWC,EAAU,SAACR,GACtB,IAAMS,ECF2B,SAACC,G,IAC1BC,EAAoBZ,EAAYW,GAAhCC,gBACFC,EAAiBV,WAAvB,GACMW,EAASvB,EAAsBoB,EAArC,KACMI,EAAS,IAAIC,WAAW,EAAIH,EAAlC,QAOA,OALAE,QACAA,OACAA,OACAA,WAEA,IAAWZ,WAAX,GDTWc,CAAX,GAEA,UACEP,GAAI,IADN,EAEEQ,KAFF,iBAGEC,WAJiBb,EAAnB,IAKMN,EAJN,KEJWoB,GCA0DC,MAA/DC,UAA+DD,MAAzCE,kBDAI,SAAC,GAGjC,IAAMC,EAAkBrB,WAAYD,EAApC,iBAQID,EAAW,CAAEwB,EANPpB,WACRmB,UAAyBA,SAD3B,IAMoBE,EAFVrB,WAAiBmB,QAAsBA,SAAjD,KAQA,OAJItB,EAAJ,mBACED,IAAQI,WAAiBF,WAAYD,EAArCD,oBAGF,IEpBW0B,EAA0B,SAACpB,GACtC,IAAMQ,EAASZ,WAAYI,YAA3B,IAEA,QAAIQ,KACF,MAAM,IAAIa,MAAM,yBAAyBb,cAAzC,KAGF,IAAMG,EAAO1B,EAAoBuB,EAAjC,IACA,MACE,MAAM,IAAIa,MAAM,yBACWb,cADrB,QAC+CA,cADrD,KAMF,UCbWc,EAAY,SAAC,GAIxB,IAAMnB,EAAKR,eAAqBA,kBAAhC,GACI4B,EAAgB,CAClBpB,GAAIR,EADc,GAElBgB,KAFkB,iBAGlBC,WAAYjB,EAAQiB,YAoBtB,OAjBAW,oBACKH,EADLG,GAEKV,EAAmB,CACpBR,gBAAiBV,EAAQU,mBAIzBV,EAAJ,mBACE4B,qBACKH,EADLG,GAEKV,EAAmB,CACpBR,gBAAiBV,EADG,gBAEpB6B,iBAAkB7B,EAAQ6B,qBAKhC,GCXF,SAASC,IACP,OAAO,YACL,UAIJ,IAGaC,EAAO,aA4GlB,cAKE,GAJAC,KAAA,GAAUC,EAAV,GACAD,KAAA,KAAYC,QAAZ,iBAEAD,KAAA,WAAkBC,EAAlB,WACIA,EAAJ,gBACED,KAAA,gBAAuB/B,WAAYgC,EAAnC,qBACK,KAAIA,EAAJ,aAML,MAAM,IAAIP,MAAV,gDALA,IAAMQ,EAAO3B,EAAQ0B,EAArB,cACAD,KAAA,gBAAuB/B,WAAYiC,EAAnC,iBACAF,KAAA,GAAUC,MAAcC,EAAxB,GACAF,KAAA,WAAkBE,EAAlB,WAKF,GAAID,EAAJ,iBACED,KAAA,iBAAwB/B,WAAYgC,EAApC,uBACK,GAAIA,EAAJ,cAA2B,KACxBJ,EAAqBtB,EAAQ0B,EADL,gCAEhCD,KAAA,iBAAwB/B,WAAxB,I,EAnGGkC,yBAAP,YAIE,OADSC,OAAT,GACOC,aAAP,I,EAGWC,kCACXC,G,IAEA,uBAAOC,YAAgB,EAAvB,EAAOA,IACR,S,6BAEYC,iC,IACXC,oBACAC,Q,IAEA,IAAMA,GAAN,kBAAoBA,EAClB,MAAM,IAAIC,UAAV,4BAIF,IAAMC,EAAqB,IAAI,EAAQ,CACrCpC,aAAckC,IAOVG,EAAeD,EAArB,gBAEME,EAAe7C,OAAYwC,EAAjC,I,uBAGsBA,EAAA,aACpB,CACEM,UAAWH,wBAFO,eAAhBI,G,uBAKgBC,YAAU,CAAED,OAAF,EAAUH,aAAV,EAAwBC,kBAAzB,eAAzBI,G,uBAEO,cAA2B,CAAEA,aAA7B,kBADb,MAAO,CACLC,IAAK,YAER,S,6BAEYC,8B,IACXC,qBACAC,oB,IAEA,GAlFJ,mBAkFQA,OACF,MAAM,IAAI7B,MAAM,oD,uBAGIU,OAAakB,EAAblB,yBAAhBoB,GAGN,IAAMV,EAAeU,EAArB,gBAEMT,EAAe7C,OAAYqD,EAAjC,I,uBAEqBC,EAAA,aAAqB,CACxCR,UAAWO,KADQ,eAAfN,G,uBAGgBC,YAAU,CAAED,OAAF,EAAUH,aAAV,EAAwBC,kBAAzB,eAAzBI,G,uBAEO,cAA2B,CAAEA,aAA7B,kBADb,MAAO,CACLC,IADK,EAELT,IAAKW,EAFA,IAGLG,IAAKtD,WAHA,GAILuD,IAAKvD,2BAER,S,sDAgCDE,uBAEE,OADe2B,KAAK2B,mBAAZnD,GACDA,UAAP,I,EAGFoD,2BAAUC,WAAmB,GAC3B,IAAI5B,EAAe,CACjBzB,GAAIwB,KADa,GAEjBhB,KAFiB,oCAGjBC,WAAYe,KAHK,WAIjBtB,gBAAiBT,WAAY+B,KAAZ/B,kBAKnB,OAHA,IACEgC,mBAA2BhC,WAAY+B,KAAvCC,mBAEF,G,EAGF0B,kCAAiBE,WAAmB,GAClC,IAAM5B,EAAUD,KAAK4B,UAArB,GACA,OAAOjC,EAAP,I,EAGImC,kB,QACIC,EAAkB/B,KAAA,qBAAlB+B,cACR,uBHlL8B,SAAH,O,uBACJ,2BAGvB,CACEC,KADF,QAEEC,WAAYF,EAActE,MALL,EAQvB,CARuB,yBAAnByE,GAWN,MAAO,CACLC,KAAM,SAAF,O,uBACsB,cACtB,CACEH,KADF,QAEEI,KAAM,CAAEJ,KAAMtE,EAAgBqE,EAAD,OAHT,MADtB,wCAbuB,mCGkLpBM,CAAP,IACD,S,6BAEKC,oB,QACI7D,EAAiBuB,KAAA,mBAAjBvB,aACR,uBH5J+B,SAAH,O,uBACN,2BAGtB,CACEuD,KADF,QAEEC,WAAYxD,EAAahB,MALL,EAQtB,CARsB,2BAAlBuD,GAWN,MAAO,CACLuB,OAAQ,SAAF,S,uBACmB,gBACrB,CACEP,KADF,QAEEI,KAAM,CAAEJ,KAAMtE,EAAgBe,EAAD,OAHV,QADnB,wCAbsB,mCG4JrB+D,CAAP,IACD,S,6BAEDC,yB,IAEE,EADQV,EAAkB/B,KAAK2B,kBAAiB,GAAxCI,cAGR,GAAK9B,YAAL,aACExB,EAAgBwB,YAAhBxB,iBACK,KAAKwB,YAAL,gBAGL,MAAM,IAAIP,MAAV,uFAFGjB,EAAiBkB,EAAUM,EADuB,wBAOvD,OC9MwB,SAAH,S,uBAKE,2BAGvB,CACE+B,KADF,OAEEC,WAAYF,EAActE,MALL,EAQvB,CARuB,+BAAnByE,G,uBAUkB,2BAGtB,CACEF,KADF,OAEEC,WAAYxD,EAAahB,MALL,EAQtB,CARsB,+BAAlBuD,G,uBAUe,oBACnB,CACEgB,KADF,OAEEU,OAAQ1B,GAHS,uBAAf2B,GAQN,OAAO,IAAI7D,WAAX,YAjCuB,mCD8Md2D,CAAaV,EAApB,I,EAlLgB,GACJhC,2BAEPA,2B,uBEzBe,SAAH,YACnBE,MAA2B,CAAEzC,IAAF,KAAaoF,UAAW,UADhC,I,gCA8BnB,MAAM,IAAIlD,MAAM,6BACeO,EADzB,YAC4CA,EADlD,Y,qBA3BIA,eAAqE,IAA7C7C,UAAqB6C,EAArB7C,W,uBACX,qBACb,CACE4E,KADF,QAEEC,WAAYhC,EAAQ2C,YAHT,EAMb,CAAC,OANY,2BAAXvC,G,uBAQcxC,yBAA+BwC,EAA/BxC,4BAAZE,G,YACC,CACLU,aAAc,CACZjB,IAAKO,EADO,IAEZN,IAAKM,EAFO,IAGZwB,EAAGxB,EAHS,EAIZyB,EAAGzB,EAAIyB,GAETuC,cAAe,CACbvE,IAAKO,EADQ,IAEbN,IAAKM,EAFQ,IAGbwB,EAAGxB,EAHU,EAIbyB,EAAGzB,EAJU,EAKb8E,EAAG9E,EAAI8E,U,oDAzBM,mCF0BeC,CAAS7C,IAAD,kB,IAAhC8B,kBACR,OAAO,IAAI,EAAJ,KAAiBxD,EAAxB,QAFKwB,oCAKAA,OAAO,YACZ,OAAO,IAAI,EAAJ,KAAP,KAGKA,kCAA2B1B,EAA3B0B,kBAEL,GADaN,EAAb,GACA,IAAc,CACZ,IAAMd,EAAiBV,WAAYI,YAAnC,IAEMK,EAAkBT,WAAYU,QAApC,IAEA,uBAAO,IAAI,EAAQ,CACjBH,GAAI,IADa,EAEjBS,WAAYb,EAFK,GAGjBY,KAHiB,iBAIjBN,qBAGJ,MAAM,IAAIgB,MAAM,sCAAhB,GAdKK,oCAZIA,EAAO,eADnBD,KACYC,GG1BN,IAAMgD,EAAUC,qBAAhB,G,gCACYC,iBAAZ,M,kmBCAMC,wBA6DCjD,gBA3DU,yBA4DfzB,GAAKyB,EAAQzB,QACbQ,KAAOiB,EAAQjB,MAAQ,yBACvBC,WAAagB,EAAQhB,WACtBgB,EAAQvB,qBACLY,gBAAkBrB,SAAYgC,EAAQvB,qBACtC,KAAIuB,EAAQxB,mBAGX,IAAIiB,MACR,sFAHGJ,gBAAkBpB,EAAOiF,KAAK,KAMjClD,EAAQJ,wBACLuD,iBAAmBnF,SAAYgC,EAAQJ,mBAGzCG,KAAKxB,UACHA,GAAK,IAAMwB,KAAK3B,eAElB2B,KAAKf,kBACHA,sBAAwBe,KAAK3B,iBA3EzByE,4BACLO,EAAUC,4BACZrD,EAAU,CACZJ,iBAAkB5B,SAAYoF,EAAQE,WACtC7E,gBAAiBT,SAAYoF,EAAQrC,YAEjC3C,EAAcmF,oBAAwBrD,yBAAyB,CACnEzB,gBAAiBuB,EAAQvB,yCAEpB,IAAIwE,OACNjD,GACHzB,GAAI,IAAMH,EACVY,sBAAuBZ,4CAIdoF,gCAAkBpF,wBACvBL,EAAUwF,oBAAwBC,gBAAgB,CACtDpF,gBAEI4B,EAAU,CACdvB,gBAAiBT,SAAYD,EAAQsB,yCAEhC,IAAI4D,EAAkBjD,0CAGlBkD,cAAKlD,WACZjC,0DAeA0F,EAAgB,CAClBhF,gBAAiBT,SAAaD,EAAgBsB,yBAE3CtB,EAAgBoF,mBACnBM,EAAS7D,iBAAmB5B,SACzBD,EAAgBoF,mBAId,IAAIF,EAAkBQ,uBAbzBzD,EAAQJ,wCACM2D,oBAAwBL,KAAKlD,sBAA7CjC,OAY2B0F,GAZ3B1F,mDAJEiC,EAAQvB,uCACM8E,oBAAwBL,KAAKlD,sBAA7CjC,OAGAA,GAHAA,mDALEiC,EAAQ8B,qCACMyB,oBAAwBjF,QAAQ0B,sBAAhDjC,OAIAA,GAJAA,gDAJEiC,EAAQxB,oCACM+E,oBAAwBjF,QAAQ0B,sBAAhDjC,OAGAA,GAHAA,+GAiDJK,8BACsBmF,oBAAwBrD,yBAAyB,CACnEzB,gBAAiBT,SAAY+B,KAAKV,sBAKtCsC,mBAAUC,sBAA4B,IAC9BxB,EAAU,CACd7B,GAAIwB,KAAKxB,GACTQ,KAAMgB,KAAKhB,KACXC,WAAYe,KAAKf,WACjBP,gBAAiBT,SAAY+B,KAAKV,yBAGhCuC,IACFxB,EAAGR,iBAAmB5B,SAAY+B,KAAKoD,mBAElC/C,KAGTsB,0BAAiBE,sBAAmB,IAC5B8B,EAAW,IAAIH,oBACnBxD,KAAK4B,UAAUC,IAEXxB,EAAU,CACd7B,GAAIwB,KAAKxB,GACTQ,KAAM,iBACNC,WAAYe,KAAKf,WACjBR,aAAckF,EAASlF,4BAElB4B,EAAG5B,aAAamF,IACnB/B,IACFxB,EAAG0B,cAAgB4B,EAAS5B,qBACrB1B,EAAG0B,cAAc6B,KAEnBvD,KAETiC,2BACmB,IAAIkB,oBAAwBxD,KAAK4B,eAClCU,cAElBR,yBACmB,IAAI0B,oBAAwBxD,KAAK4B,eAClCE,YAjIPoB,GDDAH,EAAUC,aAAWE,mCACfD,SAAOF,uC,4CEL1B,SAASc,EAAoBC,GAC5B,IAAIC,EAAI,IAAIrE,MAAM,uBAAyBoE,EAAM,KAEjD,MADAC,EAAEC,KAAO,mBACHD,EAEPF,EAAoBI,KAAO,WAAa,MAAO,IAC/CJ,EAAoBd,QAAUc,EAC9BK,EAAOC,QAAUN,EACjBA,EAAoBrF,GAAK,M,mBCRzB,SAASqF,EAAoBC,GAC5B,IAAIC,EAAI,IAAIrE,MAAM,uBAAyBoE,EAAM,KAEjD,MADAC,EAAEC,KAAO,mBACHD,EAEPF,EAAoBI,KAAO,WAAa,MAAO,IAC/CJ,EAAoBd,QAAUc,EAC9BK,EAAOC,QAAUN,EACjBA,EAAoBrF,GAAK,M,mIC4JsC,qBAAX4F,SAA0BA,OAAOC,WAAaD,OAAOC,SAAWD,OAAO,qBA6DvD,qBAAXA,SAA0BA,OAAOE,gBAAkBF,OAAOE,cAAgBF,OAAO,0BC3N1I,IAAMG,EAAyB,CAC7BC,KAD6B,IAE7BC,KAF6B,IAG7BC,KAH6B,SAI7BC,KAJ6B,IAK7BC,KAL6B,IAM7BC,KAN6B,IAO7BC,KAAMC,KAGKC,EAAW,CACtBjC,QAAS,SAAF,cAELkC,MAA0B,CAAEC,OAAQ,4BAF/B,IAIL,OAAIC,sBACF,MAAM,IAAIzF,MAAV,kCAEF,IACM0F,EADcD,oBAApB,MACoBE,YAApB,G,uBDyhBG,SAAgBC,EAAMC,GAC5B,IACC,IAAI5C,EAAS2C,IACZ,MAAMvB,GACP,OAAOwB,EAAQxB,GAEhB,OAAIpB,GAAUA,EAAO6C,KACb7C,EAAO6C,UAAK,EAAQD,GAErB5C,E,aCjiBA,uBACmB4B,eADnB,OAMH,WACC,MAAM,IAAI7E,MAAM,yBAAhB,OAhBG,sC,gNCCT,MAduB,kBAAZ/B,GAAP,kBACOA,EAAP,UAFF,qBAGSA,WAAP,KAOO,IAATE,IAESD,OAATC,OC8BoBqD,EAAtB,gBAAkCD,EAAlC,SAA0CH,EAA1C,eAAwDC,EAAxD,mBACE,KAAME,yBAAgCA,SAAtC,GACE,MAAM,IAAIL,UAAV,4CAEF,KAAME,yBAAsCA,SAA5C,GACE,MAAM,IAAIF,UAAV,kDAEF,KAAMG,yBAAsCA,SAA5C,GACE,MAAM,IAAIH,UAAV,kDAUF,IAAM6E,EAAQ,IAAI3G,WAChB,EACAmC,EADA,OAEAyE,EAFA,SAIA5E,EAJA,SAMAC,EANA,OADF,GAUI4E,EAAJ,EACMC,EAAK,IAAIC,SAASJ,EAAb,OAA2BA,EAA3B,WAA6CA,EAAxD,Y,OACAG,iBACAH,QAAmBE,GAAnBF,GACAA,QAAyBE,GAAU1E,EAAnCwE,QACAG,YAAcD,GAAUD,EAAxBE,OAA8C9E,EAA9C8E,QACAH,QAAyBE,GAAzBF,GACAG,YAAcD,GAAU7E,EAAxB8E,OAA8C7E,EAA9C6E,QACAH,QAAyBE,GAAzBF,GACAG,YAAcD,GAAU5E,EAAxB6E,U,gBAG4B/H,wCAA5B,OAAO,IAAIiB,WAAX,MAxCF,MAAAiF,GAAA,sBAAAA,KAnCM2B,EAAe,IAAI5G,WAAW,EAJpC,iBAIA,QAEW,IAAI+G,SACbH,EADS,OAETA,EAFS,WAGTA,EAHF,YAKAE,YAXA,iBAWAA,QACAF,MAAiBxH,OAZjB,kBAYAwH,GAIA,IAAMI,EAAiB,CAAE9D,KAAM,WAGzB+D,EAAN,ICVaC,EAAb,WAQE,cACE,QAAIC,SACF,MAAM,IAAIvG,MAAV,wBAEFM,KAAA,MAAa,IAAI,EAAJ,MAAb,GACAA,KAAA,UAAiB,CAAEgC,KAAM,UAb7B,mCAyBEkE,Y,IAAUC,iBACFC,EAAapG,KAAKqG,MAAMH,QAA9B,GACA,OAAOI,WAAYpI,OAAnB,KA3BJ,YAwCEqI,Y,IAAYH,eACJI,EAAcF,aAApB,GACA,IACE,OAAOtG,KAAKqG,MAAME,UAAlB,GACA,MAAOxC,GAGP,OADA0C,iBACA,OA/CN,KAIST,4BAAqB7E,EAArB6E,cACL,uBAAO,IAAIA,EAAX,IADKA,oCCyDT,I,4BAAA,gBACEU,EADF,aAEEC,EAFF,KAGEC,EAHF,MAIEC,EAJF,iBAKEC,EALF,UAOE,KAAMH,aAAN,YACE,MAAM,IAAIjH,MAAV,4BAEF,KAAMgH,aAAN,YACE,MAAM,IAAIhH,MAAV,oCAEF,KAAMkH,aAAN,YACE,MAAM,IAAIlH,MAAV,6BAEF,KAAMoH,aAAN,YACE,MAAM,IAAIlG,UAAV,+BAIF,IAAMmG,EAAS,IAAI,EAAJ,kBAAf,GACMC,EAAY,IAAIlI,WAAW4H,SAAoBK,EAArD,WAGA,OAFAC,SACAA,QAAmBN,EAAnBM,QACA,gBAAOD,WAAP,IAzBF,MAAAhD,GAAA,sBAAAA,K,QA5CA,gBAAgCkD,EAAhC,OAAsCJ,EAAtC,iBAAsDC,EAAtD,UACE,KAAMG,aAAN,YACE,MAAM,IAAIrG,UAAV,gCAEF,KAAMkG,aAAN,YACE,MAAM,IAAIlG,UAAV,+BAGF,IAAMmG,EAAS,IAAI,EAAJ,kBAAf,GAKMJ,EAAK9I,kBAAuB,IAAIiB,WAAWiI,EAAjD,cAGMC,EAAYD,WAAlB,GAGML,EAAaM,aAAsBA,SAAmBD,EAA5D,WACMH,EAAMI,WAAmBA,SAAmBD,EAAlD,WAEA,uBAAO,CACLL,WADK,EAELC,GAFK,EAGLC,QAzBJ,MAAA7C,GAAA,sBAAAA,K,YAlBA,eAEE,uBAAOlG,kBAAuB,IAAIiB,WAAlC,gBAFF,MAAAiF,GAAA,sBAAAA,K,QARO,UCEgB,cN4JwC,qBAAXK,SAA0BA,OAAOC,WAAaD,OAAOC,SAAWD,OAAO,qBA6DvD,qBAAXA,SAA0BA,OAAOE,gBAAkBF,OAAOE,cAAgBF,OAAO,0BO3N1I,ICJa5D,EAAkB,SAACT,EAAD,GAU7B,OATiC,WAAH,I,uBACXA,8BAAXmH,G,uBACgBA,uCAAhBlJ,GAEN,MAAO,CACLA,QADK,EAEL2C,IAAK3C,EAAQS,oBANa,uC,iQCUZ0I,QACW,cAA7BvJ,OAAOwJ,SAASC,UAEkB,UAA7BzJ,OAAOwJ,SAASC,UAEhBzJ,OAAOwJ,SAASC,SAASC,MAAM,2D,qGChBvBC,gB,4BCAFC,EAAyBC,YACpC,8CACA,SAACC,GAAD,OAAaA,KCQAC,cAAc,eAExBH,GAAyB,SAACI,EAAD,OAAUF,EAAV,EAAUA,QAAV,mBAAC,eACtBE,GACAF,MAbY,CACnB1F,KAAM,sBACN6F,OAAQ,WACRC,SAAU,GACVC,cAAe,0BACfC,eAAe,EACfC,WAAW,I,SCNEC,eAAQ,kBAAiB,CAAEC,OAAnB,EAAGA,UAAJ,eAAoCC,I,SCA3C,GACbC,UACAC,UCDaC,YAAQC,EAAWC,MCEnB,GACbC,OAAQC,YAAcC,GACtBT,OAAQA,EAAOE,S,6MCEXQ,GAAQ,aACRC,GAAQ,qBACRC,GAAQ,SA4HCC,G,wKArHH,IACAC,EAAajJ,KAAKkJ,MAAlBD,SACFE,EAAQC,aAAe,CAC3BC,YAAa,GACbC,QAAS,CACPtK,KAAM,QACNuK,QAAS,CACPC,MAAOC,mBAnBI,UAmBkB,KAC7BC,KApBW,UAqBXC,KAAMC,kBArBK,UAqBgB,MAE7BC,UAAW,CACTL,MAAOC,mBAvBM,UAuBkB,KAC/BC,KAxBa,UAyBbC,KAAMC,kBAzBO,UAyBgB,OAGjCE,WAAY,CACVC,iBAAiB,EACjBC,SAAU,GACVC,WAAY,CAACpB,GAAOC,GAAOC,IAAOmB,KAAK,KACvCC,GAAI,CACFF,WAAYpB,GACZuB,WA1Be,KA4BjBC,GAAI,CACFJ,WAAYpB,GACZuB,WA9Be,KAgCjBE,GAAI,CACFL,WAAYpB,GACZuB,WAlCe,KAoCjBG,GAAI,CACFN,WAAYnB,GACZ0B,cAAe,YACfC,cAAe,QACfL,WAzCgB,KA2ClBM,GAAI,CACFT,WAAYnB,GACZ0B,cAAe,YACfC,cAAe,QACfL,WA/CgB,KAiDlBO,GAAI,CACFV,WAAYnB,GACZ0B,cAAe,YACfC,cAAe,SACfL,WArDgB,KAuDlBQ,UAAW,CACTX,WAAYpB,GACZuB,WAzDgB,KA2DlBS,UAAW,CACTZ,WAAYnB,GACZsB,WA7DgB,KA+DlBU,MAAO,CACLb,WAAYlB,GACZqB,WAjEgB,KAmElBW,MAAO,CACLd,WAAYlB,GACZqB,WArEgB,KAuElBY,OAAQ,CACNf,WAAYnB,GACZsB,WAzEgB,KA2ElBa,QAAS,CACPhB,WAAYnB,GACZsB,WA7EgB,KA+ElBc,SAAU,CACRjB,WAAYnB,GACZ2B,cAAe,SACfD,cAAe,YACfJ,WApFc,MAwFlBe,UAAW,CACTC,SAAU,CAER3F,MAAO,CACLwE,WAAYlB,KAGhBsC,cAAe,CAEbC,KAAM,CACJrB,WAAYnB,KAGhByC,UAAW,CACTD,KAAM,IAIRE,UAAW,CAETC,UAAW,CACTC,UAAW,YAKnB,OAAO,kBAAC,KAAD,CAAkBvC,MAAOA,GAAQF,O,GA9GxB0C,a,gHCNdC,GAAaC,aAAW,CAC5BC,MAAO,CACLC,OAAQ,sBAFOF,EAIhB,SAAC3C,GAAD,OACD,kBAAC,KAAD,eACE8C,UAAW,EACXC,mBAAoB,KACpBC,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,WAEVlD,OAIFoD,GAAiBT,cAAW,SAAC1C,GAAD,MAAY,CAC5CmC,KAAM,CACJ,UAAW,CACTiB,gBAAiBpD,EAAMG,QAAQC,QAAQG,KACvC,sDAAuD,CACrD8C,MAAOrD,EAAMG,QAAQmD,OAAOC,YALbb,CASnBc,MAEW,SAASC,KAAmB,IAAD,EACRC,IAAMC,SAAS,MADP,mBACjCC,EADiC,KACvBC,EADuB,KAWxC,OACE,6BACE,kBAACC,EAAA,EAAD,CACET,MAAO,UACPU,gBAAc,kBACdC,gBAAc,OACdC,QAdc,SAACC,GACnBL,EAAYK,EAAMC,iBAed,kBAAC,KAAD,OAEF,kBAAC1B,GAAD,CACEpN,GAAG,kBACHuO,SAAUA,EACVQ,aAAW,EACXC,KAAMrG,QAAQ4F,GACdU,QAnBc,WAClBT,EAAY,QAoBR,kBAACV,GAAD,CACEc,QAAS,WACPxE,EAAQ8E,KAAK,OAGf,kBAACC,GAAA,EAAD,KACE,kBAAC,KAAD,CAAU3D,SAAS,WAErB,kBAAC4D,GAAA,EAAD,CAAcrE,QAAQ,Y,kEChEjB,SAASsE,KACtB,OACE,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACE/C,QAAM,EACNoC,QAAS,WACPxE,EAAQ8E,KAAK,OAGf,kBAACC,GAAA,EAAD,KACE,kBAAC,KAAD,OAEF,kBAACC,GAAA,EAAD,CAAcrE,QAAS,UAyCzB,kBAACwE,GAAA,EAAD,CACE/C,QAAM,EACNoC,QAAS,WACPxP,OAAO4P,KAAK,+CAGd,kBAACG,GAAA,EAAD,KACE,kBAAC,KAAD,OAEF,kBAACC,GAAA,EAAD,CAAcrE,QAAS,UAGzB,kBAACwE,GAAA,EAAD,CACE/C,QAAM,EACNoC,QAAS,WACPxP,OAAO4P,KAAK,wDAGd,kBAACG,GAAA,EAAD,KACE,kBAAC,KAAD,OAEF,kBAACC,GAAA,EAAD,CAAcrE,QAAS,WCpE/B,IAEMyE,GAAYC,aAAW,SAAC9E,GAAD,MAAY,CACvCmC,KAAM,CACJ4C,QAAS,OACTC,MAAO,QAETC,OAAQ,CACNC,OAAQlF,EAAMkF,OAAOC,OAAS,EAC9BC,WAAYpF,EAAMqF,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQvF,EAAMqF,YAAYE,OAAOC,MACjCC,SAAUzF,EAAMqF,YAAYI,SAASC,iBAGzCC,YAAa,CACXC,WAfgB,IAgBhBZ,MAAM,eAAD,OAhBW,IAgBX,OACLI,WAAYpF,EAAMqF,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQvF,EAAMqF,YAAYE,OAAOC,MACjCC,SAAUzF,EAAMqF,YAAYI,SAASI,kBAGzCC,WAAY,CACVC,YAAa,IAEfC,KAAM,CACJjB,QAAS,QAEXI,OAAQ,CACNH,MA7BgB,IA8BhBiB,WAAY,EACZC,WAAY,UAEdC,WAAY,CACVnB,MAlCgB,IAmChBI,WAAYpF,EAAMqF,YAAYC,OAAO,QAAS,CAC5CC,OAAQvF,EAAMqF,YAAYE,OAAOC,MACjCC,SAAUzF,EAAMqF,YAAYI,SAASI,kBAGzCO,YAAY,aACVhB,WAAYpF,EAAMqF,YAAYC,OAAO,QAAS,CAC5CC,OAAQvF,EAAMqF,YAAYE,OAAOC,MACjCC,SAAUzF,EAAMqF,YAAYI,SAASC,gBAEvCW,UAAW,SACXrB,MAAOhF,EAAMsG,QAAQ,GAAK,GACzBtG,EAAMuG,YAAYC,GAAG,MAAQ,CAC5BxB,MAAOhF,EAAMsG,QAAQ,GAAK,IAG9BG,QAAQ,aACN1B,QAAS,OACT2B,WAAY,SACZC,eAAgB,WAChBC,QAAS5G,EAAMsG,QAAQ,EAAG,IAEvBtG,EAAM6G,OAAOJ,SAElBK,QAAS,CACPC,SAAU,EACVH,QAAS5G,EAAMsG,QAAQ,QAIZ,SAASU,GAAT,GAAmC,IAAD,IAAZlH,EAAY,EAAZA,SAC7BmH,EAAUpC,KACV7E,EAAQkH,cAFiC,EAGvBxD,IAAMC,UAAS,GAHQ,mBAGxCU,EAHwC,KAGlC8C,EAHkC,KAa/C,OACE,kBAAC,GAAD,KACE,yBAAKC,UAAWH,EAAQ9E,MACtB,kBAACkF,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CACEC,SAAS,QACTH,UAAWI,YAAKP,EAAQhC,OAAT,eACZgC,EAAQtB,YAActB,KAGzB,kBAACoD,EAAA,EAAD,KACE,kBAAC3D,EAAA,EAAD,CACET,MAAM,UACNqE,aAAW,cACXzD,QAtBa,WACvBkD,GAAQ,IAsBEQ,KAAK,QACLP,UAAWI,YAAKP,EAAQnB,WAAT,eACZmB,EAAQjB,KAAO3B,KAGlB,kBAAC,IAAD,OAEF,yBACEuD,IAAKC,KACLC,IAAK,OACLV,UAAWH,EAAQc,MACnBC,MAAO,CAAEC,OAAQ,UAEnB,yBAAKD,MAAO,CAAEjB,SAAU,KACxB,kBAAC,GAAD,QAGJ,kBAACmB,EAAA,EAAD,CACEC,QAAQ,YACRf,UAAWI,YAAKP,EAAQ9B,QAAT,mBACZ8B,EAAQd,WAAa9B,GADT,cAEZ4C,EAAQb,aAAe/B,GAFX,IAIf4C,QAAS,CACPtE,MAAO6E,aAAI,mBACRP,EAAQd,WAAa9B,GADb,cAER4C,EAAQb,aAAe/B,GAFf,MAMb,yBAAK+C,UAAWH,EAAQR,SACtB,kBAAC3C,EAAA,EAAD,CAAYG,QAlDI,WACxBkD,GAAQ,KAkDuB,QAApBnH,EAAMoI,UACL,kBAAC,IAAD,MAEA,kBAAC,IAAD,QAIN,kBAACC,EAAA,EAAD,MACA,kBAAC3D,GAAD,OAEF,0BAAM0C,UAAWH,EAAQH,SACvB,yBAAKM,UAAWH,EAAQR,UACvB3G,K,2HCzJJ,SAASwI,GAAT,GAAyC,IAAZrE,EAAW,EAAXA,QAAW,EACXP,IAAMC,SAAS,QADJ,mBACtC4E,EADsC,KAC3BC,EAD2B,KAO7C,OACE,kBAACC,GAAA,EAAD,CACEC,MAAOH,EACPI,WAAS,EACTC,SARoB,SAAC1E,EAAO2E,GAC9BL,EAAaK,IAQXnB,aAAW,+BAEX,kBAACoB,GAAA,EAAD,CACEJ,MAAM,OACNhB,aAAW,OACXzD,QAAS,WACPA,EAAQ,cAJZ,YASA,kBAAC6E,GAAA,EAAD,CACEJ,MAAM,QACNhB,aAAW,SACXzD,QAAS,WACPA,EAAQ,iBAJZ,eASA,kBAAC6E,GAAA,EAAD,CAAcJ,MAAM,UAAUhB,aAAW,OAAOqB,UAAQ,GAAxD,a,oFC9BOC,GAAe,yCAAG,WAAOlO,EAAMmO,GAAb,wBAAAC,EAAA,yDACzBC,EAAQrO,EAGC,OAATA,EAJyB,iCAKRsO,KAAuBpP,KAAKmP,EAAMC,SAL1B,cAK3BC,EAL2B,gBAMTC,KAAqBtP,KAAKmP,EAAMG,QANvB,OAM3BC,EAN2B,gDAQRH,KAAuBzP,SAAS,CACjD6P,aAAc,WACZ,OAAO9U,KAAO+U,YAAY,OAVH,eAQ3BJ,EAR2B,YAaTC,KAbS,UAcnBD,EAAW5Q,WAAU,GAdF,0CAaYiR,cAbZ,wBAa3BH,EAb2B,kBAmBT,4BAAhBN,EAnByB,kCAoBfI,EAAW5Q,WAAU,GApBN,6DAqBf4Q,EAAW7Q,kBAAiB,GArBb,yCAuBT,4BAAhByQ,EAvByB,kCAwBfM,EAAU9Q,WAAU,GAxBL,6DAyBf8Q,EAAU/Q,kBAAiB,GAzBZ,6CAiB7B2Q,EAjB6B,CAkB3BC,QAlB2B,KAsB3BE,OAtB2B,gBA2BCF,KAAexP,QAC3CuP,EAAMC,QAAQtT,WACd,CACEiG,OAAQkN,IA9BiB,wBA2BrBU,EA3BqB,EA2BrBA,YA3BqB,kBAiCtB,CACL7O,KAAMqO,EACNQ,gBAnC2B,4CAAH,wDAuCfC,GAAc,yCAAG,WAAO9O,EAAMmO,GAAb,sBAAAC,EAAA,yDAGd,QAFVC,EAAQrO,GADgB,gCAIVwO,KAAqBtP,KAAKc,EAAKgC,KAJrB,OAI1B5C,EAJ0B,8CAMVoP,KAAqB3P,SAAS,CAC5C6P,aAAc,WACZ,OAAO9U,KAAO+U,YAAY,OARJ,OAM1BvP,EAN0B,kBAcR,4BAAhB+O,EAdwB,kCAed/O,EAAQzB,WAAU,GAfJ,6DAgBdyB,EAAQ1B,kBAAiB,GAhBX,6CAY5B2Q,EAZ4B,CAa1BrM,IAb0B,gBAkBEwM,KAAc1P,QAAQuP,EAAMrM,IAAIhH,WAAY,CACxEiG,OAAQkN,IAnBkB,wBAkBpBU,EAlBoB,EAkBpBA,YAlBoB,kBAqBrB,CACL7O,KAAMqO,EACNQ,gBAvB0B,4CAAH,wDA2BdE,GAAiB,yCAAG,WAAO/O,EAAMmO,GAAb,sBAAAC,EAAA,yDAGjB,QAFVC,EAAQrO,GADmB,gCAIbgP,KAA2B9P,KAAKc,EAAKgC,KAJxB,OAI7B5C,EAJ6B,8CAMb4P,KAA2BnQ,SAAS,CAClD6P,aAAc,WACZ,OAAO9U,KAAO+U,YAAY,OARD,OAM7BvP,EAN6B,kBAcX,4BAAhB+O,EAd2B,kCAejB/O,EAAQzB,WAAU,GAfD,6DAgBjByB,EAAQ1B,kBAAiB,GAhBR,6CAY/B2Q,EAZ+B,CAa7BrM,IAb6B,gBAkBDgN,KAAiBlQ,QAAQuP,EAAMrM,IAAIhH,WAAY,CAC3EiG,OAAQkN,IAnBqB,wBAkBvBU,EAlBuB,EAkBvBA,YAlBuB,kBAqBxB,CACL7O,KAAMqO,EACNQ,gBAvB6B,4CAAH,wDA2BjBI,GAAgB,yCAAG,WAAOjP,EAAMmO,GAAb,sBAAAC,EAAA,yDAGhB,QAFVC,EAAQrO,GADkB,gCAIZkP,qBAA2BhQ,KAAKc,EAAKgC,KAJzB,OAI5B5C,EAJ4B,8CAMZ8P,qBAA2BrQ,WANf,OAM5BO,EAN4B,kBAUV,4BAAhB+O,EAV0B,kCAWhB/O,EAAQzB,WAAU,GAXF,6DAYhByB,EAAQ1B,kBAAiB,GAZT,6CAQ9B2Q,EAR8B,CAS5BrM,IAT4B,gBAcAkN,UAAgBpQ,QAAQuP,EAAMrM,IAAIhH,WAAY,CAC1EiG,OAAQkN,IAfoB,wBActBU,EAdsB,EActBA,YAdsB,kBAiBvB,CACL7O,KAAMqO,EACNQ,gBAnB4B,4CAAH,wDAuBhBM,GAAY,yCAAG,WAAOnP,EAAMmO,GAAb,sBAAAC,EAAA,yDAGZ,QAFVC,EAAQrO,GADc,gCAIRoP,KAAwBlQ,KAAKc,EAAKgC,KAJ1B,OAIxB5C,EAJwB,8CAMRgQ,KAAwBvQ,SAAS,CAC/CtF,IAAK,KACLoF,UAAW,UARW,OAMxBS,EANwB,kBAaN,4BAAhB+O,EAbsB,kCAcZ/O,EAAQzB,WAAU,GAdN,6DAeZyB,EAAQ1B,kBAAiB,GAfb,6CAW1B2Q,EAX0B,CAYxBrM,IAZwB,gBAiBIoN,KAAuBtQ,QACnDuP,EAAMrM,IAAIhH,WACV,CACEiG,OAAQkN,IApBc,wBAiBlBU,EAjBkB,EAiBlBA,YAjBkB,kBAuBnB,CACL7O,KAAMqO,EACNQ,gBAzBwB,4CAAH,wDA6BZQ,GAAY,yCAAG,WAAOrP,EAAMmO,GAAb,sBAAAC,EAAA,yDAGZ,QAFVC,EAAQrO,GADc,gCAIRoP,KAAwBlQ,KAAKc,EAAKgC,KAJ1B,OAIxB5C,EAJwB,8CAMRgQ,KAAwBvQ,SAAS,CAC/CtF,IAAK,KACLoF,UAAW,UARW,OAMxBS,EANwB,kBAaN,4BAAhB+O,EAbsB,kCAcZ/O,EAAQzB,WAAU,GAdN,6DAeZyB,EAAQ1B,kBAAiB,GAfb,6CAW1B2Q,EAX0B,CAYxBrM,IAZwB,gBAiBIoN,KAAuBtQ,QACnDuP,EAAMrM,IAAIhH,WACV,CACEiG,OAAQkN,IApBc,wBAiBlBU,EAjBkB,EAiBlBA,YAjBkB,kBAuBnB,CACL7O,KAAMqO,EACNQ,gBAzBwB,4CAAH,wDA6BZS,GAAY,yCAAG,WAAOtP,EAAMmO,GAAb,sBAAAC,EAAA,yDAGZ,QAFVC,EAAQrO,GADc,gCAIRoP,KAAwBlQ,KAAKc,EAAKgC,KAJ1B,OAIxB5C,EAJwB,8CAMRgQ,KAAwBvQ,SAAS,CAC/CtF,IAAK,KACLoF,UAAW,UARW,OAMxBS,EANwB,kBAaN,4BAAhB+O,EAbsB,kCAcZ/O,EAAQzB,WAAU,GAdN,6DAeZyB,EAAQ1B,kBAAiB,GAfb,6CAW1B2Q,EAX0B,CAYxBrM,IAZwB,gBAiBIoN,KAAuBtQ,QACnDuP,EAAMrM,IAAIhH,WACV,CACEiG,OAAQkN,IApBc,wBAiBlBU,EAjBkB,EAiBlBA,YAjBkB,kBAuBnB,CACL7O,KAAMqO,EACNQ,gBAzBwB,4CAAH,wDC/JzB,SAASU,GAAStK,GAAQ,IAChBD,EAAqCC,EAArCD,SAAU4I,EAA2B3I,EAA3B2I,MAAO4B,EAAoBvK,EAApBuK,MAAUC,EADZ,aACsBxK,EADtB,8BAGvB,OACE,uCACEyK,KAAK,WACLC,OAAQ/B,IAAU4B,EAClBjV,GAAE,4BAAuBiV,GACzBI,kBAAA,uBAAiCJ,IAC7BC,GAEH7B,IAAU4B,GAAS,kBAACK,GAAA,EAAD,CAAKC,EAAG,GAAI9K,IAkBtC,IAAM+E,GAAYC,aAAW,SAAC9E,GAAD,MAAY,CACvCmC,KAAM,CACJ4E,SAAU,EACV3D,gBAAiBpD,EAAMG,QAAQ0K,WAAWlI,MAC1CoC,QAAS,QAEX+F,KAAM,CACJC,YAAY,aAAD,OAAe/K,EAAMG,QAAQ6K,cAItCC,GAAQ,SAAC,GAA+D,IAA7DnQ,EAA4D,EAA5DA,KAAM6O,EAAsD,EAAtDA,YAAauB,EAAyC,EAAzCA,uBAAwBC,EAAiB,EAAjBA,WAC1D,OACE,kBAACC,GAAA,EAAD,CAAMjM,WAAS,EAACmH,QAAS,GACvB,kBAAC8E,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,IACrB,kBAACZ,GAAA,EAAD,CAAK5F,QAAQ,QACX,kBAAC4F,GAAA,EAAD,CAAK5D,SAAU,GACb,kBAACuB,GAAD,CACErE,QAAS,SAACnG,GACRoN,EAAuBpN,OAI7B,kBAAC6M,GAAA,EAAD,KACE,kBAACa,GAAA,EAAD,CACErD,QAAS,YACT9E,MAAO,YACPY,QAAS,WACPkH,MAJJ,eAYW,OAAhBxB,GACC,kBAACyB,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,IACrB,kBAACE,GAAA,EAAD,CAAYtD,QAAS,KAAMuD,cAAY,GAAvC,gBAGA,kBAAC,sBAAD,CAAoB/B,YAAaA,KAGrC,kBAACyB,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,IACrB,kBAACE,GAAA,EAAD,CAAYtD,QAAS,KAAMuD,cAAY,GAAvC,OAGA,kBAAC,cAAD,CAAYhD,MAAOiD,KAAKC,UAAU9Q,EAAM,KAAM,QAMvC,SAAS+Q,KACtB,IAAM5E,EAAUpC,KADqB,EAEXnB,IAAMC,SAAS,CACvCsF,YAAa,uBACbnO,KAAM,KACN6O,YAAa,OALsB,mBAE9BlL,EAF8B,KAEvBqN,EAFuB,OAOXpI,IAAMC,SAAS,GAPJ,mBAO9B+E,EAP8B,KAOvBqD,EAPuB,KAa/BjV,EAAU,CACd,CACEwT,MAAO,EACPzR,KAAM,UACNmT,QAAShD,IAEX,CACEsB,MAAO,EACPzR,KAAM,SACNmT,QAASpC,IAEX,CACEU,MAAO,EACPzR,KAAM,YACNmT,QAASnC,IAEX,CACES,MAAO,EACPzR,KAAM,cACNmT,QAASjC,IAEX,CACEO,MAAO,EACPzR,KAAM,QACNmT,QAAS/B,IAEX,CACEK,MAAO,EACPzR,KAAM,QACNmT,QAAS7B,IAEX,CACEG,MAAO,EACPzR,KAAM,QACNmT,QAAS5B,KAIP6B,EAAc,yCAAG,WAAO3B,GAAP,sBAAApB,EAAA,6DACf8C,EAAUlV,EAAQwT,GAAO0B,QADV,SAEeA,EAAQ,KAAMvN,EAAMwK,aAFnC,gBAEbnO,EAFa,EAEbA,KAAM6O,EAFO,EAEPA,YACdmC,EAAS,2BACJrN,GADG,IAEN3D,OACA6O,iBANmB,2CAAH,sDAgBpB,OANAjG,IAAMwI,WAAU,WACd,wBAAC,uBAAAhD,EAAA,sDACC+C,EAAe,GADhB,0CAAD,KAGC,IAGD,yBAAK7E,UAAWH,EAAQ9E,MACtB,kBAACgK,GAAA,EAAD,CACEC,YAAY,WACZjE,QAAQ,aACRO,MAAOA,EACPE,SAhEe,SAAC1E,EAAOmI,GAC3BN,EAASM,IAgEL3E,aAAW,YACXN,UAAWH,EAAQ6D,MAElBhU,EAAQwV,KAAI,SAACC,GACZ,OACE,kBAACC,GAAA,EAAD,eACE1P,IAAKyP,EAAIjC,MACTmC,MAAOF,EAAI1T,OA9INyR,EA+ISiC,EAAIjC,MA9IvB,CACLjV,GAAG,gBAAD,OAAkBiV,GACpB,gBAAgB,qBAAhB,OAAsCA,KAyI9B,CAIErG,QAAS,WACPgI,EAAeM,EAAIjC,WAjJnC,IAAmBA,MAuJZxT,EAAQwV,KAAI,SAACC,GACZ,OACE,kBAAClC,GAAD,CACEvN,IAAKyP,EAAIjC,MACT5B,MAAOA,EACP4B,MAAOiC,EAAIjC,MACXtC,MAAO,CAAEhD,MAAO,SAEhB,kBAAC,GAAD,CACE2E,YAAalL,EAAMkL,YACnB7O,KAAM2D,EAAM3D,KACZoQ,uBAAsB,yCAAE,WAAOjC,GAAP,sBAAAC,EAAA,6DAChB8C,EAAUlV,EAAQyV,EAAIjC,OAAO0B,QADb,SAEcA,EAClCvN,EAAM3D,KADmC,sBAE1BmO,IAJK,gBAEdnO,EAFc,EAEdA,KAAM6O,EAFQ,EAERA,YAIdmC,EAAS,CACP7C,YAAY,eAAD,OAAiBA,GAC5BnO,OACA6O,gBAToB,2CAAF,sDAYtBwB,WAAU,wBAAE,uBAAAjC,EAAA,sDACV+C,EAAeM,EAAIjC,OADT,kDCnNnB,IAAMoC,GAAO,WAClB,OACE,kBAAC,GAAD,KACE,kBAACb,GAAD,QCDOa,GAFKtN,kBAAQJ,EAAOG,UAEbA,EAAU,SAACY,GAC7B,OAAO,kBAAC,GAASA,MCJXlE,GAAa8Q,EAAQ,MAArB9Q,SAEK+Q,GAAW,SAAC,GAAe,IAAbzO,EAAY,EAAZA,MAAY,EACCuF,IAAMC,SAAS,MADhB,mBAC9BgG,EAD8B,KACjBkD,EADiB,KAG/BjT,EAAO,yCAAG,2CAAAsP,EAAA,6DAAOD,EAAP,+BAAqB,uBAArB,SACOpN,GAASjC,QAAQuE,EAAM2O,OAAOC,IAAK,CACtDhR,OAAQkN,IAFI,OACRzP,EADQ,OAIdqT,EAAerT,EAAOmQ,aAJR,2CAAH,qDAab,OANAjG,IAAMwI,WAAU,WACd,wBAAC,uBAAAhD,EAAA,sDACCtP,IADD,0CAAD,KAGC,IAGD,kBAAC,GAAD,KACE,kBAACwR,GAAA,EAAD,CAAMjM,WAAS,EAACmH,QAAS,GACvB,kBAAC8E,GAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACb,kBAACjD,GAAD,CACErE,QAAS,SAACgF,GACRrP,EAAQ,eAAiBqP,OAI/B,kBAACmC,GAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACI,OAAhB5B,GACC,kBAAC,sBAAD,CAAoBA,YAAaA,QC9BhCqD,GAAS,CACpB,CAAEC,KAAM,IAAKC,OAAO,EAAMC,UAAWT,IACrC,CAAEO,KAAM,QAASC,OAAO,EAAMC,UCDd/N,kBAAQJ,EAAOG,UAETA,EAAU,SAACY,GACjC,OAAO,kBAAC,GAASA,Q,qBCLNqN,GAAb,wKAEI,IAAMN,EAASjW,KAAKkJ,MAAM+M,QAAU,CAClCO,UAAW,CACTC,YAAa,CACXC,OAAQ,CACNC,QAAQ,EACRnK,MAAO,UACPoK,KAAM,MAKd,OACE,kBAAC,IAAMC,SAAP,KACE,yBACE1F,MAAO,CACL9C,OAAQ,EACRqC,SAAU,aAGX1Q,KAAKkJ,MAAMD,UAGd,kBAAC,KAAD,CACEsH,UAAU,YACVY,MAAO,CACL9C,OAAQ,EACRyI,IAAK,EACLpG,SAAU,YAEZuF,OAAQA,SA/BlB,GAAwCtK,aCI3BoL,I,QAAb,wKAEI,OACE,kBAAC,GAAD,KACE,yBAAKxG,UAAU,YACb,kBAAC,GAAD,KACE,yBAAKA,UAAU,OAAOY,MAAO,CAAEpB,QAAS,SACtC,kBAAC6E,GAAA,EAAD,CAAYtD,QAAQ,MAApB,OACA,kBAACsD,GAAA,EAAD,KACGhX,OAAOwJ,SAAS4P,SADnB,oBAGA,6BACA,kBAACrC,GAAA,EAAD,CACErD,QAAQ,YACR9E,MAAO,YACPY,QAAS,WACPxP,OAAOwJ,SAAS6P,KAAO,MAJ3B,mBAZd,GAA8BtL,c,GCEf,WAAuB,IAAtBuL,EAAqB,uDAAP,GAEtBC,EAAgB,CACpBlR,IAAK,OACLmR,UAAW,CAAC,UACZC,aAGIC,EAAc,CAACC,IAAOC,YAAiB5O,IAS7C,IAAM6O,EAAQC,sBACZC,YACER,EACAS,0BAAgB,2BAAKC,GAAgBX,KAEvCY,8BACEvP,kBAAQwP,kBAAe,WAAf,EAAmBT,GAAcU,OAKvCC,EAAYC,YAAaT,GAC/B,MAAO,CACLA,QACAQ,YACArP,WC7BkC8O,GAA9BD,G,GAAAA,MAAOQ,G,GAAAA,UAAWrP,G,GAAAA,QAE1BuP,IAAQC,WAAW,mBAEnBxP,GAAQyP,QAAO,SAACjR,GACd+Q,IAAQG,IAAI,CAAEC,KAAMnR,EAAS4P,WAC7BmB,IAAQK,SAASpR,EAAS4P,aAG5B,IAAMyB,GAAM,WAIV,OAHA5L,IAAMwI,WAAU,WACd8C,IAAQK,SAAS5a,OAAOwJ,SAAS4P,YAChC,IAED,kBAAC,IAAD,CAAUS,MAAOA,IACf,kBAAC,cAAD,CAAaQ,UAAWA,IACtB,kBAAC,IAAD,CAAiBrP,QAASA,IACxB,kBAAC,IAAD,KACGuN,GAAOV,KAAI,gBAAGY,EAAH,EAAGA,MAAOD,EAAV,EAAUA,KAAME,EAAhB,EAAgBA,UAAhB,OACV,kBAAC,IAAD,CACErQ,IAAKmQ,EACLC,MAAOA,EACPD,KAAMA,EACNE,UAAWA,OAGf,kBAAC,IAAD,CAAOF,KAAK,IAAIsC,OAAQ,kBAAM,kBAAC,GAAD,cAQ1CC,IAASD,OAAO,kBAAC,GAAD,MAASE,SAASC,eAAe,SvB8E3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxT,MAAK,SAACyT,GAClCA,EAAaC,gBuBzEnBzS,QAAQ0S,IAAR,8K,ubClDO,I,EAAMC,EAAS,YACpB,IAAMC,EAAI,KAAV,UACOA,EAAP,SACOA,EAAP,WACOA,EAAP,IACA,IAAMC,EAASzb,gCAEL0b,IAFK1b,IAAf,SAIA,OAAOM,WAAiBD,OAAxB,KAGWsb,EAAoC,cAI/C,IAAM7a,EAAiBV,WAAvB,GACMwb,EAAkBxb,WAAxB,GACMyb,EAAO,CACXlc,IADW,MAEXC,IAFW,SAGXoF,EAAG1E,WAHQ,GAIXoB,EAAGpB,eAGL,eAEEyF,IAHUwV,EAAZ,MAOWO,EAAkC,YAC7C,IAAMD,EAAO,CACXlc,IADW,MAEXC,IAFW,SAGX8B,EAAGpB,WAAiBF,WAAjBE,KAGL,eAEEyF,IAHUwV,EAAZ,MAeWQ,EAAoC,YAC7C,OAAK3b,WAAYE,aAAmBJ,EAAtC,KAGW8b,EAAkC,YAC7C,OAAO5b,WAAYE,aAAmBJ,EAAtC,KCvCW+b,EAAa,aAiOxB,cAKE,GAJA9Z,KAAA,iCACAA,KAAA,GAAUC,EAAV,GACAD,KAAA,WAAkBC,EAAlB,WAEKA,EAAL,gBACED,KAAA,gBAAuB9B,OACrBD,WAAagC,EADf,sBAGK,KAAKA,EAAL,aASL,MAAM,IAAIP,MAAV,0EARAM,KAAA,gBAAuB9B,OACrBD,WACE8b,EACG9Z,EAHP,gBAaGA,EAAL,mBACED,KAAA,iBAAwB9B,OACtBD,WAAagC,EADf,oBAKGA,EAAL,gBACED,KAAA,iBAAwB9B,OACtBD,WACE8b,EACG9Z,EAHP,kBASGD,KAAL,KACEA,KAAA,OAAcA,KAAd,e,EA/PGG,yBAAP,YAGE,MAEKnC,EAAL,kBACEgc,EAAc/b,WACXD,EADHgc,kBAKGhc,EAAL,eACEgc,EAAc/b,WACZ8b,EACG/b,EAFLgc,gBASF,IAAMnb,EAAS,IAAIC,WAAW,EAAIkb,EAAlC,QAKA,OAJAnb,SACAA,OACAA,WAEA,IAAWZ,WAAX,I,EAGW6E,kBAAS7C,G,IACpB,MAOA,KALAgG,EAAM,0BAAuB,CAC3BgU,aAD2B,EAE3BrH,YAAa3S,EAAQ0S,gBAIrB,MAAM,IAAIjT,MAAV,qDAGF,IAAMhB,EAAkBT,WAAYgI,EAApC,WACMpG,EAAmB5B,WAAYgI,EAArC,WAEMiQ,EAAM,WAAW,2BAAuC,CAC5DxX,oBAEIwb,EAAQ,IAAI,2BAAuC,CACvDxb,oBAEF,uBAAO,IAAI,EAAc,CACvBF,GADuB,EAEvBS,WAFuB,EAGvBP,gBAHuB,EAIvBmB,sBAEH,S,6BAEYS,oC,IACX,uBAAO,YAAgB,EAAe,CACpCqS,aAAc,WACZ,OAAO9U,gBAAP,MAFG,IAKR,S,6BAEY4C,iC,IACXC,oBACAC,Q,IAEA,IAAMA,GAAN,kBAAoBA,EAClB,MAAM,IAAIC,UAAV,4BAIF,IAAMI,EAAY7C,aAAmBwC,EAArC,GAGME,EAAqB,CACzB7B,KA5FN,4BA6FMN,gBAAiBT,eAOb6C,EAAN,EAEMC,EAAe7C,OAAYwC,EAAjC,I,uBAGsBA,EAAA,aACpB,CACEM,UAAWH,KAFO,eAAhBI,G,uBAKgBC,YAAU,CAAED,OAAF,EAAUH,aAAV,EAAwBC,kBAAzB,eAAzBI,G,uBAEO,cAA2B,CAAEA,aAA7B,kBADb,MAAO,CACLC,IAAK,YAER,S,6BAEYC,8B,IACXC,qBACAC,oB,IAGA,GAEIA,sCAFJ,mBAGIA,OAGF,MAAM,IAAI7B,MAAV,+D,uBAKoBya,OAAmB7Y,EAAnB6Y,yBAAhB3Y,GAGN,IAAMV,EAAeU,EAArB,gBAEMT,EAAe7C,OAAYqD,EAAjC,I,uBAEqBC,EAAA,aAAqB,CACxCR,UAAWO,KADQ,eAAfN,G,uBAGgBC,YAAU,CAAED,OAAF,EAAUH,aAAV,EAAwBC,kBAAzB,eAAzBI,G,uBAEO,cAA2B,CAAEA,aAA7B,kBADb,MAAO,CACLC,IADK,EAELT,IAAKW,EAFA,IAGLG,IAAKtD,WAHA,GAILuD,IAAKvD,2BAER,S,6BAEMsF,gBAAP,Y,IAAyBpF,gBAEjBQ,EAASZ,WAAYI,SAA3B,IAEA,GAAIQ,YAAJ,IAA0BA,KAAoB,CAC5C,IAAMH,EAAkBT,WAAYY,QAApC,IACMqX,EAAM,WAAW,2BAAuC,CAC5DxX,oBAEIwb,EAAQ,IAAI,2BAAuC,CACvDxb,oBAEF,OAAO,IAAI,EAAc,CACvBF,GADuB,EAEvBS,WAFuB,EAGvBP,oBAIJ,MAAM,IAAIgB,MAAM,iCAAhB,I,EAGKmT,cAAP,YACE,MACA,EAcA,OAZIuH,EAAJ,kBACE1b,EAAkBT,WAChBoc,mCAAyBpc,WAAYmc,EADvC1b,oBAKE0b,EAAJ,mBACEva,EAAmB5B,WACjBqc,mCAAyBrc,WAAYmc,EADvCva,qBAKK,IAAI,EAAc,CACvBZ,WAAYmb,EADW,WAEvB1b,gBAFuB,EAGvBmB,sB,EAIGsD,KAAP,YACE,MACA,EAuBA,OArBKlD,EAAL,kBACEvB,EAAmBuB,EAAnBvB,iBAGGuB,EAAL,mBACEJ,EAAoBI,EAApBJ,kBAIGI,EAAL,gBACEJ,EAAmBka,EAChB9Z,EADHJ,gBAKGI,EAAL,eACEvB,EAAkBqb,EACf9Z,EADHvB,eAKK,IAAI,EAAJ,QAELmB,iBAFK,EAGLnB,sB,2BAgDJL,uBACE,OAAO,2BAAuC,CAC5CK,gBAAiBT,WAAY+B,KAAZ/B,oB,EAIrBsc,8BAGE,GAA6B,kBAAhBlc,GAAb,MAAyCA,KACvC,MAAO,CACLmc,MAAO,IAAI9a,MADN,qDAEL+a,OAAO,GAGX,MACA,IACEC,EAAoBzc,WAAYI,QAAhCqc,IACA,MAAO3W,GACP,MAAO,CAAEyW,MAAF,EAAYC,OAAO,GAE5B,IAAInb,EAAkBU,KAAtB,gBAIMya,EACJC,uCACApb,SAAuBob,QAFzB,IAGA,SAMO,CAAED,SALA,CACLD,MAAO,IAAI9a,MADN,kDAEL+a,OAAO,I,EAMb7Y,2BAAU+Y,WAAoB,GAC5B,IAAIta,EAAU,CACZ7B,GAAIwB,KADQ,GAEZhB,KAAMgB,KAFM,KAGZf,WAAYe,KAHA,WAIZtB,gBAAiBT,WAAY+B,KAAZ/B,kBAKnB,OAHA,IACEoC,mBAAsBpC,WAAY+B,KAAlCK,mBAEF,G,EAGFsB,kCAAiBgZ,WAAoB,GACnC,IAAIta,EAAU,CACZ7B,GAAIwB,KADQ,GAEZhB,KAFY,iBAGZC,WAAYe,KAHA,WAIZvB,aAAcuB,KAAK4a,SAQrB,cANOva,eAAP,IACA,IACEA,gBAAmBL,KAAK4a,OAAxBva,UACOA,gBAAP,KAGF,G,EAGFua,uBAAMD,WAAoB,GACxB,IAAMjc,EAAkBT,WAAY+B,KAApC,iBACA,SACS+Z,IAEL9b,WAAY+B,KAFd,mBAKK+Z,EAAP,I,EAGFtX,yBACE,MAEQzB,EAAcf,EAAde,UAEHA,EAAL,gBACE6Z,EAAoB5c,WACjB+C,EADH6Z,iBAGU7Z,EAAL,eACL6Z,EAAoB5c,WAClB8b,EACG/Y,EAFL6Z,gBAOF,IAAMpB,EAAkBzZ,KAAxB,iBAQA,OAN6ByS,oBAC3B,IAAI3T,WADuB2T,GAE3B,IAAI3T,WAFuB2T,IAA7B,I,EA7WsB,GAQVqH,2BARHA,EAAa,eADzBrN,4BACYqN,GtCpBN,IAAM/W,EAAUC,qBAAhB,G,gCACYC,iBAAZ,M,mmDuCE6BvD,M,MFAvB0Z,EAAS,YACpB,IAAMC,EAAI,KAAV,UACOA,EAAP,SACOA,EAAP,WACOA,EAAP,IACA,IAAMC,EAASzb,gCAEL0b,IAFK1b,IAAf,SAIA,OAAOM,WAAiBD,OAAxB,KAWWyb,EAAkC,YAC7C,IAAM5b,EAAM,CACVN,IADU,UAEV8B,EAAGpB,WAAiBF,WAFV,IAGVT,IAAK,OAGP,eAEEoG,IAHUwV,EAAZ,MAOWI,EAAoC,YAC/C,IAAMsB,EAAgB7c,WAAtB,GACMF,EAAM,CACVN,IADU,UAEVoF,EAAG1E,WAAiB2c,UAFV,KAGVvb,EAAGpB,WAAiB2c,WAHV,KAIVtd,IAAK,OAGP,eAEEoG,IAHUwV,EAAZ,MAOWS,EAAkC,YAC3C,OAAK5b,WAAYE,aAAmBM,EAAtC,KAGWmb,EAAoC,YAC/C,OAAO3b,WACLC,SAAc,CACZC,aAAmB4D,EADP,GAEZ5D,aAAmB4D,EAHvB,OGjDWgZ,EAAc,aAsHzB,cAKE,QALU9a,UAAe,IACzBD,KAAA,kCACAA,KAAA,GAAUC,EAAV,GACAD,KAAA,WAAkBC,EAAlB,WAEIA,EAAJ,gBACED,KAAA,gBAAuB/B,WAAYgC,EAAnC,qBACK,KAAIA,EAAJ,aAKL,MAAM,IAAIP,MAAV,8EAJAM,KAAA,gBAAuB/B,WACrB8b,EAAyC9Z,EAD3C,eASEA,EAAJ,mBACED,KAAA,iBAAwB/B,WAAYgC,EAApC,mBAGED,KAAKf,aAAee,KAAxB,KACEA,KAAA,GAAaA,KAAb,eAAgCA,KAAhC,e,EApIGG,yBAAP,YAGE,MAEKnC,EAAL,kBACEgc,EAAc/b,WACXD,EADHgc,kBAKGhc,EAAL,eACEgc,EAAc/b,WACZ8b,EACG/b,EAFLgc,gBASF,IAAMnb,EAAS,IAAIC,WAAW,EAAIkb,EAAlC,QAKA,OAJAnb,SACAA,OACAA,WAEA,IAAWZ,WAAX,I,EAEW6E,kBAAS7C,G,IACpB,MACA,IAAIA,EAAJ,aAME,MAAM,IAAIP,MAAV,qCALAuG,EAAM,0BAAwB,CAC5BgU,aAD4B,EAE5BrH,YAAa3S,EAAQ0S,eAMzB,IAAMjU,EAAkBT,WAAYgI,EAApC,WACMpG,EAAmB5B,WAAYgI,EAArC,WAEMiQ,EAAM,WAAW,2BAAwC,CAC7DxX,oBAEIwb,EAAQ,IAAI,2BAAwC,CACxDxb,oBAEF,uBAAO,IAAI,EAAe,CACxBF,GADwB,EAExBS,WAFwB,EAGxBP,gBAHwB,EAIxBmB,sBAEH,S,6BAEM4D,gBAAP,Y,IAAyBpF,gBAEjBQ,EAASZ,WAAYI,SAA3B,IAEA,GAAIQ,YAAJ,IAA0BA,KAAoB,CAC5C,IAAMH,EAAkBT,WAAYY,QAApC,IACMqX,EAAM,WAAW,2BAAwC,CAC7DxX,oBAEIwb,EAAQ,IAAI,2BAAwC,CACxDxb,oBAEF,OAAO,IAAI,EAAe,CACxBF,GADwB,EAExBS,WAFwB,EAGxBP,oBAIJ,MAAM,IAAIgB,MAAM,iCAAhB,I,EAGKyD,KAAP,YACE,MACA,EAuBA,OArBKlD,EAAL,kBACEvB,EAAmBuB,EAAnBvB,iBAGGuB,EAAL,mBACEJ,EAAoBI,EAApBJ,kBAIGI,EAAL,gBACEJ,EAAmBka,EAChB9Z,EADHJ,gBAKGI,EAAL,eACEvB,EAAkBqb,EACf9Z,EADHvB,eAKK,IAAI,EAAJ,QAELmB,iBAFK,EAGLnB,sB,2BA8BJsc,sBACE,OAAOhb,KAAK4B,WAAZ,I,EAGFvD,uBACE,OAAO,2BAAwC,CAC7CK,gBAAiBT,WAAY+B,KAAZ/B,oB,EAGrBsc,8BAGE,GAA6B,kBAAhBlc,GAAb,MAAyCA,KACvC,MAAO,CACLmc,MAAO,IAAI9a,MADN,qDAEL+a,OAAO,GAGX,MACA,IACEC,EAAoBzc,WAAYI,QAAhCqc,IACA,MAAO3W,GACP,MAAO,CAAEyW,MAAF,EAAYC,OAAO,GAI5B,IAAMA,EACJC,uCACA1a,KAAKV,gBAAgB2b,OAAOP,QAF9B,IAGA,SAMO,CAAED,SALA,CACLD,MAAO,IAAI9a,MADN,kDAEL+a,OAAO,I,EAMPG,eAAM/Y,mBAA4B,G,IACtC,SACE,gBAAOkY,EACL9b,WAAY+B,KADd,oBAIF,gBAAO+Z,EACL9b,WAJc+B,KAGhB,mBAGD,S,6BAEDkb,4BACE,YADcrZ,WAA4B,GAC1C,EACS,kBAA4B,CACjC5C,WAAYe,KADqB,WAEjCtB,gBAAiBT,WAAY+B,KAFI,iBAGjCH,iBAAkB5B,WAAY+B,KAAZ/B,oBAGb,kBAA4B,CACjCgB,WAAYe,KADqB,WAEjCtB,gBAAiBT,WAAY+B,KAAZ/B,oB,EAKvB2D,2BAAUC,WAA4B,GACpC,IAAMxB,EAAU,CACd7B,GAAIwB,KADU,GAEdhB,KAAMgB,KAFQ,KAGdf,WAAYe,KAHE,WAIdtB,gBAAiBT,WAAY+B,KAAZ/B,kBAMnB,OAHA,IACEoC,mBAAsBpC,WAAY+B,KAAlCK,mBAEF,G,EAGFsB,kCAAiBE,WAA4B,GAC3C,IAAMxB,EAAU,CACd7B,GAAIwB,KADU,GAEdhB,KAFc,iBAGdC,WAAYe,KAHE,WAIdvB,aAAcsb,EACZ9b,WAAY+B,KADA+Z,mBAahB,cARO1Z,eAAP,IACA,IACEA,gBAAmB0Z,EACjB9b,WAAY+B,KADdK,0BAGOA,gBAAP,KAGF,G,EAGFyB,kBACE,IAAK9B,KAAL,iBACE,MAAM,IAAIN,MAAV,gC,IAEI0D,EAAqBpD,KAArBoD,iBACN,MAAO,CACCjB,KADD,gBACQ8E,EADR,WAEH,IAAMkU,EAAsB5I,iBAA5B,GACA,0BAHG,sC,EAOTjQ,oBACE,IAAKtC,KAAL,gBACE,MAAM,IAAIN,MAAV,iC,IAEIJ,EAAoBU,KAApBV,gBACN,MAAO,CACCiD,OADD,gBACU0E,EADV,OACgBmU,EADhB,gBAEH,IAAIC,GAAJ,EACA,IACEA,EAAW9I,qBAAX8I,GACA,MAAOtX,GACP0C,gEAEF,0BARG,sC,EApQgB,GAAdsU,EAAc,eAD1BtO,4BACYsO,GxCNN,IAAMhY,EAAUC,qBAAhB,G,gCACYC,iBAAZ,M,mmDqCGP,I,EAuDamW,EAAS,SAAC,GAGrB,IAAMC,EAAO,EAAH,GAAV,UACOA,EAAPxW,SACOwW,EAAP,WACOA,EAAP,IACA,IAAMC,EAASzb,gCAEL0b,IAFK1b,IAAf,SAKA,OAAOM,WAAiBD,OAAxB,KAIWod,EAAiC,SAACC,GAC7C,IAAMxd,EAAM,EAAH,GACJyd,wBADI,YAEP/d,IAAK,cAGP,eAEEmG,IAHUwV,EAAZ,MAQWqC,EAA+B,SAACC,GAC3C,IAAIzV,EAAJ,EACA,GAtFF,KAsFMyV,SAA6D,CAC/D,IAAMC,EAAS1I,qBACb/U,SADa+U,QAAf,GAIAhN,EAAM/H,mBAAN+H,OAEF,IAAMlI,EAAM,EAAH,GACJyd,wBADI,WAEP/d,IAAK,cAIP,eAEEmG,IAJUwV,EAAZ,MAsCWwC,EAAuB,SAAC7d,GAAD,OAClC,iBAIMN,IAAK,UAJX,sBADkC,YAYvBoe,EAAsB,SAAC9d,GAClC,IAAM+d,EAAwB,iBAIxBre,IAAK,UAJmB,sBAA9B,UAUMse,EAAa9I,qBACjB/U,SADiB+U,QAAnB,GAIA,OAAO/U,mBAAP,QAIW8d,EAA8B,SAACje,GAC1C,IAAMwd,EAAgBK,EAAtB,GACA,OAAO1d,SAAP,QAIW+d,EAA6B,SAACle,GACzC,IAAM2d,EAAeG,EAArB,GACA,OAAO3d,SAAP,QAIWge,EAAkC,SAACR,GAC9C,OAAOzd,WAAYC,SAAnB,SAIWie,EAAoC,SAACZ,GAChD,OAAOtd,WAAYC,SAAnB,S,0HA9E4C,SAACke,GAC7C,IAAMre,EAAM,EAAH,GACJyd,wBADI,YAEP/d,IAAK,cAKP,eAEEmG,IAJUwV,EAAZ,M,6BAS0C,SAACiD,GAC3C,IAAMte,EAAM,EAAH,GACJyd,wBADI,WAEP/d,IAAK,cAIP,eAEEmG,IAJUwV,EAAZ,M,uNA6DsD,SAAC,GAGvD,OAAOnb,WAAP,I,uCAGoD,SAAC,GAGrD,OAAOA,WAAP,I,8BAG2C,SAACsd,GAC5C,IAAMva,EAAYiS,oBAChB,IAAInU,WAAWZ,SADjB,SAGA,OAAOA,mBAAP,SIhMWoe,GCNuB5c,MDMP,aAkI3B,cAKE,QALUO,UAAe,IACzBD,KAAA,yCACAA,KAAA,GAAUC,EAAV,GACAD,KAAA,WAAkBC,EAAlB,WAEIA,EAAJ,gBACED,KAAA,gBAAuB/B,WAAYgC,EAAnC,qBACK,KAAIA,EAAJ,aAML,MAAM,IAAIP,MAAV,gFALAM,KAAA,gBAAuB9B,OACrB6b,EAA6B9Z,EADR/B,cAAvB,OAUE+B,EAAJ,mBACED,KAAA,iBAAwB/B,WAAYgC,EAApC,mBAGEA,EAAJ,gBACED,KAAA,iBAAwB9B,OACtB6b,EAA8B9Z,EADR/B,eAAxB,QAME8B,KAAKf,aAAee,KAAxB,KACEA,KAAA,GAAaA,KAAb,eAAgCA,KAAhC,e,EAxJGG,yBAAP,YAGE,MAEKnC,EAAL,kBACEgc,EAAc/b,WACXD,EADHgc,kBAKGhc,EAAL,eACEgc,EAAc,IAAIlb,WAChBZ,OACE6b,EACG/b,EAHPgc,iBASF,IAAMnb,EAAS,IAAIC,WAAW,EAAIkb,EAAlC,QAOA,OAJAnb,SACAA,OACAA,WAEA,IAAWZ,WAAX,I,EAGW6E,kBAAS7C,kBAAe,I,IACnC,MACA,EACA,GAAIA,EAAJ,aAA0B,OArDZ,SAAC0S,GACjB,MACA,GACEzQ,EAAayQ,WACLM,qBAFV,IAKA,MAAO,CAAEjS,UADSiS,oBAAlB,GACoB/Q,cA+Caqa,CAAUtc,EADf,cACrBiC,EADqB,aACTlB,EADS,YAI1B,MACE,MAAM,IAAItB,MAAV,gCAGF,IAAMhB,EAAkBqb,EACtB7b,mBADF,QAGM2B,EAAmBka,EACvB7b,mBADF,QAIMgY,EAAM,WAAW,2BAA0C,CAC/DxX,oBAEIwb,EAAQ,IAAI,2BAA0C,CAC1Dxb,oBAGF,uBAAO,IAAI,EAAiB,CAC1BF,GAD0B,EAE1BS,WAF0B,EAG1BP,gBAH0B,EAI1BmB,sBAEH,S,6BAEYsD,cAAKlD,G,4DA4BhB,OAAO,IAAI,EAAJ,QAELJ,iBAFK,EAGLnB,qB,oBATEuB,EAAQxB,c,MACQsb,E,uBACVA,EAA6B9Z,EAA7B8Z,iCADRrb,EAAkB,EAAH,OAAfA,O,sDAPEuB,EAAQ8B,e,MACSgY,E,uBACXA,EAA8B9Z,EAA9B8Z,kCADRla,EAAmB,EAAH,OAAhBA,O,sDAPEI,EAAQyb,a,uBACc3B,EACtB9Z,EADsB8Z,iCAAxBrb,O,mCAVEmB,EAAmBI,EAAvB,iBACIvB,EAAkBuB,EAAtB,gB,gBAEIA,EAAQsb,c,uBACexB,EACvB9Z,EADuB8Z,kCAAzBla,O,mDA4BH,S,6BAEM4D,gBAAP,Y,IAAyBpF,gBAEjBQ,EAASZ,WAAYI,SAA3B,IAGA,GAAIQ,YAAJ,IAA0BA,KAAoB,CAC5C,IAAMH,EAAkBT,WAAYY,QAApC,IACMqX,EAAM,WAAW,2BAA0C,CAC/DxX,oBAEIwb,EAAQ,IAAI,2BAA0C,CAC1Dxb,oBAEF,OAAO,IAAI,EAAiB,CAC1BF,GAD0B,EAE1BS,WAF0B,EAG1BP,oBAIJ,MAAM,IAAIgB,MAAM,iCAAhB,I,2BAqCFsb,sBACE,OAAOhb,KAAK4B,WAAZ,I,EAGFE,kBACE,IAAK9B,KAAL,iBACE,MAAM,IAAIN,MAAV,gC,IAEI0D,EAAqBpD,KAArBoD,iBACN,MAAO,CACCjB,KADD,gBACQ8E,EADR,WAEH,IAAMuV,EAAwB3e,mCAA9B,SAKM4e,EAAcxJ,gBAElB,IAAInU,WAFN,IAKA,uBAAO2d,EAAP,WAZG,sC,EAiBTna,oBACE,IAAKtC,KAAL,gBACE,MAAM,IAAIN,MAAV,iC,IAEIJ,EAAoBU,KAApBV,gBACN,MAAO,CACCiD,OADD,gBACU0E,EADV,OACgBmU,EADhB,gBAEH,IAAMoB,EAAwB3e,mCAA9B,SAKIwd,GAAJ,EACA,IACEA,EAAWpI,oBAGT,IAAInU,WAHNuc,IAKA,MAAOtX,GACP0C,gEAEF,0BAjBG,sC,EAsBTpI,uBACE,OAAO,2BAA0C,CAC/CK,gBAAiBT,WAAY+B,KAAZ/B,oB,EAIrBsc,8BAGE,GAA6B,kBAAhBlc,GAAb,MAAyCA,KACvC,MAAO,CACLmc,MAAO,IAAI9a,MADN,qDAEL+a,OAAO,GAGX,MACA,IACEC,EAAoBzc,WAAYI,QAAhCqc,IACA,MAAO3W,GACP,MAAO,CAAEyW,MAAF,EAAYC,OAAO,G,IAEtBnb,EAAoBU,KAApBV,gBAGAmb,EACJC,uCACApb,SAAuBob,QAFzB,IAGA,SAMO,CAAED,SALA,CACLD,MAAO,IAAI9a,MADN,kDAEL+a,OAAO,I,EAMbG,kBACE,QADID,WAAoB,GACxB,EAAc,CACZ,IAAK3a,KAAL,iBACE,MAAM,IAAIN,MAAV,4BAEF,OAAOqa,EACL/Z,KAAKoD,iBAAiBsZ,SADxB,QAIF,OAAO3C,EACL/Z,KAAKV,gBAAgBod,SADvB,S,EAKIC,eAAMhC,mBAAoB,G,0CAWvBZ,E,uBACCA,EACJ,2BADIA,2BADR,uB,OATO/Z,K,gBADH2a,GACF,IAAK,EAAL,iBACE,MAAM,IAAIjb,MAAV,4B,WAEKqa,E,uBACCA,EACJ,4BADIA,2B,cADDA,S,oDAWV,S,6BAEDnY,2BAAUgb,WAAgB,GACxB,IAAMvc,EAAU,CACd7B,GAAIwB,KADU,GAEdhB,KAAMgB,KAFQ,KAGdf,WAAYe,KAHE,WAIdtB,gBAAiBT,WAAY+B,KAAZ/B,kBAKnB,OAHA,IACEoC,mBAAsBpC,WAAY+B,KAAlCK,mBAEF,G,EAGFsB,kCAAiBib,WAAyB,GACxC,IAAIvc,EAAU,CACZ7B,GAAIwB,KADQ,GAEZhB,KAFY,iBAGZC,WAAYe,KAHA,WAIZvB,aAAcuB,KAAK4a,SAQrB,cANOva,eAAP,IACA,IACEA,gBAAmBL,KAAK4a,OAAxBva,UACOA,gBAAP,KAGF,G,EAvTyB,IAAhBic,EAAgB,eAD5B7P,4BACY6P,GzChBN,IAAMvZ,EAAUC,qBAAhB,G,gCACYC,iBAAZ,M,0D2CALiB,EAAOC,QAAU2R,EAAQ,O,0ICJ3B,SAASjS,EAAoBC,GAC5B,IAAIC,EAAI,IAAIrE,MAAM,uBAAyBoE,EAAM,KAEjD,MADAC,EAAEC,KAAO,mBACHD,EAEPF,EAAoBI,KAAO,WAAa,MAAO,IAC/CJ,EAAoBd,QAAUc,EAC9BK,EAAOC,QAAUN,EACjBA,EAAoBrF,GAAK,K,0DCRzB,SAASqF,EAAoBC,GAC5B,IAAIC,EAAI,IAAIrE,MAAM,uBAAyBoE,EAAM,KAEjD,MADAC,EAAEC,KAAO,mBACHD,EAEPF,EAAoBI,KAAO,WAAa,MAAO,IAC/CJ,EAAoBd,QAAUc,EAC9BK,EAAOC,QAAUN,EACjBA,EAAoBrF,GAAK,K,oHCFnBqe,EAAS,uCAAG,WAAO1U,GAAP,uBAAAkK,EAAA,6DACZyK,EAAU,IAAIC,sBAAoB5U,EAAOL,UACvCkV,EAAUF,EAAQhV,SAASmV,MAAK,SAACC,GACrC,MAAkB,YAAXA,EAAEle,SAELwT,EAAasK,EAAQhV,SAASmV,MAAK,SAACC,GACxC,MAAkB,+BAAXA,EAAEle,SAEAC,WAAauT,EAAWhU,GAAG2e,MAAM,KAAK,IAC3CzK,EAAYoK,EAAQhV,SAASmV,MAAK,SAACC,GACvC,MAAkB,8BAAXA,EAAEle,SAEDC,WAAayT,EAAUlU,GAAG2e,MAAM,KAAK,GAZ/B,SAaGC,cAAYC,oBAC7BlV,EAAOJ,cACPyK,EACAE,EACAxU,EAAOiF,KAAK6Z,EAAQnL,MAAO,QAjBb,cAaZyL,EAbY,yBAmBTA,GAnBS,4CAAH,sDAsBTC,EAAqB,SAACC,EAAehf,GACzC,YAGSif,IAFPD,EAAcP,MAAK,SAACC,GAClB,OAAOA,EAAE1e,KAAOA,MAKPiK,gBAAa,CAC1BjB,uBAAwB,gBAAGA,EAAH,EAAGA,uBAAH,OAAgC,SAACE,GACvDF,EAAuBE,KAEzBgW,eAAgB,gBAAGlW,EAAH,EAAGA,uBAAH,8CAAgC,WAAOmW,GAAP,eAAAtL,EAAA,yDACzCsL,EADyC,sBAEtC,IAAIje,MAAM,qBAF4B,uBAI3Bqd,sBAAoBja,SAAS6a,GAJF,OAI1CxV,EAJ0C,OAK9CX,EAAuB,CACrBK,OAAQM,EAAON,OACfC,SAAUK,EAAOL,WAP2B,2CAAhC,uDAUhB8V,iBAAkB,gBAAGpW,EAAH,EAAGA,uBAAH,8CAAgC,mCAAA6K,EAAA,yDAChDxK,EADgD,EAChDA,OACAgW,EAFgD,EAEhDA,SACA/V,EAHgD,EAGhDA,UAEIK,EAAS,IAAI4U,sBAAoBjV,IAC9BD,OAASA,EAED,WAAXA,EAR4C,gCASxCM,EAAO2V,OAAOD,GAT0B,UAWjC,aAAXhW,EAX4C,gCAYxCM,EAAO4V,KAAKF,GAZ4B,OAchDrW,EAAuB,CACrBK,OAAQM,EAAON,OACfC,SAAUK,EAAOL,WAhB6B,4CAAhC,uDAoBlBkW,aAAc,gBAAGxW,EAAH,EAAGA,uBAAH,6BAAgC,sBAAA6K,EAAA,sDAC5C7K,EAAuB,CACrBK,OAAQ,WACRC,SAAU,KAHgC,4CAO9CmW,aAAc,gBAAGzW,EAAH,EAAGA,uBAAH,8CAAgC,WAAO0W,GAAP,eAAA7L,EAAA,6DACxClK,EAAS,IAAI4U,sBAD2B,SAEtC5U,EAAOgW,OAAOD,GAFwB,OAG5C1W,EAAuB,CACrBK,OAAQM,EAAON,OACfC,SAAUK,EAAOL,WALyB,2CAAhC,uDASdsW,aAAc,yDAAM,WAAOvW,EAAQC,GAAf,eAAAuK,EAAA,yDACH,WAAXxK,EADc,sBAEV,IAAInI,MAAM,kCAFA,cAIdyI,EAAS,IAAI4U,sBAAoBjV,IAC9BD,OAASA,EALE,kBAMXM,EAAOkW,UANI,2CAAN,yDASdC,WAAY,gBAAG9W,EAAH,EAAGA,uBAAH,8CAAgC,WAAOM,GAAP,SAAAuK,EAAA,sDAC1C7K,EAAuB,CACrBM,aAFwC,2CAAhC,uDAKZyW,gBAAiB,gBAAGpW,EAAH,EAAGA,OAAQX,EAAX,EAAWA,uBAAX,8CAAwC,mCAAA6K,EAAA,6DACvDmM,EADuD,EACvDA,WACAve,EAFuD,EAEvDA,QAEI6c,EAAU,IAAIC,sBAAoB5U,EAAOL,UAJU,SAKpBgV,EAAQ2B,MAAM,CAC/CD,aACAve,YAPqD,OAKjDye,EALiD,OASvDlX,EAAuB,CACrBM,SAAS,CAAE4W,GAAH,mBAA4B5B,EAAQhV,aAVS,2CAAxC,uDAajB6W,0BAA2B,gBAAGxW,EAAH,EAAGA,OAAQX,EAAX,EAAWA,uBAAX,8CAAwC,mCAAA6K,EAAA,6DACjEqM,EADiE,EACjEA,qBACAze,EAFiE,EAEjEA,QAEI6c,EAAU,IAAIC,sBAAoB5U,EAAOL,UAJoB,SAK5BgV,EAAQ8B,MAAM,CACjDF,uBACAze,YAP+D,OAK3D4e,EAL2D,OASjErX,EAAuB,CACrBM,SAAS,CAAE+W,GAAH,mBAA8B/B,EAAQhV,aAViB,2CAAxC,uDAa3BgX,UAAW,gBAAG3W,EAAH,EAAGA,OAAQX,EAAX,EAAWA,uBAAX,6BAAwC,wCAAA6K,EAAA,6DACjD7K,EAAuB,CACrBS,WAAW,IAFoC,SAI5B4U,EAAU1U,GAJkB,cAI3CmV,EAJ2C,OAM7CxV,EAAW,GANkC,kBAQ9BwV,EAAOyB,oBARuB,OAQ/CjX,EAR+C,yDAU/CrB,QAAQ0S,IAAR,MACI,KAAE6F,QAXyC,sBAiB3B7W,EAAOL,UAjBoB,8DAiBtCmI,EAjBsC,QAmB3BsN,EAAmBzV,EAAUmI,EAAQzR,IAnBV,+BAsBzCyI,EAAO6N,KAAKmK,MAAMnK,KAAKC,UAAU9E,KACzBiP,UAvBiC,UAyBjCC,IAAUC,aAzBuB,gCA0BlC,CACPC,OAAQ,qCACRpY,QAJEqY,EAxBuC,CAyB3C9gB,GAzB2C,KA0B3CyR,QA1B2C,gBA+BvCqN,EAAOiC,iBAAiBD,GA/Be,kKAoChChC,EAAOyB,oBApCyB,QAoCjDjX,EApCiD,OAqCjDN,EAAuB,CACrBS,WAAW,EACXH,aAvC+C,6E,6CC9HrD5D,EAAOC,QAAU,IAA0B,kC,ybCCX,WAC9B,OAAO,YACL,Y,+MCAG,I,4BAAkB,SAAH,WACpB,IAEMqb,EAFgBrhB,WAAiBob,IAAvC,IAEgB,IADOpb,WAAiBob,IAAxC,I,uBAEwBzX,OAAY5D,OAAZ4D,oBAAlBsZ,GACN,OAAUoE,EAAV,IAAwBrhB,WAAiBD,OAAzC,OALoB,oC,UAQG,SAAH,S,MACiBuhB,aAA9BC,OAAQhY,OAAS0T,OAClBuE,EAAkBD,EAAN,IAAlB,E,uBACuBpd,SACrBpE,OADqBoE,GAErBnE,aAFqBmE,KAHH,oC,kBAWW,SAAH,WAK5B,IAAMsd,EAAgB,WACpBrG,IAAa,EAAD,MAAcsG,KAAd,EAA0BC,KAAM,CAAC,WAGzCN,EAAa,IAAI1gB,WACrBZ,SAAc,CACZA,SADY,SAEZA,WAFY,SADhB,K,uBAOwB4D,OAAY5D,OAAZ4D,oBAAlBsZ,GACN,IAAM2E,EAAmB5hB,WAAiBD,OAA1C,IACA,OAAU0hB,EAAV,UAlB4B,oC,kBAqBG,SAAH,W,MAKcxE,cAAnCwE,OAAeG,OAEhBJ,EAAe,IAAI7gB,WACvBZ,SAAc,CACZA,SADY,SAEZA,WAFY,SADhB,K,uBAQuBoE,SACrBpE,OADqBoE,GAErBnE,aAFqBmE,KAfK,qCC3CjB0d,EAAwB,SAAC,EAAD,GAInC,MACA,YAHA5N,UAAsB,2BAGtB,GACE,2BACE6N,EAA4BC,EAA5BD,mBACA,MAEF,UACA,8BACEA,EAA4BC,EAA5BD,YACA,MAEF,QACE,MAAM,IAAIvgB,MACR,oDADF,GAKJ,UAGWygB,EAAc,SAAH,cAEtB/N,MAFyB,2BAAH,I,iBAoEtB,OAboB,EAAH,CACf,WAAY,CAAC,+BAEX,CACE,QAAS8D,IAGb1X,GAAI0X,GAPN,IAnDMA,EAAM,WAAWgK,EAAvB,cACMD,EAA4BD,EAAsB,EAAxD,GAIII,EAAiC,CACnCC,mBAAoB,CAACJ,IAGnBC,EAAJ,WACEE,EAA4B,EAAH,MAEvBE,eAAgB,CAACL,EAFM,IAGvBM,gBAAiB,CAACN,EAHK,IAIvBO,qBAAsB,CAACP,EAJA,IAKvBQ,qBAAsB,CAACR,EAAD,OAItBC,EAAJ,eACEE,EAA4B,EAAH,MAEvBM,aAAc,CAACT,EAAD,O,oBAIc,+BAA5BC,O,uBACgBA,sCAAZ9e,GACN,IAAMuf,EAA6BX,EAAsB5e,EAAzD,GACAgf,EAA4B,EAAH,MAEvBC,mBAAoB,GAAF,OACbD,EADa,oBAFK,IAMvBM,aAAc,CAACC,EAAD,S,mDAvCI,oCAyEX3d,EAAa,SAAC4d,GAkBzB,OAjBgB,SAAH,cAEX3b,MAA0B,CAAEC,OAAQ,4BAFzB,IAIX,IAAM7G,EAAcwiB,kCAApB,M,uBAIwBD,EAAA,gBAAgC,CAAEviB,iBAAlC,eAAlB2C,G,uBAEemf,EAAYnf,EAAWiE,EAAZ,2BADhC,MAAO,CACL6N,YADK,EAELgO,oBAAqB,CACnB,eAAgB7b,EAAmBC,QAErC6b,sBAAuB,UAdd,qCClGF9d,EAAS,SAACF,GASrB,OARY,SAAH,yBAAYmT,EAAT,EAAH,IAAiB8K,EAAd,EAAH,QAEP,KADA9K,EAAMA,GAANA,GAEE,MAAM,IAAItV,UAAV,2B,uBAEmBmC,EAAQmT,IAAD,eAAtBvT,GACN,OAAOA,EAAP,eANO,sC","file":"static/js/main.ad83044c.chunk.js","sourcesContent":["// See https://github.com/multiformats/multicodec/pull/190\n\nexport const SUPPORTED_EC = [\n  'P-256',\n  'P-384',\n  'P-521',\n  // not currently supported by web crypto\n  // 'Ed448', 'X448'\n];\n\nexport const multicodecPrefix = 0x12;\n\nexport const crvToMulticodecPrefix: any = {\n  'P-256': 0x00,\n  'P-384': 0x01,\n  'P-521': 0x02,\n  // Ed448: 0x03,\n  // X448: 0x04,\n};\n\nexport const multicodecToJwkType: any = {\n  0x00: { kty: 'EC', crv: 'P-256' },\n  0x01: { kty: 'EC', crv: 'P-384' },\n  0x02: { kty: 'EC', crv: 'P-521' },\n  // 0x03: { kty: 'OKP', crv: 'Ed448' },\n  // 0x04: { kty: 'OKP', crv: 'X448' },\n};\n\nexport const crvToJwsAlg: any = {\n  'P-256': 'ES256',\n  'P-384': 'ES384',\n  'P-521': 'ES521',\n};\n\nexport const crvToJwsHashAlg: any = {\n  'P-256': 'SHA-256',\n  'P-384': 'SHA-384',\n  'P-521': 'SHA-512',\n};\n","import { Crypto } from 'node-webcrypto-ossl';\n\nfunction isNodejs() {\n  return (\n    typeof process === 'object' &&\n    typeof process.versions === 'object' &&\n    typeof process.versions.node !== 'undefined' &&\n    typeof window !== undefined\n  );\n}\n\nlet crypto: Crypto;\n\nif (isNodejs()) {\n  crypto = new Crypto();\n} else {\n  crypto = window.crypto as Crypto;\n}\n\nexport default crypto;\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\n\nimport { types } from '@transmute/did-key-common';\n\nexport const jwkToBase58 = (jwk: any): types.LinkedDataKeyPair => {\n  let keypair: any = {};\n  if (jwk.d) {\n    keypair.privateKeyBase58 = bs58.encode(\n      Buffer.concat([base64url.toBuffer(jwk.d)])\n    );\n  }\n  if (jwk.x) {\n    keypair.publicKeyBase58 = bs58.encode(\n      Buffer.concat([base64url.toBuffer(jwk.x)])\n    );\n  }\n  if (jwk.x && jwk.y) {\n    keypair.publicKeyBase58 = bs58.encode(\n      Buffer.concat([base64url.toBuffer(jwk.x), base64url.toBuffer(jwk.y)])\n    );\n  }\n\n  return keypair;\n};\n","export const fingerprintToDid = (fingerprint: string, methodName = 'key') => {\n  return `did:${methodName}:${fingerprint}`;\n};\n","import { types } from '@transmute/did-key-common';\n\nimport { jwkToBase58 } from './jwkToBase58';\nimport { getMultibaseFromJwk } from './getMultibaseFromJwk';\nimport { fingerprintToDid } from './fingerprintToDid';\n\nexport const fromJwk = (jwk: any): types.LinkedDataKeyPair => {\n  const id = getMultibaseFromJwk(jwk);\n  const controller = fingerprintToDid(id);\n  return {\n    id: `#${id}`,\n    type: 'JsonWebKey2020',\n    controller,\n    ...(jwkToBase58(jwk) as any),\n  };\n};\n","import bs58 from 'bs58';\n\nimport { crvToMulticodecPrefix } from '../constants';\nimport { jwkToBase58 } from './jwkToBase58';\n\nexport const getMultibaseFromJwk = (publicKeyJwk: any): string => {\n  const { publicKeyBase58 } = jwkToBase58(publicKeyJwk);\n  const publicKeyBytes = bs58.decode(publicKeyBase58);\n  const prefix = crvToMulticodecPrefix[publicKeyJwk.crv];\n  const buffer = new Uint8Array(3 + publicKeyBytes.length);\n  // https://github.com/multiformats/multicodec/pull/190\n  buffer[0] = 0x12;\n  buffer[1] = prefix;\n  buffer[2] = 0x01;\n  buffer.set(publicKeyBytes, 3);\n  // prefix with `z` to indicate multi-base base58btc encoding\n  return `z${bs58.encode(buffer)}`;\n};\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\n\nimport { types } from '@transmute/did-key-common';\n\nexport const base58KeyPairToJwk = (\n  keypair: types.LinkedDataKeyPair\n): object => {\n  const publicKeyBuffer = bs58.decode(keypair.publicKeyBase58);\n\n  const x = base64url.encode(\n    publicKeyBuffer.slice(0, publicKeyBuffer.length / 2)\n  );\n\n  const y = base64url.encode(publicKeyBuffer.slice(publicKeyBuffer.length / 2));\n\n  let jwk: any = { x, y };\n\n  if (keypair.privateKeyBase58) {\n    jwk.d = base64url.encode(bs58.decode(keypair.privateKeyBase58));\n  }\n\n  return jwk;\n};\n","import crypto from '../crypto';\nimport { Jws } from '@transmute/did-key-common';\n\nimport { crvToJwsHashAlg } from '../constants';\n\nconst { createJws, verifyJws, createDetachedJws, verifyDetachedJws } = Jws;\n\nexport { createJws, verifyJws, createDetachedJws, verifyDetachedJws };\n\nexport const privateKeyToSigner = async (privateKeyJwk: any) => {\n  const privateKey = await crypto.subtle.importKey(\n    'jwk',\n    privateKeyJwk,\n    {\n      name: 'ECDSA',\n      namedCurve: privateKeyJwk.crv,\n    },\n    true,\n    ['sign']\n  );\n\n  return {\n    sign: async (data: Buffer) => {\n      const signature = await crypto.subtle.sign(\n        {\n          name: 'ECDSA',\n          hash: { name: crvToJwsHashAlg[privateKeyJwk.crv] },\n        },\n        privateKey,\n        data\n      );\n      return signature as Buffer;\n    },\n  };\n};\n\nexport const publicKeyToVerifier = async (publicKeyJwk: any) => {\n  const publicKey = await crypto.subtle.importKey(\n    'jwk',\n    publicKeyJwk,\n    {\n      name: 'ECDSA',\n      namedCurve: publicKeyJwk.crv,\n    },\n    true,\n    ['verify']\n  );\n\n  return {\n    verify: async (toBeVerified: Buffer, signature: Buffer) => {\n      const verified = await crypto.subtle.verify(\n        {\n          name: 'ECDSA',\n          hash: { name: crvToJwsHashAlg[publicKeyJwk.crv] },\n        },\n        publicKey,\n        signature,\n        toBeVerified\n      );\n      return verified;\n    },\n  };\n};\n","import bs58 from 'bs58';\nimport { multicodecToJwkType } from '../constants';\nexport const getJwkTypeFromMultibase = (fingerprint: string) => {\n  const buffer = bs58.decode(fingerprint.substring(1));\n\n  if (buffer[0] !== 0x12) {\n    throw new Error(`Unsupported multibase ${buffer[0].toString(16)}`);\n  }\n\n  const type = multicodecToJwkType[buffer[1]];\n  if (!type) {\n    throw new Error(\n      `Unsupported multibase ${buffer[0].toString(16)} ${buffer[1].toString(\n        16\n      )}`\n    );\n  }\n  return type;\n};\n","import { types } from '@transmute/did-key-common';\n\nimport { base58KeyPairToJwk } from './base58KeyPairToJwk';\nimport { getJwkTypeFromMultibase } from './getJwkTypeFromMultibase';\nexport const toJwkPair = (\n  keypair: types.LinkedDataKeyPair\n): types.JsonWebKeyPair => {\n  // console.log('toJwkPair', keypair);\n  const id = keypair.id.substring(keypair.id.indexOf('#') + 1);\n  let _keypair: any = {\n    id: keypair.id,\n    type: 'JsonWebKey2020',\n    controller: keypair.controller,\n  };\n\n  _keypair.publicKeyJwk = {\n    ...getJwkTypeFromMultibase(id),\n    ...base58KeyPairToJwk({\n      publicKeyBase58: keypair.publicKeyBase58,\n    } as any),\n  };\n\n  if (keypair.privateKeyBase58) {\n    _keypair.privateKeyJwk = {\n      ...getJwkTypeFromMultibase(id),\n      ...base58KeyPairToJwk({\n        publicKeyBase58: keypair.publicKeyBase58,\n        privateKeyBase58: keypair.privateKeyBase58,\n      } as any),\n    };\n  }\n\n  return _keypair;\n};\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\n\nimport { generate } from './functions/generate';\nimport { fromJwk } from './functions/fromJwk';\n\nimport { deriveSecret } from './Jwe';\nimport { privateKeyToSigner, publicKeyToVerifier } from './Jws';\nimport { toJwkPair } from './functions/toJwkPair';\nimport { fingerprintToDid } from './functions/fingerprintToDid';\nimport { getJwkTypeFromMultibase } from './functions/getJwkTypeFromMultibase';\n\nimport { types } from '@transmute/did-key-common';\n\nimport {\n  getEpkGenerator,\n  deriveKey,\n  KeyEncryptionKey,\n} from '@transmute/did-key-cipher';\n\n/* class decorator */\nfunction staticImplements<T>() {\n  return <U extends T>(constructor: U) => {\n    return constructor;\n  };\n}\n\nconst KEY_TYPE = 'JsonWebKey2020';\n\n@staticImplements<types.KeyAgreementKeyPairClass>()\nexport class KeyPair implements types.KeyAgreementKeyPairInstance {\n  public static JWE_ALG: types.ECDH_ES_A256KW = 'ECDH-ES+A256KW';\n\n  static generate = async (options?: any) => {\n    const { privateKeyJwk } = await generate(options);\n    return new KeyPair({ ...fromJwk(privateKeyJwk) });\n  };\n\n  static from = (options?: any) => {\n    return new KeyPair({ ...options });\n  };\n\n  static fromFingerprint = async ({ fingerprint }: any) => {\n    const data = getJwkTypeFromMultibase(fingerprint);\n    if (data.kty) {\n      const publicKeyBytes = bs58.decode(fingerprint.substring(1));\n\n      const publicKeyBase58 = bs58.encode(publicKeyBytes.slice(3));\n\n      return new KeyPair({\n        id: '#' + fingerprint,\n        controller: fingerprintToDid(fingerprint),\n        type: 'JsonWebKey2020',\n        publicKeyBase58,\n      });\n    }\n    throw new Error('Cannot create key from fingerprint ' + fingerprint);\n  };\n\n  static fingerprintFromPublicKey(\n    keypair: types.KeyPairJwk | types.KeyPairBase58\n  ) {\n    let kp = KeyPair.from(keypair);\n    return kp.id.substring(1);\n  }\n\n  static async generateEphemeralKeyPair(\n    epkArgs: any\n  ): Promise<types.EpkResult> {\n    return getEpkGenerator(KeyPair, epkArgs)();\n  }\n\n  static async kekFromEphemeralPeer({\n    keyAgreementKey,\n    epk,\n  }: types.KeyEncryptionKeyFromEphemeralPublicKeyOptions) {\n    if (!(epk && typeof epk === 'object')) {\n      throw new TypeError('\"epk\" must be an object.');\n    }\n\n    // convert to LD key for Web KMS\n    const ephemeralPublicKey = new KeyPair({\n      publicKeyJwk: epk,\n    } as any);\n\n    // safe to use IDs like in rfc7518 or does\n    // https://tools.ietf.org/html/rfc7748#section-7 pose any issues?\n\n    // \"Party U Info\"\n    const producerInfo = ephemeralPublicKey.publicKeyBuffer;\n    // \"Party V Info\"\n    const consumerInfo = Buffer.from(keyAgreementKey.id);\n    // converts keys again....\n    // base58 encoding should only be used at the network / serialization boundary.\n    const secret = await (keyAgreementKey as types.KeyAgreementKeyPairInstance).deriveSecret(\n      {\n        publicKey: ephemeralPublicKey.toJsonWebKeyPair(),\n      } as any\n    );\n    const keyData = await deriveKey({ secret, producerInfo, consumerInfo });\n    return {\n      kek: await KeyEncryptionKey.createKek({ keyData }),\n    };\n  }\n\n  static async kekFromStaticPeer({\n    ephemeralKeyPair,\n    staticPublicKey,\n  }: types.KeyEncryptionKeyFromStaticPublicKeyOptions) {\n    if (staticPublicKey.type !== KEY_TYPE) {\n      throw new Error(`\"staticPublicKey.type\" must be \"${KEY_TYPE}\".`);\n    }\n\n    const epkPair = await KeyPair.from(ephemeralKeyPair.keypair);\n\n    // \"Party U Info\"\n    const producerInfo = epkPair.publicKeyBuffer;\n    // \"Party V Info\"\n    const consumerInfo = Buffer.from(staticPublicKey.id);\n\n    const secret = await epkPair.deriveSecret({\n      publicKey: staticPublicKey,\n    } as any);\n    const keyData = await deriveKey({ secret, producerInfo, consumerInfo });\n    return {\n      kek: await KeyEncryptionKey.createKek({ keyData }),\n      epk: ephemeralKeyPair.epk,\n      apu: base64url.encode(producerInfo),\n      apv: base64url.encode(consumerInfo as any),\n    };\n  }\n\n  public id: string;\n  public type: string;\n  public controller: string;\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  constructor(options: any) {\n    this.id = options.id;\n    this.type = options.type || 'JsonWebKey2020';\n\n    this.controller = options.controller;\n    if (options.publicKeyBase58) {\n      this.publicKeyBuffer = bs58.decode(options.publicKeyBase58);\n    } else if (options.publicKeyJwk) {\n      const args = fromJwk(options.publicKeyJwk);\n      this.publicKeyBuffer = bs58.decode(args.publicKeyBase58);\n      this.id = options.id || args.id;\n      this.controller = args.controller;\n    } else {\n      throw new Error('publicKeyJwk or publicKeyBase58 is required.');\n    }\n\n    if (options.privateKeyBase58) {\n      this.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n    } else if (options.privateKeyJwk) {\n      const { privateKeyBase58 } = fromJwk(options.privateKeyJwk);\n      this.privateKeyBuffer = bs58.decode(privateKeyBase58);\n    }\n  }\n\n  fingerprint() {\n    const { id } = this.toJsonWebKeyPair();\n    return id.substring(1);\n  }\n\n  toKeyPair(exportPrivateKey = false) {\n    let options: any = {\n      id: this.id,\n      type: 'UnsupportedVerificationMethod2020',\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n    if (exportPrivateKey) {\n      options.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return options;\n  }\n\n  toJsonWebKeyPair(exportPrivateKey = false) {\n    const options = this.toKeyPair(exportPrivateKey);\n    return toJwkPair(options);\n  }\n\n  async signer() {\n    const { privateKeyJwk } = this.toJsonWebKeyPair(true);\n    return privateKeyToSigner(privateKeyJwk);\n  }\n\n  async verifier() {\n    const { publicKeyJwk } = this.toJsonWebKeyPair();\n    return publicKeyToVerifier(publicKeyJwk);\n  }\n\n  deriveSecret(options: types.DeriveSecretOptions) {\n    const { privateKeyJwk } = this.toJsonWebKeyPair(true);\n    let publicKeyJwk;\n\n    if ((options.publicKey as any).publicKeyJwk) {\n      publicKeyJwk = (options.publicKey as any).publicKeyJwk;\n    } else if ((options.publicKey as any).publicKeyBase58) {\n      ({ publicKeyJwk } = toJwkPair(options.publicKey as any));\n    } else {\n      throw new Error(\n        'Cannot deriveSecret from remote... publicKeyJwk or publicKeyBase58 must be present.'\n      );\n    }\n    return deriveSecret(privateKeyJwk, publicKeyJwk);\n  }\n}\n","import crypto from '../crypto';\n\nexport const deriveSecret = async (\n  privateKeyJwk: any,\n  publicKeyJwk: any\n): Promise<Uint8Array> => {\n  // console.log(privateKeyJwk, publicKeyJwk);\n  const privateKey = await crypto.subtle.importKey(\n    'jwk',\n    privateKeyJwk,\n    {\n      name: 'ECDH',\n      namedCurve: privateKeyJwk.crv,\n    },\n    true,\n    ['deriveBits']\n  );\n  const publicKey = await crypto.subtle.importKey(\n    'jwk',\n    publicKeyJwk,\n    {\n      name: 'ECDH',\n      namedCurve: publicKeyJwk.crv,\n    },\n    true,\n    ['deriveBits']\n  );\n  const result = await crypto.subtle.deriveBits(\n    {\n      name: 'ECDH',\n      public: publicKey,\n    },\n    privateKey,\n    256\n  );\n  return new Uint8Array(result);\n};\n","import { SUPPORTED_EC } from '../constants';\nimport crypto from '../crypto';\n\nexport interface GenerateOptions {\n  kty: string;\n  crvOrSize: string;\n}\n\nexport const generate = async (\n  options: GenerateOptions = { kty: 'EC', crvOrSize: 'P-256' }\n) => {\n  if (options.kty === 'EC' && SUPPORTED_EC.indexOf(options.crvOrSize) !== -1) {\n    let kp = await crypto.subtle.generateKey(\n      {\n        name: 'ECDSA',\n        namedCurve: options.crvOrSize,\n      },\n      true,\n      ['sign', 'verify']\n    );\n    const jwk = await crypto.subtle.exportKey('jwk', kp.privateKey);\n    return {\n      publicKeyJwk: {\n        kty: jwk.kty,\n        crv: jwk.crv,\n        x: jwk.x,\n        y: jwk.y,\n      },\n      privateKeyJwk: {\n        kty: jwk.kty,\n        crv: jwk.crv,\n        x: jwk.x,\n        y: jwk.y,\n        d: jwk.d,\n      },\n    };\n  }\n\n  throw new Error(\n    `Generate does not support ${options.kty} and ${options.crvOrSize}`\n  );\n};\n","import { Secp256k1KeyPair } from './Secp256k1KeyPair';\nimport { getResolve, getGet } from '@transmute/did-key-common';\n\nexport const resolve = getResolve(Secp256k1KeyPair);\nexport const get = getGet(resolve);\n","import * as mattr from '@mattrglobal/bls12381-key-pair';\n\nimport { generateBls12381KeyPair } from '@mattrglobal/bbs-signatures';\nimport * as bs58 from 'bs58';\n\nexport class Bls12381G2KeyPair {\n  public id: string;\n  public type: string = 'Bls12381G2Key2020';\n  public controller: string;\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  static async generate() {\n    const keyPair = generateBls12381KeyPair();\n    let options = {\n      privateKeyBase58: bs58.encode(keyPair.secretKey as Uint8Array),\n      publicKeyBase58: bs58.encode(keyPair.publicKey),\n    };\n    const fingerprint = mattr.Bls12381G2KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58: options.publicKeyBase58,\n    });\n    return new Bls12381G2KeyPair({\n      ...options,\n      id: '#' + fingerprint,\n      controller: `did:key:${fingerprint}`,\n    });\n  }\n\n  static async fromFingerprint({ fingerprint }: any) {\n    const keypair = mattr.Bls12381G2KeyPair.fromFingerprint({\n      fingerprint,\n    });\n    const options = {\n      publicKeyBase58: bs58.encode(keypair.publicKeyBuffer),\n    };\n    return new Bls12381G2KeyPair(options);\n  }\n\n  static async from(options: any) {\n    let keypair;\n    if (options.publicKeyJwk) {\n      keypair = await mattr.Bls12381G2KeyPair.fromJwk(options);\n    }\n    if (options.privateKeyJwk) {\n      keypair = await mattr.Bls12381G2KeyPair.fromJwk(options);\n    }\n\n    if (options.publicKeyBase58) {\n      keypair = await mattr.Bls12381G2KeyPair.from(options);\n    }\n    if (options.privateKeyBase58) {\n      keypair = await mattr.Bls12381G2KeyPair.from(options);\n    }\n\n    let _options: any = {\n      publicKeyBase58: bs58.encode((keypair as any).publicKeyBuffer),\n    };\n    if ((keypair as any).privateKeyBuffer) {\n      _options.privateKeyBase58 = bs58.encode(\n        (keypair as any).privateKeyBuffer\n      );\n    }\n\n    return new Bls12381G2KeyPair(_options);\n  }\n\n  constructor(options: any) {\n    this.id = options.id;\n    this.type = options.type || 'Bls12381G2Key2020';\n    this.controller = options.controller;\n    if (options.publicKeyBase58) {\n      this.publicKeyBuffer = bs58.decode(options.publicKeyBase58);\n    } else if (options.publicKeyJwk) {\n      this.publicKeyBuffer = Buffer.from('a');\n    } else {\n      throw new Error(\n        'Bls12381G2KeyPair requires publicKeyBase58 or publicKeyJwk, recieved neither.'\n      );\n    }\n    if (options.privateKeyBase58) {\n      this.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n    }\n\n    if (!this.id) {\n      this.id = '#' + this.fingerprint();\n    }\n    if (!this.controller) {\n      this.controller = `did:key:${this.fingerprint()}`;\n    }\n  }\n  fingerprint() {\n    const fingerprint = mattr.Bls12381G2KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    });\n    return fingerprint;\n  }\n\n  toKeyPair(exportPrivateKey: boolean = false) {\n    const kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n\n    if (exportPrivateKey) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(exportPrivateKey = false) {\n    const mattrKey = new mattr.Bls12381G2KeyPair(\n      this.toKeyPair(exportPrivateKey)\n    );\n    const kp: any = {\n      id: this.id,\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: mattrKey.publicKeyJwk,\n    };\n    delete kp.publicKeyJwk.kid;\n    if (exportPrivateKey) {\n      kp.privateKeyJwk = mattrKey.privateKeyJwk;\n      delete kp.privateKeyJwk.kid;\n    }\n    return kp;\n  }\n  verifier() {\n    const mattrKey = new mattr.Bls12381G2KeyPair(this.toKeyPair(false));\n    return mattrKey.verifier();\n  }\n  signer() {\n    const mattrKey = new mattr.Bls12381G2KeyPair(this.toKeyPair(true));\n    return mattrKey.signer();\n  }\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1369;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1384;","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { driver as ed25519Driver } from '@transmute/did-key-ed25519';\nimport { driver as x25519Driver } from '@transmute/did-key-x25519';\nimport { driver as bls12381Driver } from '@transmute/did-key-bls12381';\nimport { driver as secp256k1Driver } from '@transmute/did-key-secp256k1';\nimport { driver as didWebDriver } from '@transmute/did-key-web-crypto';\n\nconst prefixToDriverMap: any = {\n  z6Mk: ed25519Driver,\n  z6LS: x25519Driver,\n  zUC7: bls12381Driver,\n  zQ3s: secp256k1Driver,\n  zXwp: didWebDriver,\n  zACH: didWebDriver,\n  zJss: didWebDriver,\n};\n\nexport const resolver = {\n  resolve: async (\n    didUrl: string,\n    resolutionMetaData: any = { accept: 'application/did+ld+json' }\n  ) => {\n    if (didUrl.indexOf('did:key:') !== 0) {\n      throw new Error('did must be of method did:key.');\n    }\n    const idchar: any = didUrl.split('did:key:').pop();\n    const encodedType = idchar.substring(0, 4);\n    try {\n      const result = await prefixToDriverMap[encodedType].resolve(\n        didUrl,\n        resolutionMetaData\n      );\n      return result;\n    } catch (e) {\n      throw new Error('Unknown DID Key type: ' + encodedType);\n    }\n  },\n};\n","import { Crypto } from 'node-webcrypto-ossl';\n\nfunction isNodejs() {\n  return (\n    typeof process === 'object' &&\n    typeof process.versions === 'object' &&\n    typeof process.versions.node !== 'undefined'\n  );\n}\n\nlet crypto: Crypto;\n\nif (isNodejs()) {\n  crypto = new Crypto();\n} else {\n  crypto = window.crypto as Crypto;\n}\n\nexport default crypto;\n","/*!\n * Copyright (c) 2019-2020 Digital Bazaar, Inc. All rights reserved.\n */\nimport crypto from '../crypto';\n\n// only supported algorithm\nconst KEY_ALGORITHM = 'ECDH-ES+A256KW';\n\n// create static ALGORITHM_ID\nconst ALGORITHM_CONTENT = KEY_ALGORITHM; //new TextEncoder().encode();\nconst ALGORITHM_ID = new Uint8Array(4 + ALGORITHM_CONTENT.length);\n// write length of content as 32-bit big endian integer, then write content\nconst dv = new DataView(\n  ALGORITHM_ID.buffer,\n  ALGORITHM_ID.byteOffset,\n  ALGORITHM_ID.byteLength\n);\ndv.setUint32(0, ALGORITHM_CONTENT.length);\nALGORITHM_ID.set(Buffer.from(ALGORITHM_CONTENT), 4);\n\n// RFC 7518 Section 4.6.2 specifies using SHA-256 for ECDH-ES KDF\n// https://tools.ietf.org/html/rfc7518#section-4.6.2\nconst HASH_ALGORITHM = { name: 'SHA-256' };\n\n// derived keys are always 256-bits\nconst KEY_LENGTH = 256;\n\n/**\n * Derives a 256-bit AES-KW key encryption key from a shared secret that\n * was derived from an ephemeral and static pair\n * of Elliptic Curve Diffie-Hellman keys.\n *\n * The KDF used is described in RFC 7518. This KDF is referenced by RFC 8037,\n * which defines how to perform Curve25519 (X25519) ECDH key agreement.\n *\n * @param {object} options - The options to use.\n * @param {Uint8Array} options.secret - The shared secret (i.e., `Z`) to use.\n * @param {Uint8Array} options.producerInfo - An array of application-specific\n *   bytes describing the consumer (aka the \"encrypter\" or \"sender\").\n * @param {Uint8Array} options.consumerInfo - An array of application-specific\n *   bytes describing the producer (aka the \"decrypter\" or\n *   \"receiver\"/\"recipient\").\n *\n * @returns {Promise<Uint8Array>} - Resolves to the generated key.\n */\nexport async function deriveKey({ secret, producerInfo, consumerInfo }: any) {\n  if (!(secret instanceof Uint8Array && secret.length > 0)) {\n    throw new TypeError('\"secret\" must be a non-empty Uint8Array.');\n  }\n  if (!(producerInfo instanceof Uint8Array && producerInfo.length > 0)) {\n    throw new TypeError('\"producerInfo\" must be a non-empty Uint8Array.');\n  }\n  if (!(consumerInfo instanceof Uint8Array && consumerInfo.length > 0)) {\n    throw new TypeError('\"consumerInfo\" must be a non-empty Uint8Array.');\n  }\n\n  // the output of Concat KDF is hash(roundNumber || Z || OtherInfo)\n  // where roundNumber is always 1 because the hash length is presumed to\n  // ...match the key length, encoded as a big endian 32-bit integer\n  // where OtherInfo is:\n  // AlgorithmID || PartyUInfo || PartyVInfo || SuppPubInfo\n  // where SuppPubInfo is the key length in bits, big endian encoded as a\n  // 32-bit number, i.e., 256 === [0, 0, 1, 0]\n  const input = new Uint8Array(\n    4 + // round number\n    secret.length + // `Z`\n    ALGORITHM_ID.length + // AlgorithmID\n    4 +\n    producerInfo.length + // PartyUInfo\n    4 +\n    consumerInfo.length + // PartyVInfo\n      4\n  ); // SuppPubInfo (key data length in bits)\n  let offset = 0;\n  const dv = new DataView(input.buffer, input.byteOffset, input.byteLength);\n  dv.setUint32(offset, 1);\n  input.set(secret, (offset += 4));\n  input.set(ALGORITHM_ID, (offset += secret.length));\n  dv.setUint32((offset += ALGORITHM_ID.length), producerInfo.length);\n  input.set(producerInfo, (offset += 4));\n  dv.setUint32((offset += producerInfo.length), consumerInfo.length);\n  input.set(consumerInfo, (offset += 4));\n  dv.setUint32((offset += consumerInfo.length), KEY_LENGTH);\n\n  // hash input and return result as derived key\n  return new Uint8Array(await crypto.subtle.digest(HASH_ALGORITHM, input));\n}\n","import { default as bs64 } from 'base64url';\nimport { AESKW } from '@stablelib/aes-kw';\n\nexport interface CreateKekOptions {\n  keyData: Uint8Array;\n}\n\nexport interface WrapKeyOptions {\n  unwrappedKey: Uint8Array;\n}\n\nexport interface UnwrapKeyOptions {\n  wrappedKey: string; //base64url\n}\n\nexport class KeyEncryptionKey {\n  public aeskw: AESKW;\n  public algorithm: any;\n\n  static createKek = async ({ keyData }: CreateKekOptions) => {\n    return new KeyEncryptionKey(keyData);\n  };\n\n  constructor(key: Uint8Array) {\n    if (key.length !== 32) {\n      throw new Error('key must be 32 bytes');\n    }\n    this.aeskw = new AESKW(key);\n    this.algorithm = { name: 'A256KW' };\n  }\n\n  /**\n   * Wraps a cryptographic key.\n   *\n   * @param {object} options - The options to use.\n   * @param {Uint8Array} options.unwrappedKey - The key material as a\n   *   `Uint8Array`.\n   *\n   * @returns {string} - The base64url-encoded wrapped key bytes.\n   */\n  wrapKey({ unwrappedKey }: WrapKeyOptions): string {\n    const wrappedKey = this.aeskw.wrapKey(unwrappedKey);\n    return bs64.encode(Buffer.from(wrappedKey));\n  }\n\n  /**\n   * Unwraps a cryptographic key.\n   *\n   * @param {object} options - The options to use.\n   * @param {string} options.wrappedKey - The wrapped key material as a\n   *   base64url-encoded string.\n   *\n   * @returns {Uint8Array} - Resolves to the key bytes or null if\n   *   the unwrapping fails because the key does not match.\n   */\n  unwrapKey({ wrappedKey }: UnwrapKeyOptions): Uint8Array | null {\n    const _wrappedKey = bs64.toBuffer(wrappedKey);\n    try {\n      return this.aeskw.unwrapKey(_wrappedKey);\n    } catch (e) {\n      // decryption failed\n      console.error(e);\n      return null;\n    }\n  }\n}\n","/*!\n * Copyright (c) 2019-2020 Digital Bazaar, Inc. All rights reserved.\n */\nimport crypto from '../crypto';\nimport { XChaCha20Poly1305, KEY_LENGTH } from '@stablelib/xchacha20poly1305';\n\nexport const JWE_ENC = 'XC20P';\n\n/**\n * Generates a content encryption key (CEK). The 256-bit key is intended to be\n * used as a XChaCha20Poly1305 (draft-irtf-cfrg-xchacha-01) key.\n *\n * @returns {Promise<Uint8Array>} - Resolves to the generated key.\n */\nexport async function generateKey() {\n  // generate content encryption key\n  return crypto.getRandomValues(new Uint8Array(KEY_LENGTH));\n}\n\n/**\n * Encrypts some data. The data will be encrypted using the given\n * 256-bit XChaCha20Poly1305 (draft-irtf-cfrg-xchacha-01) content encryption\n * key (CEK).\n *\n * @param {object} options - The options to use.\n * @param {Uint8Array} options.data - The data to encrypt.\n * @param {Uint8Array} [options.additionalData] - Optional additional\n *   authentication data.\n * @param {Uint8Array} options.cek - The content encryption key to use.\n *\n * @returns {Promise<object>} - Resolves to `{ciphertext, iv, tag}`.\n */\nexport async function encrypt({ data, additionalData, cek }: any) {\n  if (!(data instanceof Uint8Array)) {\n    throw new TypeError('\"data\" must be a Uint8Array.');\n  }\n  if (!(cek instanceof Uint8Array)) {\n    throw new TypeError('\"cek\" must be a Uint8Array.');\n  }\n\n  const cipher = new XChaCha20Poly1305(cek);\n  // Note: Uses a random value here as a counter is not viable -- multiple\n  // recipients may be trying to update at the same time and use the same\n  // counter breaking security; using XChaCha20Poly1305 once available will\n  // further reduce chances of a collision as it has a 192-bit IV\n  const iv = crypto.getRandomValues(new Uint8Array(cipher.nonceLength));\n\n  // encrypt data\n  const encrypted = cipher.seal(iv, data, additionalData);\n\n  // split ciphertext and tag\n  const ciphertext = encrypted.subarray(0, encrypted.length - cipher.tagLength);\n  const tag = encrypted.subarray(encrypted.length - cipher.tagLength);\n\n  return {\n    ciphertext,\n    iv,\n    tag,\n  };\n}\n\n/**\n * Decrypts some encrypted data. The data must have been encrypted using\n * the given XChaCha20Poly1305 (draft-irtf-cfrg-xchacha-01) content encryption\n * key (CEK).\n *\n * @param {object} options - The options to use.\n * @param {Uint8Array} options.ciphertext - The data to decrypt.\n * @param {Uint8Array} options.iv - The initialization vector (aka nonce).\n * @param {Uint8Array} options.tag - The authentication tag.\n * @param {Uint8Array} [options.additionalData] - Optional additional\n *   authentication data.\n * @param {Uint8Array} options.cek - The content encryption key to use.\n *\n * @returns {Promise<Uint8Array>} The decrypted data.\n */\nexport async function decrypt({\n  ciphertext,\n  iv,\n  tag,\n  additionalData,\n  cek,\n}: any) {\n  if (!(iv instanceof Uint8Array)) {\n    throw new Error('Invalid or missing \"iv\".');\n  }\n  if (!(ciphertext instanceof Uint8Array)) {\n    throw new Error('Invalid or missing \"ciphertext\".');\n  }\n  if (!(tag instanceof Uint8Array)) {\n    throw new Error('Invalid or missing \"tag\".');\n  }\n  if (!(cek instanceof Uint8Array)) {\n    throw new TypeError('\"cek\" must be a Uint8Array.');\n  }\n\n  // decrypt `ciphertext`\n  const cipher = new XChaCha20Poly1305(cek);\n  const encrypted = new Uint8Array(ciphertext.length + cipher.tagLength);\n  encrypted.set(ciphertext);\n  encrypted.set(tag, ciphertext.length);\n  return cipher.open(iv, encrypted, additionalData);\n}\n","/*!\n * Copyright (c) 2019-2020 Digital Bazaar, Inc. All rights reserved.\n */\nimport base64url from 'base64url';\n\nimport * as recAlgorithm from './algorithms/recommended';\nimport { stringToUint8Array } from './util';\n\nconst CIPHER_ALGORITHMS: any = {\n  [recAlgorithm.cipher.JWE_ENC]: recAlgorithm.cipher,\n};\n\nexport class DecryptTransformer {\n  public keyAgreementKey: any;\n  public KeyPairClass: any;\n\n  constructor({ keyAgreementKey, KeyPairClass }: any = {}) {\n    if (!keyAgreementKey) {\n      throw new TypeError('\"keyAgreementKey\" is a required parameter.');\n    }\n    this.KeyPairClass = KeyPairClass;\n    this.keyAgreementKey = keyAgreementKey;\n  }\n\n  async transform(chunk: any, controller: any) {\n    // assumes `chunk` is an object with a JWE under the `jwe` property\n    if (!(chunk && typeof chunk === 'object')) {\n      throw new TypeError('\"chunk\" must be an object.');\n    }\n    const { jwe } = chunk;\n\n    const data = await this.decrypt(jwe);\n    if (data === null) {\n      const error = new Error('Invalid decryption key.');\n      error.name = 'DataError';\n      throw error;\n    }\n\n    controller.enqueue(data);\n  }\n\n  async decrypt(jwe: any) {\n    // validate JWE\n    if (!(jwe && typeof jwe === 'object')) {\n      throw new TypeError('\"jwe\" must be an object.');\n    }\n    if (typeof jwe.protected !== 'string') {\n      throw new TypeError('\"jwe.protected\" is missing or not a string.');\n    }\n    if (typeof jwe.iv !== 'string') {\n      throw new Error('Invalid or missing \"iv\".');\n    }\n    if (typeof jwe.ciphertext !== 'string') {\n      throw new Error('Invalid or missing \"ciphertext\".');\n    }\n    if (typeof jwe.tag !== 'string') {\n      throw new Error('Invalid or missing \"tag\".');\n    }\n\n    // validate encryption header\n    let header;\n    let additionalData;\n    try {\n      // ASCII(BASE64URL(UTF8(JWE Protected Header)))\n      additionalData = stringToUint8Array(jwe.protected);\n      header = JSON.parse(base64url.toBuffer(jwe.protected).toString());\n    } catch (e) {\n      throw new Error('Invalid JWE \"protected\" header.');\n    }\n    if (!(header.enc && typeof header.enc === 'string')) {\n      throw new Error('Invalid JWE \"enc\" header.');\n    }\n    const cipher = CIPHER_ALGORITHMS[header.enc];\n    if (!cipher) {\n      throw new Error('Unsupported encryption algorithm \"${header.enc}\".');\n    }\n    if (!Array.isArray(jwe.recipients)) {\n      throw new TypeError('\"jwe.recipients\" must be an array.');\n    }\n\n    // find `keyAgreementKey` matching recipient\n    const { keyAgreementKey } = this;\n\n    const _findRecipient = (recipients: any, key: any) => {\n      return recipients.find(\n        (rec: any) =>\n          (rec.header && rec.header.kid === key.id) ||\n          rec.header.kid.split('#').pop() === key.id.split('#').pop()\n      );\n    };\n\n    const recipient = _findRecipient(jwe.recipients, keyAgreementKey);\n\n    if (!recipient) {\n      console.log(jwe.recipients, keyAgreementKey);\n      throw new Error('No matching recipient found for key agreement key.');\n    }\n    // get wrapped CEK\n    const { encrypted_key: wrappedKey } = recipient;\n    if (typeof wrappedKey !== 'string') {\n      throw new Error('Invalid or missing \"encrypted_key\".');\n    }\n\n    // TODO: consider a cache of encrypted_key => CEKs to reduce unwrapping\n    // calls which may even need to hit the network (e.g., Web KMS)\n\n    // derive KEK and unwrap CEK\n    const { epk } = recipient.header;\n\n    const { kek } = await this.KeyPairClass.kekFromEphemeralPeer({\n      keyAgreementKey,\n      epk,\n    });\n    const cek = await kek.unwrapKey({ wrappedKey });\n    if (!cek) {\n      // failed to unwrap key\n      return null;\n    }\n\n    // decrypt content\n    const { ciphertext, iv, tag } = jwe;\n    return cipher.decrypt({\n      ciphertext: base64url.toBuffer(ciphertext),\n      iv: base64url.toBuffer(iv),\n      tag: base64url.toBuffer(tag),\n      additionalData,\n      cek,\n    });\n  }\n}\n","/*!\n * Copyright (c) 2019-2020 Digital Bazaar, Inc. All rights reserved.\n */\nimport base64url from 'base64url';\n\n// 1 MiB = 1048576\nconst DEFAULT_CHUNK_SIZE = 1048576;\n\nexport class EncryptTransformer {\n  public recipients: any;\n  public encodedProtectedHeader: any;\n  public cipher: any;\n  public additionalData: any;\n  public cek: any;\n  public chunkSize: any;\n  public offset: any;\n  public totalOffset: any;\n  public index: any;\n  public buffer: any;\n\n  constructor({\n    recipients,\n    encodedProtectedHeader,\n    cipher,\n    additionalData,\n    cek,\n    chunkSize = DEFAULT_CHUNK_SIZE,\n  }: any = {}) {\n    this.recipients = recipients;\n    this.encodedProtectedHeader = encodedProtectedHeader;\n    this.cipher = cipher;\n    this.additionalData = additionalData;\n    this.cek = cek;\n    this.chunkSize = chunkSize;\n    this.offset = 0;\n    this.totalOffset = 0;\n    this.index = 0;\n  }\n\n  start() {\n    this.buffer = new Uint8Array(this.chunkSize);\n  }\n\n  async transform(chunk: any, controller: any) {\n    const { buffer } = this;\n\n    // assumes `chunk` is a Uint8Array...\n    if (!(chunk instanceof Uint8Array)) {\n      throw new TypeError('\"chunk\" must be an object.');\n    }\n    while (chunk) {\n      const space = buffer.length - this.offset;\n      if (chunk.length <= space) {\n        buffer.set(chunk, this.offset);\n        this.offset += chunk.byteLength;\n        this.totalOffset += chunk.byteLength;\n        chunk = null;\n      } else {\n        const partial = new Uint8Array(chunk.buffer, chunk.byteOffset, space);\n        chunk = new Uint8Array(\n          chunk.buffer,\n          chunk.byteOffset + space,\n          chunk.length - space\n        );\n        buffer.set(partial, this.offset);\n        this.offset += space;\n        this.totalOffset += space;\n      }\n\n      // flush if buffer is full and more data remains\n      if (chunk) {\n        await this.flush(controller);\n      }\n    }\n  }\n\n  async flush(controller: any) {\n    if (this.offset === 0) {\n      // nothing to flush\n      return;\n    }\n\n    // encrypt data\n    const { buffer } = this;\n    const data = new Uint8Array(buffer.buffer, buffer.byteOffset, this.offset);\n    const jwe = await this.encrypt(data);\n\n    // clear buffer\n    this.offset = 0;\n\n    controller.enqueue({\n      index: this.index++,\n      offset: this.totalOffset,\n      jwe,\n    });\n  }\n\n  async encrypt(data: any) {\n    const { cipher, additionalData, cek } = this;\n    const { ciphertext, iv, tag } = await cipher.encrypt({\n      data,\n      additionalData,\n      cek,\n    });\n\n    // represent encrypted data as JWE\n    const jwe = {\n      protected: this.encodedProtectedHeader,\n      recipients: this.recipients,\n      iv: base64url.encode(iv),\n      ciphertext: base64url.encode(ciphertext),\n      tag: base64url.encode(tag),\n    };\n    return jwe;\n  }\n}\n","import { types } from '@transmute/did-key-common';\n\nexport const getEpkGenerator = (KeyPair: types.KeyPairClass, opts: any) => {\n  const generateEphemeralKeyPair = async (): Promise<types.EpkResult> => {\n    const k0 = await KeyPair.generate(opts);\n    const keypair = await k0.toJsonWebKeyPair(true);\n\n    return {\n      keypair,\n      epk: keypair.publicKeyJwk,\n    };\n  };\n  return generateEphemeralKeyPair;\n};\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","import { createAction } from 'redux-actions';\n\nexport const setUniversalWalletProp = createAction(\n  'universal-wallet/SET_UNIVERSAL_WALLET_PROP',\n  (payload) => payload\n);\n","import { handleActions } from \"redux-actions\";\nimport { setUniversalWalletProp } from \"./actions\";\n\nconst initialState = {\n  name: \"UniversalWallet2020\",\n  status: \"UNLOCKED\",\n  contents: [],\n  vaultEndpoint: \"https://edv.did.ai/edvs\",\n  isSyncEnabled: true,\n  isSyncing: false,\n};\n\nexport default handleActions(\n  {\n    [setUniversalWalletProp]: (state, { payload }) => ({\n      ...state,\n      ...payload,\n    }),\n  },\n  initialState\n);\n","import { connect } from 'react-redux';\nimport * as actions from './actions';\n\nexport default connect(({ wallet }) => ({ wallet }), { ...actions });\n","import reducer from './reducer';\nimport container from './container';\n\nexport default {\n  reducer,\n  container,\n};\n","import { compose } from 'recompose';\nimport withRedux from './redux';\nimport withHandlers from './handlers';\n\nexport default compose(withRedux, withHandlers);\n","import { connectRouter } from \"connected-react-router\";\n\nimport history from \"./history\";\n\nimport wallet from \"./universal-wallet\";\n\nexport default {\n  router: connectRouter(history),\n  wallet: wallet.reducer,\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\n\nimport { darken, lighten } from \"@material-ui/core/styles/colorManipulator\";\n\nconst primaryColor = \"#594aa8\";\nconst secondaryColor = \"#fcb373\";\n\nconst font1 = '\"Rajdhani\"';\nconst font2 = '\"Roboto Condensed\"';\nconst font3 = '\"Lato\"';\n\nconst fontWeightLight = 300;\nconst fontWeightRegular = 400;\nconst fontWeightMedium = 600;\n\nclass Theme extends Component {\n  render() {\n    const { children } = this.props;\n    const theme = createMuiTheme({\n      splashImage: \"\",\n      palette: {\n        type: \"light\",\n        primary: {\n          light: lighten(primaryColor, 0.07),\n          main: primaryColor,\n          dark: darken(primaryColor, 0.07),\n        },\n        secondary: {\n          light: lighten(secondaryColor, 0.07),\n          main: secondaryColor,\n          dark: darken(secondaryColor, 0.07),\n        },\n      },\n      typography: {\n        useNextVariants: true,\n        fontSize: 16,\n        fontFamily: [font1, font2, font3].join(\",\"),\n        h1: {\n          fontFamily: font1,\n          fontWeight: fontWeightMedium,\n        },\n        h2: {\n          fontFamily: font1,\n          fontWeight: fontWeightMedium,\n        },\n        h3: {\n          fontFamily: font1,\n          fontWeight: fontWeightMedium,\n        },\n        h4: {\n          fontFamily: font2,\n          textTransform: \"uppercase\",\n          letterSpacing: \"0.1em\",\n          fontWeight: fontWeightRegular,\n        },\n        h5: {\n          fontFamily: font2,\n          textTransform: \"uppercase\",\n          letterSpacing: \"0.1em\",\n          fontWeight: fontWeightRegular,\n        },\n        h6: {\n          fontFamily: font2,\n          textTransform: \"uppercase\",\n          letterSpacing: \"0.05em\",\n          fontWeight: fontWeightRegular,\n        },\n        subtitle1: {\n          fontFamily: font1,\n          fontWeight: fontWeightRegular,\n        },\n        subtitle2: {\n          fontFamily: font2,\n          fontWeight: fontWeightRegular,\n        },\n        body1: {\n          fontFamily: font3,\n          fontWeight: fontWeightRegular,\n        },\n        body2: {\n          fontFamily: font3,\n          fontWeight: fontWeightRegular,\n        },\n        button: {\n          fontFamily: font2,\n          fontWeight: fontWeightRegular,\n        },\n        caption: {\n          fontFamily: font2,\n          fontWeight: fontWeightRegular,\n        },\n        overline: {\n          fontFamily: font2,\n          letterSpacing: \"0.15em\",\n          textTransform: \"uppercase\",\n          fontWeight: fontWeightLight,\n        },\n      },\n\n      overrides: {\n        MuiInput: {\n          // Name of the component ⚛️ / style sheet\n          input: {\n            fontFamily: font3,\n          },\n        },\n        MuiInputLabel: {\n          // Name of the component ⚛️ / style sheet\n          root: {\n            fontFamily: font2,\n          },\n        },\n        MuiAppBar: {\n          root: {\n            // boxShadow: 'none',\n          },\n        },\n        MuiButton: {\n          // Name of the rule\n          contained: {\n            boxShadow: \"none\",\n          },\n        },\n      },\n    });\n    return <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>;\n  }\n}\n\nTheme.propTypes = {\n  children: PropTypes.any.isRequired,\n};\n\nexport default Theme;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport HomeIcon from \"@material-ui/icons/Home\";\n\nimport history from \"../../store/history\";\n\nconst StyledMenu = withStyles({\n  paper: {\n    border: \"1px solid #d3d4d5\",\n  },\n})((props) => (\n  <Menu\n    elevation={0}\n    getContentAnchorEl={null}\n    anchorOrigin={{\n      vertical: \"bottom\",\n      horizontal: \"center\",\n    }}\n    transformOrigin={{\n      vertical: \"top\",\n      horizontal: \"center\",\n    }}\n    {...props}\n  />\n));\n\nconst StyledMenuItem = withStyles((theme) => ({\n  root: {\n    \"&:focus\": {\n      backgroundColor: theme.palette.primary.main,\n      \"& .MuiListItemIcon-root, & .MuiListItemText-primary\": {\n        color: theme.palette.common.white,\n      },\n    },\n  },\n}))(MenuItem);\n\nexport default function CustomizedMenus() {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div>\n      <IconButton\n        color={\"inherit\"}\n        aria-controls=\"customized-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n      >\n        <MoreVertIcon />\n      </IconButton>\n      <StyledMenu\n        id=\"customized-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <StyledMenuItem\n          onClick={() => {\n            history.push(\"/\");\n          }}\n        >\n          <ListItemIcon>\n            <HomeIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText primary=\"Home\" />\n        </StyledMenuItem>\n      </StyledMenu>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport HttpIcon from \"@material-ui/icons/Http\";\nimport CodeIcon from \"@material-ui/icons/Code\";\nimport GavelIcon from \"@material-ui/icons/Gavel\";\nimport BuildIcon from \"@material-ui/icons/Build\";\nimport PictureAsPdfIcon from \"@material-ui/icons/PictureAsPdf\";\nimport YouTubeIcon from \"@material-ui/icons/YouTube\";\nimport history from \"../../store/history\";\n\nexport default function DrawerContent() {\n  return (\n    <List>\n      <ListItem\n        button\n        onClick={() => {\n          history.push(\"/\");\n        }}\n      >\n        <ListItemIcon>\n          <HomeIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Home\"} />\n      </ListItem>\n\n      {/* Need to update vc.js to support better key structure.*/}\n\n      {/* <ListItem\n        button\n        onClick={() => {\n          history.push(\"/workbench\");\n        }}\n      >\n        <ListItemIcon>\n          <BuildIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Workbench\"} />\n      </ListItem>\n\n      <ListItem\n        button\n        onClick={() => {\n          history.push(\"/offline\");\n        }}\n      >\n        <ListItemIcon>\n          <PictureAsPdfIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"PDF Demo\"} />\n      </ListItem>\n\n      <ListItem\n        button\n        onClick={() => {\n          history.push(\"/videos\");\n        }}\n      >\n        <ListItemIcon>\n          <YouTubeIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Videos\"} />\n      </ListItem> */}\n\n      <ListItem\n        button\n        onClick={() => {\n          window.open(\"https://w3c-ccg.github.io/did-method-key/\");\n        }}\n      >\n        <ListItemIcon>\n          <GavelIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Spec\"} />\n      </ListItem>\n\n      <ListItem\n        button\n        onClick={() => {\n          window.open(\"https://github.com/transmute-industries/did-key.js\");\n        }}\n      >\n        <ListItemIcon>\n          <CodeIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Code\"} />\n      </ListItem>\n    </List>\n  );\n}\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\n\nimport Theme from \"../../components/Theme/Theme\";\nimport logo from \"../../assets/logo.svg\";\n\nimport Menu from \"./menu\";\nimport DrawerContent from \"./drawer\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    width: \"100%\",\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: \"none\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: \"nowrap\",\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: \"hidden\",\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default function MiniDrawer({ children }) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Theme>\n      <div className={classes.root}>\n        <CssBaseline />\n        <AppBar\n          position=\"fixed\"\n          className={clsx(classes.appBar, {\n            [classes.appBarShift]: open,\n          })}\n        >\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              edge=\"start\"\n              className={clsx(classes.menuButton, {\n                [classes.hide]: open,\n              })}\n            >\n              <MenuIcon />\n            </IconButton>\n            <img\n              src={logo}\n              alt={\"logo\"}\n              className={classes.title}\n              style={{ height: \"28px\" }}\n            />\n            <div style={{ flexGrow: 1 }}></div>\n            <Menu />\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          variant=\"permanent\"\n          className={clsx(classes.drawer, {\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          })}\n          classes={{\n            paper: clsx({\n              [classes.drawerOpen]: open,\n              [classes.drawerClose]: !open,\n            }),\n          }}\n        >\n          <div className={classes.toolbar}>\n            <IconButton onClick={handleDrawerClose}>\n              {theme.direction === \"rtl\" ? (\n                <ChevronRightIcon />\n              ) : (\n                <ChevronLeftIcon />\n              )}\n            </IconButton>\n          </div>\n          <Divider />\n          <DrawerContent />\n        </Drawer>\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n          {children}\n        </main>\n      </div>\n    </Theme>\n  );\n}\n","import React from \"react\";\n\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\n\nexport function ContentTypeToggle({ onClick }) {\n  const [alignment, setAlignment] = React.useState(\"left\");\n\n  const handleAlignment = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  return (\n    <ToggleButtonGroup\n      value={alignment}\n      exclusive\n      onChange={handleAlignment}\n      aria-label=\"did document representation\"\n    >\n      <ToggleButton\n        value=\"left\"\n        aria-label=\"json\"\n        onClick={() => {\n          onClick(\"did+json\");\n        }}\n      >\n        did+json\n      </ToggleButton>\n      <ToggleButton\n        value=\"right\"\n        aria-label=\"jsonld\"\n        onClick={() => {\n          onClick(\"did+ld+json\");\n        }}\n      >\n        did+ld+json\n      </ToggleButton>\n      <ToggleButton value=\"justify\" aria-label=\"cbor\" disabled>\n        did+cbor\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n","import crypto from \"crypto\";\nimport * as ed25519 from \"@transmute/did-key-ed25519\";\nimport * as x25519 from \"@transmute/did-key-x25519\";\nimport * as secp256k1 from \"@transmute/did-key-secp256k1\";\nimport * as bls12381 from \"@transmute/did-key-bls12381\";\nimport * as didKeyWebCrypto from \"@transmute/did-key-web-crypto\";\n\nexport const generateEd25519 = async (keys, contentType) => {\n  let _keys = keys;\n  let ed25519Key;\n  let x25519Key;\n  if (keys !== null) {\n    ed25519Key = await ed25519.Ed25519KeyPair.from(_keys.ed25519);\n    x25519Key = await x25519.X25519KeyPair.from(_keys.x25519);\n  } else {\n    ed25519Key = await ed25519.Ed25519KeyPair.generate({\n      secureRandom: () => {\n        return crypto.randomBytes(32);\n      },\n    });\n    x25519Key = await x25519.X25519KeyPair.fromEdKeyPair(\n      await ed25519Key.toKeyPair(true)\n    );\n  }\n  _keys = {\n    ed25519:\n      contentType === \"application/did+ld+json\"\n        ? await ed25519Key.toKeyPair(true)\n        : await ed25519Key.toJsonWebKeyPair(true),\n    x25519:\n      contentType === \"application/did+ld+json\"\n        ? await x25519Key.toKeyPair(true)\n        : await x25519Key.toJsonWebKeyPair(true),\n  };\n  const { didDocument } = await ed25519.driver.resolve(\n    _keys.ed25519.controller,\n    {\n      accept: contentType,\n    }\n  );\n  return {\n    keys: _keys,\n    didDocument,\n  };\n};\n\nexport const generateX25519 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    keyPair = await x25519.X25519KeyPair.from(keys.key);\n  } else {\n    keyPair = await x25519.X25519KeyPair.generate({\n      secureRandom: () => {\n        return crypto.randomBytes(32);\n      },\n    });\n  }\n  _keys = {\n    key:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.toKeyPair(true)\n        : await keyPair.toJsonWebKeyPair(true),\n  };\n  const { didDocument } = await x25519.driver.resolve(_keys.key.controller, {\n    accept: contentType,\n  });\n  return {\n    keys: _keys,\n    didDocument,\n  };\n};\n\nexport const generateSecp256k1 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    keyPair = await secp256k1.Secp256k1KeyPair.from(keys.key);\n  } else {\n    keyPair = await secp256k1.Secp256k1KeyPair.generate({\n      secureRandom: () => {\n        return crypto.randomBytes(32);\n      },\n    });\n  }\n  _keys = {\n    key:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.toKeyPair(true)\n        : await keyPair.toJsonWebKeyPair(true),\n  };\n  const { didDocument } = await secp256k1.driver.resolve(_keys.key.controller, {\n    accept: contentType,\n  });\n  return {\n    keys: _keys,\n    didDocument,\n  };\n};\n\nexport const generateBls12381 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    keyPair = await bls12381.Bls12381G2KeyPair.from(keys.key);\n  } else {\n    keyPair = await bls12381.Bls12381G2KeyPair.generate();\n  }\n  _keys = {\n    key:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.toKeyPair(true)\n        : await keyPair.toJsonWebKeyPair(true),\n  };\n  const { didDocument } = await bls12381.driver.resolve(_keys.key.controller, {\n    accept: contentType,\n  });\n  return {\n    keys: _keys,\n    didDocument,\n  };\n};\n\nexport const generateP256 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    keyPair = await didKeyWebCrypto.KeyPair.from(keys.key);\n  } else {\n    keyPair = await didKeyWebCrypto.KeyPair.generate({\n      kty: \"EC\",\n      crvOrSize: \"P-256\",\n    });\n  }\n  _keys = {\n    key:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.toKeyPair(true)\n        : await keyPair.toJsonWebKeyPair(true),\n  };\n  const { didDocument } = await didKeyWebCrypto.driver.resolve(\n    _keys.key.controller,\n    {\n      accept: contentType,\n    }\n  );\n  return {\n    keys: _keys,\n    didDocument,\n  };\n};\n\nexport const generateP384 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    keyPair = await didKeyWebCrypto.KeyPair.from(keys.key);\n  } else {\n    keyPair = await didKeyWebCrypto.KeyPair.generate({\n      kty: \"EC\",\n      crvOrSize: \"P-384\",\n    });\n  }\n  _keys = {\n    key:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.toKeyPair(true)\n        : await keyPair.toJsonWebKeyPair(true),\n  };\n  const { didDocument } = await didKeyWebCrypto.driver.resolve(\n    _keys.key.controller,\n    {\n      accept: contentType,\n    }\n  );\n  return {\n    keys: _keys,\n    didDocument,\n  };\n};\n\nexport const generateP521 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    keyPair = await didKeyWebCrypto.KeyPair.from(keys.key);\n  } else {\n    keyPair = await didKeyWebCrypto.KeyPair.generate({\n      kty: \"EC\",\n      crvOrSize: \"P-521\",\n    });\n  }\n  _keys = {\n    key:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.toKeyPair(true)\n        : await keyPair.toJsonWebKeyPair(true),\n  };\n  const { didDocument } = await didKeyWebCrypto.driver.resolve(\n    _keys.key.controller,\n    {\n      accept: contentType,\n    }\n  );\n  return {\n    keys: _keys,\n    didDocument,\n  };\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport { ContentTypeToggle } from \"../../components/ContentTypeToggle\";\nimport { DIDDocumentPreview, JSONEditor } from \"@transmute/material-did-core\";\n\nimport {\n  generateEd25519,\n  generateX25519,\n  generateSecp256k1,\n  generateBls12381,\n  generateP256,\n  generateP384,\n  generateP521,\n} from \"./util\";\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`vertical-tabpanel-${index}`}\n      aria-labelledby={`vertical-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `vertical-tab-${index}`,\n    \"aria-controls\": `vertical-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n    display: \"flex\",\n  },\n  tabs: {\n    borderRight: `1px solid ${theme.palette.divider}`,\n  },\n}));\n\nconst Panel = ({ keys, didDocument, onToggleRepresentation, onGenerate }) => {\n  return (\n    <Grid container spacing={4}>\n      <Grid item sm={12} xs={12}>\n        <Box display=\"flex\">\n          <Box flexGrow={1}>\n            <ContentTypeToggle\n              onClick={(data) => {\n                onToggleRepresentation(data);\n              }}\n            />\n          </Box>\n          <Box>\n            <Button\n              variant={\"contained\"}\n              color={\"secondary\"}\n              onClick={() => {\n                onGenerate();\n              }}\n            >\n              Generate\n            </Button>\n          </Box>\n        </Box>\n      </Grid>\n      {didDocument !== null && (\n        <Grid item sm={12} xs={12}>\n          <Typography variant={\"h6\"} gutterBottom>\n            DID Document\n          </Typography>\n          <DIDDocumentPreview didDocument={didDocument} />\n        </Grid>\n      )}\n      <Grid item sm={12} xs={12}>\n        <Typography variant={\"h6\"} gutterBottom>\n          Key\n        </Typography>\n        <JSONEditor value={JSON.stringify(keys, null, 2)} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default function VerticalTabs() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    contentType: \"application/did+json\",\n    keys: null,\n    didDocument: null,\n  });\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const options = [\n    {\n      index: 0,\n      name: \"ed25519\",\n      refresh: generateEd25519,\n    },\n    {\n      index: 1,\n      name: \"x25519\",\n      refresh: generateX25519,\n    },\n    {\n      index: 2,\n      name: \"secp256k1\",\n      refresh: generateSecp256k1,\n    },\n    {\n      index: 3,\n      name: \"bls12381 g2\",\n      refresh: generateBls12381,\n    },\n    {\n      index: 4,\n      name: \"P-256\",\n      refresh: generateP256,\n    },\n    {\n      index: 5,\n      name: \"P-384\",\n      refresh: generateP384,\n    },\n    {\n      index: 6,\n      name: \"P-521\",\n      refresh: generateP521,\n    },\n  ];\n\n  const handleGenerate = async (index) => {\n    const refresh = options[index].refresh;\n    const { keys, didDocument } = await refresh(null, state.contentType);\n    setState({\n      ...state,\n      keys,\n      didDocument,\n    });\n  };\n\n  React.useEffect(() => {\n    (async () => {\n      handleGenerate(0);\n    })();\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <Tabs\n        orientation=\"vertical\"\n        variant=\"scrollable\"\n        value={value}\n        onChange={handleChange}\n        aria-label=\"DID Types\"\n        className={classes.tabs}\n      >\n        {options.map((opt) => {\n          return (\n            <Tab\n              key={opt.index}\n              label={opt.name}\n              {...a11yProps(opt.index)}\n              onClick={() => {\n                handleGenerate(opt.index);\n              }}\n            />\n          );\n        })}\n      </Tabs>\n      {options.map((opt) => {\n        return (\n          <TabPanel\n            key={opt.index}\n            value={value}\n            index={opt.index}\n            style={{ width: \"100%\" }}\n          >\n            <Panel\n              didDocument={state.didDocument}\n              keys={state.keys}\n              onToggleRepresentation={async (contentType) => {\n                const refresh = options[opt.index].refresh;\n                const { keys, didDocument } = await refresh(\n                  state.keys,\n                  `application/${contentType}`\n                );\n                setState({\n                  contentType: `application/${contentType}`,\n                  keys,\n                  didDocument,\n                });\n              }}\n              onGenerate={async () => {\n                handleGenerate(opt.index);\n              }}\n            />\n          </TabPanel>\n        );\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Base from \"../base/base\";\n\nimport VerticalTabs from \"./VerticalTabs\";\n\nexport const Home = () => {\n  return (\n    <Base>\n      <VerticalTabs />\n    </Base>\n  );\n};\n\nHome.propTypes = {};\n","import React from \"react\";\nimport { Home as Page } from \"./Home\";\n\nimport { compose } from \"redux\";\n\nimport wallet from \"../../store/universal-wallet\";\n\nconst container = compose(wallet.container);\n\nexport const Home = container((props) => {\n  return <Page {...props} />;\n});\n","import React from \"react\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Base from \"../base/base\";\nimport { DIDDocumentPreview } from \"@transmute/material-did-core\";\nimport { ContentTypeToggle } from \"../../components/ContentTypeToggle\";\nconst { resolver } = require(\"@transmute/did-key.js\");\n\nexport const Resolver = ({ match }) => {\n  const [didDocument, setDidDocument] = React.useState(null);\n\n  const resolve = async (contentType = \"application/did+json\") => {\n    const result = await resolver.resolve(match.params.did, {\n      accept: contentType,\n    });\n    setDidDocument(result.didDocument);\n  };\n\n  React.useEffect(() => {\n    (async () => {\n      resolve();\n    })();\n  }, []);\n\n  return (\n    <Base>\n      <Grid container spacing={4}>\n        <Grid item xs={12}>\n          <ContentTypeToggle\n            onClick={(contentType) => {\n              resolve(\"application/\" + contentType);\n            }}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          {didDocument !== null && (\n            <DIDDocumentPreview didDocument={didDocument} />\n          )}\n        </Grid>\n      </Grid>\n    </Base>\n  );\n};\n\nResolver.propTypes = {\n  //\n};\n","import { Home } from \"./home\";\nimport { Resolver } from \"./resolver\";\n// import { Workbench } from \"./workbench\";\n// import { PdfDemo } from \"./pdf\";\n// import { Videos } from \"./videos\";\n\nexport const routes = [\n  { path: \"/\", exact: true, component: Home },\n  { path: \"/:did\", exact: true, component: Resolver },\n  // { path: \"/workbench\", exact: true, component: Workbench },\n  // { path: \"/offline\", exact: true, component: PdfDemo },\n  // { path: \"/videos\", exact: true, component: Videos },\n];\n","import React from \"react\";\nimport { Resolver as Page } from \"./Resolver\";\n\nimport { compose } from \"redux\";\n\nimport wallet from \"../../store/universal-wallet\";\n\nconst container = compose(wallet.container);\n\nexport const Resolver = container((props) => {\n  return <Page {...props} />;\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Particles from 'react-particles-js';\n\nexport class ParticlesContainer extends Component {\n  render() {\n    const params = this.props.params || {\n      particles: {\n        line_linked: {\n          shadow: {\n            enable: true,\n            color: '#3CA9D1',\n            blur: 5,\n          },\n        },\n      },\n    };\n    return (\n      <React.Fragment>\n        <div\n          style={{\n            zIndex: 2,\n            position: 'absolute',\n          }}\n        >\n          {this.props.children}\n        </div>\n\n        <Particles\n          className=\"Particles\"\n          style={{\n            zIndex: 1,\n            top: 0,\n            position: 'absolute',\n          }}\n          params={params}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nParticlesContainer.propTypes = {\n  params: PropTypes.object,\n  children: PropTypes.any,\n};\n","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Theme from \"../../components/Theme/Theme\";\n\nimport { ParticlesContainer } from \"../../components/ParticlesContainer\";\n\nimport \"./404.css\";\n\nexport class NotFound extends Component {\n  render() {\n    return (\n      <Theme>\n        <div className=\"notFound\">\n          <ParticlesContainer>\n            <div className=\"copy\" style={{ padding: \"32px\" }}>\n              <Typography variant=\"h1\">404</Typography>\n              <Typography>\n                {window.location.pathname} page not found.\n              </Typography>\n              <br />\n              <Button\n                variant=\"contained\"\n                color={\"secondary\"}\n                onClick={() => {\n                  window.location.href = \"/\";\n                }}\n              >\n                Go Home\n              </Button>\n            </div>\n          </ParticlesContainer>\n        </div>\n      </Theme>\n    );\n  }\n}\n\nexport default NotFound;\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport storage from \"redux-persist/lib/storage\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport withReduxEnhancer from \"addon-redux/enhancer\";\n\nimport rootReducer from \".\";\nimport history from \"./history\";\n\nexport default (appReducers = {}) => {\n  // Persistance configuration\n  const persistConfig = {\n    key: \"root\",\n    whitelist: [\"wallet\"],\n    storage,\n  };\n\n  const middlewares = [thunk, routerMiddleware(history)];\n\n  // TODO: refactor for production\n  if (process.env.NODE_ENV !== \"production\") {\n    // const reduxListener = createStorybookListener();\n    // middlewares.push(reduxListener);\n  }\n\n  // Store.\n  const store = createStore(\n    persistReducer(\n      persistConfig,\n      combineReducers({ ...rootReducer, ...appReducers })\n    ),\n    composeWithDevTools(\n      compose(applyMiddleware(...middlewares), withReduxEnhancer)\n    )\n  );\n\n  // Persistor.\n  const persistor = persistStore(store);\n  return {\n    store,\n    persistor,\n    history,\n  };\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport { Switch, Route } from \"react-router-dom\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/lib/integration/react\";\nimport ReactGA from \"react-ga\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport createStore from \"./store/create\";\nimport { routes } from \"./pages\";\nimport { NotFound } from \"./pages/errors/404\";\n\nconst { store, persistor, history } = createStore();\n\nReactGA.initialize(\"UA-117945399-11\");\n\nhistory.listen((location) => {\n  ReactGA.set({ page: location.pathname });\n  ReactGA.pageview(location.pathname);\n});\n\nconst App = () => {\n  React.useEffect(() => {\n    ReactGA.pageview(window.location.pathname);\n  }, []);\n  return (\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <ConnectedRouter history={history}>\n          <Switch>\n            {routes.map(({ exact, path, component }) => (\n              <Route\n                key={path}\n                exact={exact}\n                path={path}\n                component={component}\n              />\n            ))}\n            <Route path=\"*\" render={() => <NotFound />} />\n          </Switch>\n        </ConnectedRouter>\n      </PersistGate>\n    </Provider>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nconsole.log(\n  `\nHello Developer 🧙‍♂️! \nCheckout our corporate website if you are interested in working with us: \n✨ https://www.transmute.industries/\n`\n);\n","import keyto from '@trust/keyto';\nimport base64url from 'base64url';\nimport crypto from 'crypto';\nimport bs58 from 'bs58';\nimport secp256k1 from 'secp256k1';\n\nimport canonicalize from 'canonicalize';\n\nconst compressedHexEncodedPublicKeyLength = 66;\n\n/** Secp256k1 Private Key  */\nexport interface ISecp256k1PrivateKeyJwk {\n  /** key type */\n  kty: string;\n\n  /** curve */\n  crv: string;\n\n  /** private point */\n  d: string;\n\n  /** public point */\n  x: string;\n\n  /** public point */\n  y: string;\n\n  /** key id */\n  kid: string;\n}\n\n/** Secp256k1 Public Key  */\nexport interface ISecp256k1PublicKeyJwk {\n  /** key type */\n  kty: string;\n\n  /** curve */\n  crv: string;\n\n  /** public point */\n  x: string;\n\n  /** public point */\n  y: string;\n\n  /** key id */\n  kid: string;\n}\n\n/**\n * Example\n * ```js\n * {\n *  kty: 'EC',\n *  crv: 'secp256k1',\n *  d: 'rhYFsBPF9q3-uZThy7B3c4LDF_8wnozFUAEm5LLC4Zw',\n *  x: 'dWCvM4fTdeM0KmloF57zxtBPXTOythHPMm1HCLrdd3A',\n *  y: '36uMVGM7hnw-N6GnjFcihWE3SkrhMLzzLCdPMXPEXlA',\n *  kid: 'JUvpllMEYUZ2joO59UNui_XYDqxVqiFLLAJ8klWuPBw'\n * }\n * ```\n * See [rfc7638](https://tools.ietf.org/html/rfc7638) for more details on Jwk.\n */\nexport const getKid = (\n  jwk: ISecp256k1PrivateKeyJwk | ISecp256k1PublicKeyJwk\n) => {\n  const copy = { ...jwk } as any;\n  delete copy.d;\n  delete copy.kid;\n  delete copy.alg;\n  const digest = crypto\n    .createHash('sha256')\n    .update(canonicalize(copy))\n    .digest();\n\n  return base64url.encode(Buffer.from(digest));\n};\n\n/** convert compressed hex encoded private key to jwk */\nexport const privateKeyJwkFromPrivateKeyHex = (privateKeyHex: string) => {\n  const jwk = {\n    ...keyto.from(privateKeyHex, 'blk').toJwk('private'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert compressed hex encoded public key to jwk */\nexport const publicKeyJwkFromPublicKeyHex = (publicKeyHex: string) => {\n  let key = publicKeyHex;\n  if (publicKeyHex.length === compressedHexEncodedPublicKeyLength) {\n    const keyBin = secp256k1.publicKeyConvert(\n      Buffer.from(publicKeyHex, 'hex'),\n      false\n    );\n    key = Buffer.from(keyBin).toString('hex');\n  }\n  const jwk = {\n    ...keyto.from(key, 'blk').toJwk('public'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert pem encoded private key to jwk */\nexport const privateKeyJwkFromPrivateKeyPem = (privateKeyPem: string) => {\n  const jwk = {\n    ...keyto.from(privateKeyPem, 'pem').toJwk('private'),\n    crv: 'secp256k1',\n  };\n  // console.log(jwk);\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert pem encoded public key to jwk */\nexport const publicKeyJwkFromPublicKeyPem = (publicKeyPem: string) => {\n  const jwk = {\n    ...keyto.from(publicKeyPem, 'pem').toJwk('public'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert jwk to hex encoded private key */\nexport const privateKeyHexFromJwk = (jwk: ISecp256k1PrivateKeyJwk) =>\n  keyto\n    .from(\n      {\n        ...jwk,\n        crv: 'K-256',\n      },\n      'jwk'\n    )\n    .toString('blk', 'private');\n\n/** convert jwk to hex encoded public key */\nexport const publicKeyHexFromJwk = (jwk: ISecp256k1PublicKeyJwk) => {\n  const uncompressedPublicKey = keyto\n    .from(\n      {\n        ...jwk,\n        crv: 'K-256',\n      },\n      'jwk'\n    )\n    .toString('blk', 'public');\n\n  const compressed = secp256k1.publicKeyConvert(\n    Buffer.from(uncompressedPublicKey, 'hex'),\n    true\n  );\n  return Buffer.from(compressed).toString('hex');\n};\n\n/** convert jwk to binary encoded private key */\nexport const privateKeyUInt8ArrayFromJwk = (jwk: ISecp256k1PrivateKeyJwk) => {\n  const privateKeyHex = privateKeyHexFromJwk(jwk);\n  return Buffer.from(privateKeyHex, 'hex');\n};\n\n/** convert jwk to binary encoded public key */\nexport const publicKeyUInt8ArrayFromJwk = (jwk: ISecp256k1PublicKeyJwk) => {\n  const publicKeyHex = publicKeyHexFromJwk(jwk);\n  return Buffer.from(publicKeyHex, 'hex');\n};\n\n/** convert publicKeyHex to base58 */\nexport const publicKeyBase58FromPublicKeyHex = (publicKeyHex: string) => {\n  return bs58.encode(Buffer.from(publicKeyHex, 'hex'));\n};\n\n/** convert publicKeyHex to base58 */\nexport const privateKeyBase58FromPrivateKeyHex = (privateKeyHex: string) => {\n  return bs58.encode(Buffer.from(privateKeyHex, 'hex'));\n};\n\nexport const privateKeyUInt8ArrayFromPrivateKeyBase58 = (\n  privateKeyBase58: string\n) => {\n  return bs58.decode(privateKeyBase58);\n};\n\nexport const publicKeyUInt8ArrayFromPublicKeyBase58 = (\n  publicKeyBase58: string\n) => {\n  return bs58.decode(publicKeyBase58);\n};\n\nexport const publicKeyHexFromPrivateKeyHex = (privateKeyHex: string) => {\n  const publicKey = secp256k1.publicKeyCreate(\n    new Uint8Array(Buffer.from(privateKeyHex, 'hex'))\n  );\n  return Buffer.from(publicKey).toString('hex');\n};\n","import bs58 from 'bs58';\n\nimport {\n  convertPublicKeyToX25519,\n  convertSecretKeyToX25519,\n} from '@stablelib/ed25519';\nimport * as x25519 from '@stablelib/x25519';\nimport * as keyUtils from './keyUtils';\n\nimport base64url from 'base64url';\nimport crypto from 'crypto';\n\nimport * as common from '@transmute/did-key-common';\n\nimport {\n  deriveKey,\n  getEpkGenerator,\n  KeyEncryptionKey,\n} from '@transmute/did-key-cipher';\n\nconst KEY_TYPE = 'X25519KeyAgreementKey2019';\n\n@common.types.staticImplements<common.types.KeyAgreementKeyPairClass>()\nexport class X25519KeyPair implements common.types.KeyPairInstance {\n  public id: string;\n  public type: string;\n  public controller: string;\n\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  public static JWE_ALG: common.types.ECDH_ES_A256KW = 'ECDH-ES+A256KW';\n\n  static fingerprintFromPublicKey(\n    keypair: common.types.KeyPairJwk | common.types.KeyPairBase58\n  ) {\n    let pubkeyBytes: any;\n\n    if ((keypair as any).publicKeyBase58) {\n      pubkeyBytes = bs58.decode(\n        (keypair as common.types.KeyPairBase58).publicKeyBase58\n      );\n    }\n\n    if ((keypair as any).publicKeyJwk) {\n      pubkeyBytes = bs58.decode(\n        keyUtils.publicKeyBase58FromPublicKeyJwk(\n          (keypair as common.types.KeyPairJwk).publicKeyJwk\n        )\n      );\n    }\n\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L80\n\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    buffer[0] = 0xec;\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${bs58.encode(buffer)}`;\n  }\n\n  static async generate(options: common.types.KeyPairGenerateOptions) {\n    let key;\n\n    key = x25519.generateKeyPair({\n      isAvailable: true,\n      randomBytes: options.secureRandom,\n    });\n\n    if (!key) {\n      throw new Error('options.seed or options.secureRandom is required.');\n    }\n\n    const publicKeyBase58 = bs58.encode(key.publicKey);\n    const privateKeyBase58 = bs58.encode(key.secretKey);\n\n    const did = `did:key:${X25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    const keyId = `#${X25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    return new X25519KeyPair({\n      id: keyId,\n      controller: did,\n      publicKeyBase58,\n      privateKeyBase58,\n    } as common.types.KeyPairBase58);\n  }\n\n  static async generateEphemeralKeyPair(): Promise<common.types.EpkResult> {\n    return getEpkGenerator(X25519KeyPair, {\n      secureRandom: () => {\n        return crypto.randomBytes(32);\n      },\n    })();\n  }\n\n  static async kekFromEphemeralPeer({\n    keyAgreementKey,\n    epk,\n  }: common.types.KeyEncryptionKeyFromEphemeralPublicKeyOptions) {\n    if (!(epk && typeof epk === 'object')) {\n      throw new TypeError('\"epk\" must be an object.');\n    }\n\n    // decode public key material\n    const publicKey = base64url.toBuffer(epk.x);\n\n    // convert to LD key for Web KMS\n    const ephemeralPublicKey = {\n      type: KEY_TYPE,\n      publicKeyBase58: bs58.encode(publicKey),\n    };\n\n    // safe to use IDs like in rfc7518 or does\n    // https://tools.ietf.org/html/rfc7748#section-7 pose any issues?\n\n    // \"Party U Info\"\n    const producerInfo = publicKey;\n    // \"Party V Info\"\n    const consumerInfo = Buffer.from(keyAgreementKey.id);\n    // converts keys again....\n    // base58 encoding should only be used at the network / serialization boundary.\n    const secret = await (keyAgreementKey as common.types.KeyAgreementKeyPairInstance).deriveSecret(\n      {\n        publicKey: ephemeralPublicKey,\n      } as any\n    );\n    const keyData = await deriveKey({ secret, producerInfo, consumerInfo });\n    return {\n      kek: await KeyEncryptionKey.createKek({ keyData }),\n    };\n  }\n\n  static async kekFromStaticPeer({\n    ephemeralKeyPair,\n    staticPublicKey,\n  }: common.types.KeyEncryptionKeyFromStaticPublicKeyOptions) {\n    // TODO: consider accepting JWK format for `staticPublicKey` not just LD key\n    if (\n      !(\n        staticPublicKey.type === 'X25519KeyAgreementKey2019' ||\n        staticPublicKey.type === 'JsonWebKey2020'\n      )\n    ) {\n      throw new Error(\n        `\"staticPublicKey.type\" must be \"X25519KeyAgreementKey2019\".`\n      );\n    }\n\n    const epkPair = await X25519KeyPair.from(ephemeralKeyPair.keypair);\n\n    // \"Party U Info\"\n    const producerInfo = epkPair.publicKeyBuffer;\n    // \"Party V Info\"\n    const consumerInfo = Buffer.from(staticPublicKey.id);\n\n    const secret = await epkPair.deriveSecret({\n      publicKey: staticPublicKey,\n    } as any);\n    const keyData = await deriveKey({ secret, producerInfo, consumerInfo });\n    return {\n      kek: await KeyEncryptionKey.createKek({ keyData }),\n      epk: ephemeralKeyPair.epk,\n      apu: base64url.encode(producerInfo),\n      apv: base64url.encode(consumerInfo as any),\n    };\n  }\n\n  static fromFingerprint({ fingerprint }: any) {\n    // skip leading `z` that indicates base58 encoding\n    const buffer = bs58.decode(fingerprint.substr(1));\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L80\n    if (buffer[0] === 0xec && buffer[1] === 0x01) {\n      const publicKeyBase58 = bs58.encode(buffer.slice(2));\n      const did = `did:key:${X25519KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      const keyId = `#${X25519KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      return new X25519KeyPair({\n        id: keyId,\n        controller: did,\n        publicKeyBase58,\n      } as common.types.KeyPairBase58);\n    }\n\n    throw new Error(`Unsupported Fingerprint Type: ${fingerprint}`);\n  }\n\n  static fromEdKeyPair(ed25519KeyPair: common.types.KeyPairBase58) {\n    let publicKeyBase58;\n    let privateKeyBase58;\n\n    if (ed25519KeyPair.publicKeyBase58) {\n      publicKeyBase58 = bs58.encode(\n        convertPublicKeyToX25519(bs58.decode(ed25519KeyPair.publicKeyBase58))\n      );\n    }\n\n    if (ed25519KeyPair.privateKeyBase58) {\n      privateKeyBase58 = bs58.encode(\n        convertSecretKeyToX25519(bs58.decode(ed25519KeyPair.privateKeyBase58))\n      );\n    }\n\n    return new X25519KeyPair({\n      controller: ed25519KeyPair.controller,\n      publicKeyBase58,\n      privateKeyBase58,\n    } as common.types.KeyPairBase58);\n  }\n\n  static from(options: common.types.KeyPairBase58 | common.types.KeyPairJwk) {\n    let privateKeyBase58;\n    let publicKeyBase58;\n\n    if ((options as common.types.KeyPairBase58).publicKeyBase58) {\n      publicKeyBase58 = (options as common.types.KeyPairBase58).publicKeyBase58;\n    }\n\n    if ((options as common.types.KeyPairBase58).privateKeyBase58) {\n      privateKeyBase58 = (options as common.types.KeyPairBase58)\n        .privateKeyBase58;\n    }\n\n    if ((options as common.types.KeyPairJwk).privateKeyJwk) {\n      privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyJwk(\n        (options as common.types.KeyPairJwk).privateKeyJwk\n      );\n    }\n\n    if ((options as common.types.KeyPairJwk).publicKeyJwk) {\n      publicKeyBase58 = keyUtils.publicKeyBase58FromPublicKeyJwk(\n        (options as common.types.KeyPairJwk).publicKeyJwk\n      );\n    }\n\n    return new X25519KeyPair({\n      ...options,\n      privateKeyBase58,\n      publicKeyBase58,\n    });\n  }\n\n  constructor(options: common.types.KeyPairJwk | common.types.KeyPairBase58) {\n    this.type = 'X25519KeyAgreementKey2019';\n    this.id = options.id;\n    this.controller = options.controller;\n\n    if ((options as common.types.KeyPairBase58).publicKeyBase58) {\n      this.publicKeyBuffer = Buffer.from(\n        bs58.decode((options as common.types.KeyPairBase58).publicKeyBase58)\n      );\n    } else if ((options as common.types.JsonWebKeyPair).publicKeyJwk) {\n      this.publicKeyBuffer = Buffer.from(\n        bs58.decode(\n          keyUtils.publicKeyBase58FromPublicKeyJwk(\n            (options as common.types.JsonWebKeyPair).publicKeyJwk\n          )\n        )\n      );\n    } else {\n      throw new Error(\n        'X25519KeyPair requires publicKeyBase58 or publicKeyJwk, received none.'\n      );\n    }\n\n    if ((options as common.types.KeyPairBase58).privateKeyBase58) {\n      this.privateKeyBuffer = Buffer.from(\n        bs58.decode((options as common.types.KeyPairBase58).privateKeyBase58)\n      );\n    }\n\n    if ((options as common.types.JsonWebKeyPair).privateKeyJwk) {\n      this.privateKeyBuffer = Buffer.from(\n        bs58.decode(\n          keyUtils.privateKeyBase58FromPrivateKeyJwk(\n            (options as common.types.JsonWebKeyPair).privateKeyJwk\n          )\n        )\n      );\n    }\n\n    if (!this.id) {\n      this.id = `#${this.fingerprint()}`;\n    }\n  }\n\n  fingerprint() {\n    return X25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    } as any);\n  }\n\n  verifyFingerprint(fingerprint: any) {\n    // fingerprint should have `z` prefix indicating\n    // that it's multi-base encoded\n    if (!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      return {\n        error: new Error('`fingerprint` must be a multibase encoded string.'),\n        valid: false,\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = bs58.decode(fingerprint.slice(1));\n    } catch (e) {\n      return { error: e, valid: false };\n    }\n    let publicKeyBuffer = this.publicKeyBuffer;\n\n    // validate the first two multicodec bytes 0xec01\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L80\n    const valid =\n      fingerprintBuffer.slice(0, 2).toString('hex') === 'ec01' &&\n      publicKeyBuffer.equals(fingerprintBuffer.slice(2));\n    if (!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false,\n      };\n    }\n    return { valid };\n  }\n\n  toKeyPair(_private: boolean = false): common.types.LinkedDataKeyPair {\n    let kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n    if (_private) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(_private: boolean = false): common.types.JsonWebKeyPair {\n    let kp: any = {\n      id: this.id,\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: this.toJwk(),\n    };\n    delete kp.publicKeyJwk.kid;\n    if (_private) {\n      kp.privateKeyJwk = this.toJwk(true);\n      delete kp.privateKeyJwk.kid;\n    }\n\n    return kp;\n  }\n\n  toJwk(_private: boolean = false) {\n    const publicKeyBase58 = bs58.encode(this.publicKeyBuffer);\n    if (_private) {\n      return keyUtils.privateKeyJwkFromPrivateKeyBase58(\n        publicKeyBase58,\n        bs58.encode(this.privateKeyBuffer)\n      );\n    }\n    return keyUtils.publicKeyJwkFromPublicKeyBase58(publicKeyBase58);\n  }\n\n  deriveSecret(options: common.types.DeriveSecretOptions) {\n    let remotePubkeyBytes;\n\n    const { publicKey } = options;\n\n    if ((publicKey as any).publicKeyBase58) {\n      remotePubkeyBytes = bs58.decode(\n        (publicKey as common.types.LinkedDataKeyPair).publicKeyBase58\n      );\n    } else if ((publicKey as any).publicKeyJwk) {\n      remotePubkeyBytes = bs58.decode(\n        keyUtils.publicKeyBase58FromPublicKeyJwk(\n          (publicKey as common.types.JsonWebKeyPair).publicKeyJwk\n        )\n      );\n    }\n\n    const privateKeyBytes = this.privateKeyBuffer as Buffer;\n\n    const scalarMultipleResult = x25519.sharedKey(\n      new Uint8Array(privateKeyBytes),\n      new Uint8Array(remotePubkeyBytes),\n      true\n    );\n\n    return scalarMultipleResult;\n  }\n}\n","import base64url from 'base64url';\n\nimport * as ed25519 from '@stablelib/ed25519';\n\nimport canonicalize from 'canonicalize';\n\nclass JWSVerificationFailed extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'JWSVerificationFailed';\n  }\n}\n\nconst _jwkToSecretKey = (jwk: any) => {\n  const d = base64url.toBuffer(jwk.d);\n  const x = base64url.toBuffer(jwk.x);\n  const secretKey = new Uint8Array(Buffer.concat([d, x]));\n  return secretKey;\n};\n\nconst _jwkToPublicKey = (jwk: any) => {\n  const x = base64url.toBuffer(jwk.x);\n  const publicKey = new Uint8Array(x);\n  return publicKey;\n};\n\nexport const decode = (jws: string, options = { complete: false }) => {\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n\n  if (options.complete) {\n    return {\n      header: JSON.parse(base64url.decode(encodedHeader)),\n      payload: JSON.parse(base64url.decode(encodedPayload)),\n      signature: encodedSignature,\n    };\n  }\n  return JSON.parse(base64url.decode(encodedPayload));\n};\n\nexport const sign = (\n  payload: any,\n  privateKeyJwk: any,\n  header: any = {\n    alg: 'EdDSA',\n  }\n) => {\n  const secretKey = _jwkToSecretKey(privateKeyJwk);\n  const encodedHeader = base64url.encode(canonicalize(header));\n  const encodedPayload = base64url.encode(canonicalize(payload));\n  const message = new Uint8Array(\n    Buffer.from(`${encodedHeader}.${encodedPayload}`)\n  );\n  const signature = ed25519.sign(secretKey, message);\n  const encodedSignature = base64url.encode(Buffer.from(signature));\n  const jws = `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\n  return jws;\n};\n\nexport const signDetached = (\n  payload: Buffer,\n  privateKeyJwk: any,\n  header: any = {\n    alg: 'EdDSA',\n  }\n) => {\n  const secretKey = _jwkToSecretKey(privateKeyJwk);\n  const encodedHeader = base64url.encode(canonicalize(header));\n  const message = new Uint8Array(\n    Buffer.concat([\n      Buffer.from(encodedHeader, 'utf-8'),\n      Buffer.from('.', 'utf-8'),\n      payload,\n    ])\n  );\n  const signature = ed25519.sign(secretKey, message);\n  const encodedSignature = base64url.encode(Buffer.from(signature));\n  const jws = `${encodedHeader}..${encodedSignature}`;\n  return jws;\n};\n\nexport const verify = (jws: string, publicKeyJwk: any) => {\n  const publicKey = _jwkToPublicKey(publicKeyJwk);\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n\n  const message = new Uint8Array(\n    Buffer.from(`${encodedHeader}.${encodedPayload}`)\n  );\n  const verified = ed25519.verify(\n    publicKey,\n    message,\n    new Uint8Array(base64url.toBuffer(encodedSignature))\n  );\n\n  if (verified) {\n    return JSON.parse(base64url.decode(encodedPayload));\n  }\n\n  throw new JWSVerificationFailed('signature verification failed');\n};\n\nexport const verifyDetached = (\n  jws: string,\n  payload: Buffer,\n  publicKeyJwk: any\n) => {\n  const publicKey = _jwkToPublicKey(publicKeyJwk);\n  const [encodedHeader, encodedSignature] = jws.split('..');\n  const message = new Uint8Array(\n    Buffer.concat([\n      Buffer.from(encodedHeader, 'utf-8'),\n      Buffer.from('.', 'utf-8'),\n      payload,\n    ])\n  );\n  const verified = ed25519.verify(\n    publicKey,\n    message,\n    new Uint8Array(base64url.toBuffer(encodedSignature))\n  );\n  return verified;\n};\n\nexport default {\n  decode,\n\n  sign,\n  signDetached,\n\n  verify,\n  verifyDetached,\n};\n","import bs58 from 'bs58';\n\nimport * as ed25519 from '@stablelib/ed25519';\nimport * as keyUtils from './keyUtils';\n\nimport * as common from '@transmute/did-key-common';\n\nimport { X25519KeyPair } from '@transmute/did-key-x25519';\n\n@common.types.staticImplements<common.types.KeyPairClass>()\nexport class Ed25519KeyPair {\n  public id: string;\n  public type: string;\n  public controller: string;\n\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  static fingerprintFromPublicKey(\n    keypair: common.types.KeyPairJwk | common.types.KeyPairBase58\n  ) {\n    let pubkeyBytes: any;\n\n    if ((keypair as any).publicKeyBase58) {\n      pubkeyBytes = bs58.decode(\n        (keypair as common.types.KeyPairBase58).publicKeyBase58\n      );\n    }\n\n    if ((keypair as any).publicKeyJwk) {\n      pubkeyBytes = bs58.decode(\n        keyUtils.publicKeyBase58FromPublicKeyJwk(\n          (keypair as common.types.KeyPairJwk).publicKeyJwk\n        )\n      );\n    }\n    // ed25519 cryptonyms are multicodec encoded values, specifically:\n    // (multicodec ed25519-pub 0xed01 + key bytes)\n\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    buffer[0] = 0xed;\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${bs58.encode(buffer)}`;\n  }\n  static async generate(options: common.types.KeyPairGenerateOptions) {\n    let key;\n    if (options.secureRandom) {\n      key = ed25519.generateKeyPair({\n        isAvailable: true,\n        randomBytes: options.secureRandom,\n      });\n    } else {\n      throw new Error('options.secureRandom is required.');\n    }\n\n    const publicKeyBase58 = bs58.encode(key.publicKey);\n    const privateKeyBase58 = bs58.encode(key.secretKey);\n\n    const did = `did:key:${Ed25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    const keyId = `#${Ed25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    return new Ed25519KeyPair({\n      id: keyId,\n      controller: did,\n      publicKeyBase58,\n      privateKeyBase58,\n    });\n  }\n\n  static fromFingerprint({ fingerprint }: any) {\n    // skip leading `z` that indicates base58 encoding\n    const buffer = bs58.decode(fingerprint.substr(1));\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L81\n    if (buffer[0] === 0xed && buffer[1] === 0x01) {\n      const publicKeyBase58 = bs58.encode(buffer.slice(2));\n      const did = `did:key:${Ed25519KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      const keyId = `#${Ed25519KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      return new Ed25519KeyPair({\n        id: keyId,\n        controller: did,\n        publicKeyBase58,\n      });\n    }\n\n    throw new Error(`Unsupported Fingerprint Type: ${fingerprint}`);\n  }\n  // todo: consider moving this type conversion cancer to common.\n  static from(options: common.types.KeyPairBase58 | common.types.KeyPairJwk) {\n    let privateKeyBase58;\n    let publicKeyBase58;\n\n    if ((options as common.types.KeyPairBase58).publicKeyBase58) {\n      publicKeyBase58 = (options as common.types.KeyPairBase58).publicKeyBase58;\n    }\n\n    if ((options as common.types.KeyPairBase58).privateKeyBase58) {\n      privateKeyBase58 = (options as common.types.KeyPairBase58)\n        .privateKeyBase58;\n    }\n\n    if ((options as common.types.KeyPairJwk).privateKeyJwk) {\n      privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyJwk(\n        (options as common.types.KeyPairJwk).privateKeyJwk\n      );\n    }\n\n    if ((options as common.types.KeyPairJwk).publicKeyJwk) {\n      publicKeyBase58 = keyUtils.publicKeyBase58FromPublicKeyJwk(\n        (options as common.types.KeyPairJwk).publicKeyJwk\n      );\n    }\n\n    return new Ed25519KeyPair({\n      ...options,\n      privateKeyBase58,\n      publicKeyBase58,\n    });\n  }\n\n  constructor(options: any = {}) {\n    this.type = 'Ed25519VerificationKey2018';\n    this.id = options.id;\n    this.controller = options.controller;\n\n    if (options.publicKeyBase58) {\n      this.publicKeyBuffer = bs58.decode(options.publicKeyBase58);\n    } else if (options.publicKeyJwk) {\n      this.publicKeyBuffer = bs58.decode(\n        keyUtils.publicKeyBase58FromPublicKeyJwk(options.publicKeyJwk)\n      );\n    } else {\n      throw new Error(\n        'Ed25519KeyPair requires publicKeyBase58 or publicKeyJwk, recieved neither.'\n      );\n    }\n\n    if (options.privateKeyBase58) {\n      this.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n    }\n\n    if (this.controller && !this.id) {\n      this.id = `${this.controller}#${this.fingerprint()}`;\n    }\n  }\n\n  publicNode() {\n    return this.toKeyPair(false);\n  }\n\n  fingerprint() {\n    return Ed25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    } as any);\n  }\n  verifyFingerprint(fingerprint: any) {\n    // fingerprint should have `z` prefix indicating\n    // that it's multi-base encoded\n    if (!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      return {\n        error: new Error('`fingerprint` must be a multibase encoded string.'),\n        valid: false,\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = bs58.decode(fingerprint.slice(1));\n    } catch (e) {\n      return { error: e, valid: false };\n    }\n\n    // validate the first two multicodec bytes 0xed01\n    const valid =\n      fingerprintBuffer.slice(0, 2).toString('hex') === 'ed01' &&\n      this.publicKeyBuffer.equals(fingerprintBuffer.slice(2));\n    if (!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false,\n      };\n    }\n    return { valid };\n  }\n\n  async toJwk(exportPrivateKey: boolean = false) {\n    if (exportPrivateKey) {\n      return keyUtils.privateKeyJwkFromPrivateKeyBase58(\n        bs58.encode(this.privateKeyBuffer)\n      );\n    }\n    return keyUtils.publicKeyJwkFromPublicKeyBase58(\n      bs58.encode(this.publicKeyBuffer)\n    );\n  }\n\n  toX25519KeyPair(exportPrivateKey: boolean = false) {\n    if (exportPrivateKey) {\n      return X25519KeyPair.fromEdKeyPair({\n        controller: this.controller,\n        publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n        privateKeyBase58: bs58.encode(this.privateKeyBuffer),\n      } as any);\n    } else {\n      return X25519KeyPair.fromEdKeyPair({\n        controller: this.controller,\n        publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n      } as any);\n    }\n  }\n\n  toKeyPair(exportPrivateKey: boolean = false) {\n    const kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n\n    if (exportPrivateKey) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(exportPrivateKey: boolean = false) {\n    const kp: any = {\n      id: this.id,\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: keyUtils.publicKeyJwkFromPublicKeyBase58(\n        bs58.encode(this.publicKeyBuffer)\n      ),\n    };\n\n    delete kp.publicKeyJwk.kid;\n    if (exportPrivateKey) {\n      kp.privateKeyJwk = keyUtils.privateKeyJwkFromPrivateKeyBase58(\n        bs58.encode(this.privateKeyBuffer)\n      );\n      delete kp.privateKeyJwk.kid;\n    }\n\n    return kp;\n  }\n\n  signer() {\n    if (!this.privateKeyBuffer) {\n      throw new Error('No private key to sign with.');\n    }\n    let { privateKeyBuffer } = this;\n    return {\n      async sign({ data }: any) {\n        const signatureUInt8Array = ed25519.sign(privateKeyBuffer, data);\n        return signatureUInt8Array;\n      },\n    };\n  }\n  verifier() {\n    if (!this.publicKeyBuffer) {\n      throw new Error('No public key to verify with.');\n    }\n    let { publicKeyBuffer } = this;\n    return {\n      async verify({ data, signature }: any) {\n        let verified = false;\n        try {\n          verified = ed25519.verify(publicKeyBuffer, data, signature);\n        } catch (e) {\n          console.error('An error occurred when verifying signature: ', e);\n        }\n        return verified;\n      },\n    };\n  }\n}\n","import crypto from 'crypto';\n\nimport * as keyUtils from './keyUtils';\nimport bs58 from 'bs58';\nimport secp256k1 from 'secp256k1';\n\nimport * as common from '@transmute/did-key-common';\n\nconst _generate = (secureRandom: any) => {\n  let privateKey;\n  do {\n    privateKey = secureRandom();\n  } while (!secp256k1.privateKeyVerify(privateKey));\n\n  const publicKey = secp256k1.publicKeyCreate(privateKey);\n  return { publicKey, privateKey };\n};\n\n@common.types.staticImplements<common.types.KeyPairClass>()\nexport class Secp256k1KeyPair {\n  public id: string;\n  public type: string;\n  public controller: string;\n\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  static fingerprintFromPublicKey(\n    keypair: common.types.KeyPairJwk | common.types.KeyPairBase58\n  ) {\n    let pubkeyBytes: any;\n\n    if ((keypair as any).publicKeyBase58) {\n      pubkeyBytes = bs58.decode(\n        (keypair as common.types.KeyPairBase58).publicKeyBase58\n      );\n    }\n\n    if ((keypair as any).publicKeyJwk) {\n      pubkeyBytes = new Uint8Array(\n        Buffer.from(\n          keyUtils.publicKeyHexFromJwk(\n            (keypair as common.types.KeyPairJwk).publicKeyJwk\n          )\n        )\n      );\n    }\n\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    // See https://github.com/multiformats/multicodec/blob/master/table.csv\n    // 0xe7 is Secp256k1 public key\n    buffer[0] = 0xe7; //\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${bs58.encode(buffer)}`;\n  }\n\n  static async generate(options: any = {}) {\n    let privateKey;\n    let publicKey;\n    if (options.secureRandom) {\n      ({ privateKey, publicKey } = _generate(options.secureRandom));\n    }\n\n    if (!privateKey) {\n      throw new Error('Cannot generate private key.');\n    }\n\n    const publicKeyBase58 = keyUtils.publicKeyBase58FromPublicKeyHex(\n      Buffer.from(publicKey).toString('hex')\n    );\n    const privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyHex(\n      Buffer.from(privateKey).toString('hex')\n    );\n\n    const did = `did:key:${Secp256k1KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    const keyId = `#${Secp256k1KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n\n    return new Secp256k1KeyPair({\n      id: keyId,\n      controller: did,\n      publicKeyBase58,\n      privateKeyBase58,\n    });\n  }\n\n  static async from(options: any) {\n    let privateKeyBase58 = options.privateKeyBase58;\n    let publicKeyBase58 = options.publicKeyBase58;\n\n    if (options.privateKeyHex) {\n      privateKeyBase58 = await keyUtils.privateKeyBase58FromPrivateKeyHex(\n        options.privateKeyHex\n      );\n    }\n\n    if (options.publicKeyHex) {\n      publicKeyBase58 = await keyUtils.publicKeyBase58FromPublicKeyHex(\n        options.publicKeyHex\n      );\n    }\n\n    if (options.privateKeyJwk) {\n      privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyHex(\n        await keyUtils.privateKeyHexFromJwk(options.privateKeyJwk)\n      );\n    }\n\n    if (options.publicKeyJwk) {\n      publicKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyHex(\n        await keyUtils.publicKeyHexFromJwk(options.publicKeyJwk)\n      );\n    }\n\n    return new Secp256k1KeyPair({\n      ...options,\n      privateKeyBase58,\n      publicKeyBase58,\n    });\n  }\n\n  static fromFingerprint({ fingerprint }: any) {\n    // skip leading `z` that indicates base58 encoding\n    const buffer = bs58.decode(fingerprint.substr(1));\n\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L77\n    if (buffer[0] === 0xe7 && buffer[1] === 0x01) {\n      const publicKeyBase58 = bs58.encode(buffer.slice(2));\n      const did = `did:key:${Secp256k1KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      const keyId = `#${Secp256k1KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      return new Secp256k1KeyPair({\n        id: keyId,\n        controller: did,\n        publicKeyBase58,\n      });\n    }\n\n    throw new Error(`Unsupported Fingerprint Type: ${fingerprint}`);\n  }\n\n  constructor(options: any = {}) {\n    this.type = 'EcdsaSecp256k1VerificationKey2019';\n    this.id = options.id;\n    this.controller = options.controller;\n\n    if (options.publicKeyBase58) {\n      this.publicKeyBuffer = bs58.decode(options.publicKeyBase58);\n    } else if (options.publicKeyJwk) {\n      this.publicKeyBuffer = Buffer.from(\n        keyUtils.publicKeyHexFromJwk(options.publicKeyJwk),\n        'hex'\n      );\n    } else {\n      throw new Error(\n        'Secp256k1KeyPair requires publicKeyBase58 or publicKeyJwk, recieved neither.'\n      );\n    }\n\n    if (options.privateKeyBase58) {\n      this.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n    }\n\n    if (options.privateKeyJwk) {\n      this.privateKeyBuffer = Buffer.from(\n        keyUtils.privateKeyHexFromJwk(options.privateKeyJwk),\n        'hex'\n      );\n    }\n\n    if (this.controller && !this.id) {\n      this.id = `${this.controller}#${this.fingerprint()}`;\n    }\n  }\n\n  publicNode() {\n    return this.toKeyPair(false);\n  }\n\n  signer() {\n    if (!this.privateKeyBuffer) {\n      throw new Error('No private key to sign with.');\n    }\n    let { privateKeyBuffer } = this;\n    return {\n      async sign({ data }: any) {\n        const messageHashUInt8Array = crypto\n          .createHash('sha256')\n          .update(data)\n          .digest();\n\n        const sigObj: any = secp256k1.ecdsaSign(\n          messageHashUInt8Array,\n          new Uint8Array(privateKeyBuffer)\n        );\n\n        return sigObj.signature;\n      },\n    };\n  }\n\n  verifier() {\n    if (!this.publicKeyBuffer) {\n      throw new Error('No public key to verify with.');\n    }\n    let { publicKeyBuffer } = this;\n    return {\n      async verify({ data, signature }: any) {\n        const messageHashUInt8Array = crypto\n          .createHash('sha256')\n          .update(data)\n          .digest();\n\n        let verified = false;\n        try {\n          verified = secp256k1.ecdsaVerify(\n            signature,\n            messageHashUInt8Array,\n            new Uint8Array(publicKeyBuffer)\n          );\n        } catch (e) {\n          console.error('An error occurred when verifying signature: ', e);\n        }\n        return verified;\n      },\n    };\n  }\n\n  fingerprint() {\n    return Secp256k1KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    } as any);\n  }\n\n  verifyFingerprint(fingerprint: string) {\n    // fingerprint should have `z` prefix indicating\n    // that it's multi-base encoded\n    if (!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      return {\n        error: new Error('`fingerprint` must be a multibase encoded string.'),\n        valid: false,\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = bs58.decode(fingerprint.slice(1));\n    } catch (e) {\n      return { error: e, valid: false };\n    }\n    let { publicKeyBuffer } = this;\n\n    // validate the first two multicodec bytes 0xe701\n    const valid =\n      fingerprintBuffer.slice(0, 2).toString('hex') === 'e701' &&\n      publicKeyBuffer.equals(fingerprintBuffer.slice(2));\n    if (!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false,\n      };\n    }\n    return { valid };\n  }\n\n  toJwk(_private: boolean = false) {\n    if (_private) {\n      if (!this.privateKeyBuffer) {\n        throw new Error('No private key to export');\n      }\n      return keyUtils.privateKeyJwkFromPrivateKeyHex(\n        this.privateKeyBuffer.toString('hex')\n      );\n    }\n    return keyUtils.publicKeyJwkFromPublicKeyHex(\n      this.publicKeyBuffer.toString('hex')\n    );\n  }\n\n  async toHex(_private: boolean = false) {\n    if (_private) {\n      if (!this.privateKeyBuffer) {\n        throw new Error('No private key to export');\n      }\n      return keyUtils.privateKeyHexFromJwk(\n        await keyUtils.privateKeyJwkFromPrivateKeyHex(\n          this.privateKeyBuffer.toString('hex')\n        )\n      );\n    }\n    return keyUtils.publicKeyHexFromJwk(\n      await keyUtils.publicKeyJwkFromPublicKeyHex(\n        this.publicKeyBuffer.toString('hex')\n      )\n    );\n  }\n\n  toKeyPair(exportPrivate = false) {\n    const kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n    if (exportPrivate) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(exportPrivate: boolean = false): any {\n    let kp: any = {\n      id: this.id,\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: this.toJwk(),\n    };\n    delete kp.publicKeyJwk.kid;\n    if (exportPrivate) {\n      kp.privateKeyJwk = this.toJwk(true);\n      delete kp.privateKeyJwk.kid;\n    }\n\n    return kp;\n  }\n}\n","import base64url from 'base64url';\n\nimport crypto from 'crypto';\nimport secp256k1 from 'secp256k1';\n\nimport {\n  ISecp256k1PrivateKeyJwk,\n  ISecp256k1PublicKeyJwk,\n  privateKeyUInt8ArrayFromJwk,\n  publicKeyUInt8ArrayFromJwk,\n} from './keyUtils';\n\n/** error matching @panva/jose for JWS verification failure. */\nclass JWSVerificationFailed extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'JWSVerificationFailed';\n  }\n}\n\n/** JWS Header */\nexport interface IJWSHeader {\n  /** algorithm, ES256K */\n  alg: string;\n\n  /** type, JWT */\n  typ?: string;\n  /** signing key id, ... */\n  kid?: string;\n}\n\n/** Produce a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\nexport const signDetached = async (\n  // in the case of EcdsaSecp256k1Signature2019 this is the result of createVerifyData\n  payload: Buffer,\n  privateKeyJwk: ISecp256k1PrivateKeyJwk,\n  header = {\n    alg: 'ES256K',\n    b64: false,\n    crit: ['b64'],\n  }\n) => {\n  const privateKeyUInt8Array = await privateKeyUInt8ArrayFromJwk(privateKeyJwk);\n\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n\n  const message = Buffer.from(toBeSignedBuffer);\n\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n  const sigObj: any = secp256k1.ecdsaSign(\n    messageHashUInt8Array,\n    privateKeyUInt8Array\n  );\n\n  const encodedSignature = base64url.encode(Buffer.from(sigObj.signature));\n\n  return `${encodedHeader}..${encodedSignature}`;\n};\n\n/** Verify a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\nexport const verifyDetached = async (\n  jws: string,\n  payload: Buffer,\n  publicKeyJwk: ISecp256k1PublicKeyJwk\n) => {\n  if (jws.indexOf('..') === -1) {\n    throw new JWSVerificationFailed('not a valid rfc7797 jws.');\n  }\n  const [encodedHeader, encodedSignature] = jws.split('..');\n  const header = JSON.parse(base64url.decode(encodedHeader));\n  if (header.alg !== 'ES256K') {\n    throw new Error('JWS alg is not signed with ES256K.');\n  }\n  if (\n    header.b64 !== false ||\n    !header.crit ||\n    !header.crit.length ||\n    header.crit[0] !== 'b64'\n  ) {\n    throw new Error('JWS Header is not in rfc7797 format (not detached).');\n  }\n  const publicKeyUInt8Array = await publicKeyUInt8ArrayFromJwk(publicKeyJwk);\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n  const message = Buffer.from(toBeSignedBuffer);\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n  const signatureUInt8Array = base64url.toBuffer(encodedSignature);\n  let signatureLowerS = secp256k1.signatureNormalize(signatureUInt8Array);\n  const verified = secp256k1.ecdsaVerify(\n    signatureLowerS,\n    messageHashUInt8Array,\n    publicKeyUInt8Array\n  );\n\n  if (verified) {\n    return true;\n  }\n  const erroObject = {\n    signature: signatureUInt8Array.toString('hex'),\n    // message: messageHashUInt8Array.toString('hex'),\n    // publicKey: publicKeyUInt8Array.toString('hex'),\n  };\n  throw new JWSVerificationFailed(\n    'ECDSA Verify Failed: ' + JSON.stringify(erroObject, null, 2)\n  );\n};\n\n/** Produce a normal ES256K JWS */\nexport const sign = async (\n  payload: any,\n  privateKeyJwk: ISecp256k1PrivateKeyJwk,\n  header: IJWSHeader = { alg: 'ES256K' }\n) => {\n  const privateKeyUInt8Array = await privateKeyUInt8ArrayFromJwk(privateKeyJwk);\n\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n  const encodedPayload = base64url.encode(JSON.stringify(payload));\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n  const message = Buffer.from(toBeSigned);\n\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n\n  const sigObj: any = secp256k1.ecdsaSign(\n    messageHashUInt8Array,\n    privateKeyUInt8Array\n  );\n\n  const encodedSignature = base64url.encode(sigObj.signature);\n  return `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\n};\n\n/** Verify an ES256K JWS, returns the decoded object if successful, throws otherwise. */\nexport const verify = async (\n  jws: string,\n  publicKeyJwk: ISecp256k1PublicKeyJwk\n) => {\n  const publicKeyUInt8Array = await publicKeyUInt8ArrayFromJwk(publicKeyJwk);\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n\n  const message = Buffer.from(toBeSigned);\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n\n  const signatureUInt8Array = base64url.toBuffer(encodedSignature);\n  let signatureLowerS = secp256k1.signatureNormalize(signatureUInt8Array);\n\n  const verified = secp256k1.ecdsaVerify(\n    signatureLowerS,\n    messageHashUInt8Array,\n    publicKeyUInt8Array\n  );\n  if (verified) {\n    return JSON.parse(base64url.decode(encodedPayload));\n  }\n  const erroObject = {\n    signature: signatureUInt8Array.toString('hex'),\n    message: messageHashUInt8Array.toString('hex'),\n    publicKey: publicKeyUInt8Array.toString('hex'),\n  };\n  throw new JWSVerificationFailed(\n    'ECDSA Verify Failed: ' + JSON.stringify(erroObject, null, 2)\n  );\n};\n\n/** decode a JWS (without verifying it) */\nexport const decode = (jws: string, options = { complete: false }) => {\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n\n  if (options.complete) {\n    return {\n      header: JSON.parse(base64url.decode(encodedHeader)),\n      payload: JSON.parse(base64url.decode(encodedPayload)),\n      signature: encodedSignature,\n    };\n  }\n  return JSON.parse(base64url.decode(encodedPayload));\n};\n","\n'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./did-key-bls12381.cjs.production.min.js')\n} else {\n  module.exports = require('./did-key-bls12381.cjs.development.js')\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 558;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 767;","import { withHandlers } from \"recompose\";\nimport { EdvClient } from \"edv-client\";\nimport { UniversalWallet2020, VaultClient } from \"@transmute/universal-wallet\";\n\n// correct horse battery staple\n\nconst getClient = async (wallet) => {\n  let _wallet = new UniversalWallet2020(wallet.contents);\n  const entropy = _wallet.contents.find((c) => {\n    return c.type === \"Entropy\";\n  });\n  const ed25519Key = _wallet.contents.find((c) => {\n    return c.type === \"Ed25519VerificationKey2018\";\n  });\n  ed25519Key.controller = ed25519Key.id.split(\"#\")[0];\n  const x25519Key = _wallet.contents.find((c) => {\n    return c.type === \"X25519KeyAgreementKey2019\";\n  });\n  x25519Key.controller = x25519Key.id.split(\"#\")[0];\n  let client = await VaultClient.fromDerivedContents(\n    wallet.vaultEndpoint,\n    ed25519Key,\n    x25519Key,\n    Buffer.from(entropy.value, \"hex\")\n  );\n  return client;\n};\n\nconst isContentPersisted = (localContents, id) => {\n  return (\n    localContents.find((c) => {\n      return c.id === id;\n    }) !== undefined\n  );\n};\n\nexport default withHandlers({\n  setUniversalWalletProp: ({ setUniversalWalletProp }) => (payload) => {\n    setUniversalWalletProp(payload);\n  },\n  generateWallet: ({ setUniversalWalletProp }) => async (_seed) => {\n    if (!_seed) {\n      throw new Error(\"seed is required.\");\n    }\n    let wallet = await UniversalWallet2020.generate(_seed);\n    setUniversalWalletProp({\n      status: wallet.status,\n      contents: wallet.contents,\n    });\n  },\n  toggleLockStatus: ({ setUniversalWalletProp }) => async ({\n    status,\n    password,\n    contents,\n  }) => {\n    let wallet = new UniversalWallet2020(contents);\n    wallet.status = status;\n\n    if (status === \"LOCKED\") {\n      await wallet.unlock(password);\n    }\n    if (status === \"UNLOCKED\") {\n      await wallet.lock(password);\n    }\n    setUniversalWalletProp({\n      status: wallet.status,\n      contents: wallet.contents,\n    });\n  },\n\n  deleteWallet: ({ setUniversalWalletProp }) => async () => {\n    setUniversalWalletProp({\n      status: \"UNLOCKED\",\n      contents: [],\n    });\n  },\n\n  importWallet: ({ setUniversalWalletProp }) => async (encryptedWallet) => {\n    let wallet = new UniversalWallet2020();\n    await wallet.import(encryptedWallet);\n    setUniversalWalletProp({\n      status: wallet.status,\n      contents: wallet.contents,\n    });\n  },\n\n  exportWallet: () => async (status, contents) => {\n    if (status !== \"LOCKED\") {\n      throw new Error(\"Cannot export unlocked wallet.\");\n    }\n    let wallet = new UniversalWallet2020(contents);\n    wallet.status = status;\n    return wallet.export();\n  },\n\n  saveWallet: ({ setUniversalWalletProp }) => async (contents) => {\n    setUniversalWalletProp({\n      contents,\n    });\n  },\n  issueCredential: ({ wallet, setUniversalWalletProp }) => async ({\n    credential,\n    options,\n  }) => {\n    let _wallet = new UniversalWallet2020(wallet.contents);\n    const verifiableCredential = await _wallet.issue({\n      credential,\n      options,\n    });\n    setUniversalWalletProp({\n      contents: [verifiableCredential, ..._wallet.contents],\n    });\n  },\n  proveVerifiableCredential: ({ wallet, setUniversalWalletProp }) => async ({\n    verifiableCredential,\n    options,\n  }) => {\n    let _wallet = new UniversalWallet2020(wallet.contents);\n    const verifiablePresentation = await _wallet.prove({\n      verifiableCredential,\n      options,\n    });\n    setUniversalWalletProp({\n      contents: [verifiablePresentation, ..._wallet.contents],\n    });\n  },\n  syncVault: ({ wallet, setUniversalWalletProp }) => async () => {\n    setUniversalWalletProp({\n      isSyncing: true,\n    });\n    const client = await getClient(wallet);\n\n    let contents = [];\n    try {\n      contents = await client.getWalletContents();\n    } catch (e) {\n      console.log(e);\n      if (e.message === \"Request failed with status code 404\") {\n        // no-op we will add content that does not existt anyway..\n      }\n    }\n    // console.log('remote wallet contents: ', contents);\n\n    for (const content of wallet.contents) {\n      // console.log({ content });\n      const isPersisted = isContentPersisted(contents, content.id);\n      // console.log({ isPersisted });\n      if (!isPersisted) {\n        let data = JSON.parse(JSON.stringify(content));\n        delete data.tableData;\n        const doc = {\n          id: await EdvClient.generateId(),\n          content: {\n            schema: \"https://schema.org/UniversalWallet\",\n            data,\n          },\n        };\n        await client.addWalletContent(doc);\n        // console.log({ response });\n      }\n    }\n\n    contents = await client.getWalletContents();\n    setUniversalWalletProp({\n      isSyncing: false,\n      contents,\n    });\n  },\n});\n","module.exports = __webpack_public_path__ + \"static/media/logo.33b194d8.svg\";","/* class decorator */\nexport const staticImplements = <T>() => {\n  return <U extends T>(constructor: U) => {\n    return constructor;\n  };\n};\n\nexport * from './JWE_ALG';\nexport * from './JWS_ALG';\n\nexport * from './KeyPairClass';\nexport * from './KeyPairInstance';\nexport * from './KeyAgreementKeyPairClass';\nexport * from './KeyPairGenerateOptions';\nexport * from './EpkResult';\nexport * from './KeyEncryptionKeyFromEphemeralPublicKeyOptions';\nexport * from './KeyEncryptionKeyFromStaticPublicKeyOptions';\nexport * from './DeriveSecretOptions';\n\nexport * from './KeyPairBase';\n\nexport * from './KeyPairJwk';\nexport * from './JsonWebKeyPair';\n\nexport * from './KeyPairBase58';\nexport * from './LinkedDataKeyPair';\n\nexport * from './KeyAgreementKeyPairInstance';\n","import base64url from 'base64url';\nimport canonicalize from 'canonicalize';\n\nexport const createJws = async (signer: any, payload: any, header: object) => {\n  const encodedHeader = base64url.encode(canonicalize(header));\n  const encodedPayload = base64url.encode(canonicalize(payload));\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n  const signature = await signer.sign(Buffer.from(toBeSigned));\n  return `${toBeSigned}.${base64url.encode(Buffer.from(signature))}`;\n};\n\nexport const verifyJws = async (verifier: any, jws: string) => {\n  const [header, payload, signature] = jws.split('.');\n  const toBeVerified = `${header}.${payload}`;\n  const verified = await verifier.verify(\n    Buffer.from(toBeVerified),\n    base64url.toBuffer(signature)\n  );\n\n  return verified;\n};\n\nexport const createDetachedJws = async (\n  signer: any,\n  payload: Buffer,\n  header: object\n) => {\n  const encodedHeader = base64url.encode(\n    canonicalize({ ...header, b64: false, crit: ['b64'] })\n  );\n\n  const toBeSigned = new Uint8Array(\n    Buffer.concat([\n      Buffer.from(encodedHeader, 'utf-8'),\n      Buffer.from('.', 'utf-8'),\n      payload,\n    ])\n  );\n  const signature = await signer.sign(Buffer.from(toBeSigned));\n  const encodedSignature = base64url.encode(Buffer.from(signature));\n  return `${encodedHeader}..${encodedSignature}`;\n};\n\nexport const verifyDetachedJws = async (\n  verifier: any,\n  payload: Buffer,\n  signature: string\n) => {\n  const [encodedHeader, encodedSignature] = signature.split('..');\n\n  const toBeVerified = new Uint8Array(\n    Buffer.concat([\n      Buffer.from(encodedHeader, 'utf-8'),\n      Buffer.from('.', 'utf-8'),\n      payload,\n    ])\n  );\n\n  const verified = await verifier.verify(\n    Buffer.from(toBeVerified),\n    base64url.toBuffer(encodedSignature)\n  );\n\n  return verified;\n};\n","export const getVerificationMethod = (\n  didKeyPairInstance: any,\n  contentType: string = 'application/did+ld+json'\n) => {\n  let externalKeyRepresentation;\n  switch (contentType) {\n    case 'application/did+json': {\n      externalKeyRepresentation = didKeyPairInstance.toJsonWebKeyPair();\n      break;\n    }\n    case '*/*':\n    case 'application/did+ld+json': {\n      externalKeyRepresentation = didKeyPairInstance.toKeyPair();\n      break;\n    }\n    default: {\n      throw new Error(\n        'This implementation of did:key does not support: ' + contentType\n      );\n    }\n  }\n  return externalKeyRepresentation;\n};\n\nexport const keyToDidDoc = async (\n  didKeyPairInstance: any,\n  contentType: string = 'application/did+ld+json'\n) => {\n  const did = `did:key:${didKeyPairInstance.fingerprint()}`;\n  const externalKeyRepresentation = getVerificationMethod(\n    didKeyPairInstance,\n    contentType\n  );\n  let verificationRelationships: any = {\n    verificationMethod: [externalKeyRepresentation],\n  };\n\n  if (didKeyPairInstance.verifier) {\n    verificationRelationships = {\n      ...verificationRelationships,\n      authentication: [externalKeyRepresentation.id],\n      assertionMethod: [externalKeyRepresentation.id],\n      capabilityInvocation: [externalKeyRepresentation.id],\n      capabilityDelegation: [externalKeyRepresentation.id],\n    };\n  }\n\n  if (didKeyPairInstance.deriveSecret) {\n    verificationRelationships = {\n      ...verificationRelationships,\n      keyAgreement: [externalKeyRepresentation.id],\n    };\n  }\n\n  if (didKeyPairInstance.type === 'Ed25519VerificationKey2018') {\n    const kek = await didKeyPairInstance.toX25519KeyPair(false);\n    const externalKeyRepresentation2 = getVerificationMethod(kek, contentType);\n    verificationRelationships = {\n      ...verificationRelationships,\n      verificationMethod: [\n        ...verificationRelationships.verificationMethod,\n        externalKeyRepresentation2,\n      ],\n      keyAgreement: [externalKeyRepresentation2.id],\n    };\n  }\n\n  // imagine if people injected ads like this....\n  // verificationRelationships = {\n  //   ...verificationRelationships,\n  //   service: [\n  //     {\n  //       id: '#provider',\n  //       type: 'ServiceProvider',\n  //       serviceEndpoint: 'https://transmute.industries',\n  //     },\n  //   ],\n  // };\n\n  const didDocument = {\n    '@context': [\n      'https://www.w3.org/ns/did/v1',\n      {\n        '@base': did,\n      },\n    ],\n    id: did,\n    ...verificationRelationships,\n  };\n\n  // Here is were I would delete a property for JSON-only\n  // If I wanted to conform to the DID Core JSON Production Rules.\n  return didDocument;\n};\n\n// resolve ( did, did-resolution-input-metadata )\n//      -> ( did-resolution-metadata, did-document, did-document-metadata )\nexport const getResolve = (DidKeyPairClass: any) => {\n  const resolve = async (\n    didUri: string,\n    resolutionMetaData: any = { accept: 'application/did+ld+json' }\n  ) => {\n    const fingerprint = didUri\n      .split('#')[0]\n      .split('did:key:')\n      .pop();\n    const publicKey = await DidKeyPairClass.fromFingerprint({ fingerprint });\n    return {\n      didDocument: await keyToDidDoc(publicKey, resolutionMetaData.accept),\n      didDocumentMetaData: {\n        'content-type': resolutionMetaData.accept,\n      },\n      didResolutionMetaData: {},\n    };\n  };\n  return resolve;\n};\n","export const getGet = (resolve: any) => {\n  const get = async ({ did, url }: any = {}) => {\n    did = did || url;\n    if (!did) {\n      throw new TypeError('\"did\" must be a string.');\n    }\n    const result = await resolve(did);\n    return result.didDocument;\n  };\n  return get;\n};\n"],"sourceRoot":""}