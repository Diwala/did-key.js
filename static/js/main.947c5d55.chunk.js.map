{"version":3,"sources":["../../src/Bls12381G2KeyPair.ts","../../src/driver.ts","../../bls12381/node_modules/@mattrglobal/bls12381-key-pair/node_modules/@mattrglobal/bbs-signatures/lib sync","../../bls12381/node_modules/@mattrglobal/bbs-signatures/lib sync","../../src/Cipher/crypto.ts","../../src/Cipher/algorithms/ecdhkdf.ts","../../src/Cipher/algorithms/classes/KeyEncryptionKey.ts","../../src/Cipher/algorithms/xc20p.ts","../../src/Cipher/DecryptTransformer.ts","../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../../src/Cipher/EncryptTransformer.ts","../../src/Cipher/getEpkGenerator.ts","serviceWorker.js","store/history.js","store/universal-wallet/actions.js","store/universal-wallet/reducer.js","store/universal-wallet/redux.js","store/universal-wallet/index.js","store/universal-wallet/container.js","store/index.js","components/Theme/Theme.js","pages/base/menu.js","pages/base/drawer.js","pages/base/base.js","pages/home/ContentTypeToggle.js","pages/home/util.js","pages/home/VerticalTabs.js","pages/home/Home.js","pages/index.js","pages/home/index.js","components/ParticlesContainer/ParticlesContainer.js","pages/errors/404.js","store/create.js","index.js","../../src/constants/index.ts","../../src/crypto.ts","../../src/functions/jwkToBase58.ts","../../src/functions/fingerprintToDid.ts","../../src/functions/fromJwk.ts","../../src/functions/getMultibaseFromJwk.ts","../../src/functions/base58KeyPairToJwk.ts","../../src/Jws/Jws.ts","../../src/functions/getJwkTypeFromMultibase.ts","../../src/functions/toJwkPair.ts","../../src/KeyPair.ts","../../src/Jwe/Jwe.ts","../../src/functions/generate.ts","../../src/keyUtils.ts","../../src/X25519KeyPair.ts","../../src/EdDSA.ts","../../src/Ed25519KeyPair.ts","../../src/Secp256k1KeyPair.ts","../../src/ES256K.ts","../../bls12381/dist/index.js","../../bls12381/node_modules/@mattrglobal/bls12381-key-pair/node_modules/@mattrglobal/node-bbs-signatures/lib sync","../node_modules/jspdf/dist sync","store/universal-wallet/handlers.js","assets/logo.svg","../../src/types/index.ts","../../src/Jws/index.ts","../../src/getResolver.ts","../../src/getGet.ts"],"names":["Bls12381G2KeyPair","options","id","type","controller","publicKeyBase58","publicKeyBuffer","bs58","publicKeyJwk","Error","Buffer","from","privateKeyBase58","privateKeyBuffer","this","fingerprint","generate","keyPair","generateBls12381KeyPair","secretKey","publicKey","mattr","fingerprintFromPublicKey","fromFingerprint","keypair","_options","privateKeyJwk","fromJwk","toKeyPair","exportPrivateKey","kp","toJsonWebKeyPair","mattrKey","kid","verifier","signer","resolve","getResolve","getGet","webpackEmptyContext","req","e","code","keys","module","exports","process","crypto","window","deriveKey","secret","producerInfo","consumerInfo","TypeError","input","Uint8Array","ALGORITHM_ID","offset","dv","DataView","HASH_ALGORITHM","name","KEY_LENGTH","KeyEncryptionKey","key","wrapKey","unwrappedKey","wrappedKey","aeskw","bs64","unwrapKey","_wrappedKey","console","keyData","ciphertext","iv","tag","additionalData","cek","cipher","encrypted","data","Symbol","iterator","asyncIterator","getEpkGenerator","KeyPair","k0","epk","Boolean","location","hostname","match","createBrowserHistory","setUniversalWalletProp","createAction","payload","handleActions","state","status","contents","vaultEndpoint","isSyncEnabled","isSyncing","connect","wallet","actions","reducer","container","compose","withRedux","withHandlers","router","connectRouter","history","font1","font2","font3","Theme","children","props","theme","createMuiTheme","splashImage","palette","primary","light","lighten","main","dark","darken","secondary","typography","useNextVariants","fontSize","fontFamily","join","h1","fontWeight","h2","h3","h4","textTransform","letterSpacing","h5","h6","subtitle1","subtitle2","body1","body2","button","caption","overline","overrides","MuiInput","MuiInputLabel","root","MuiAppBar","MuiButton","contained","boxShadow","Component","StyledMenu","withStyles","paper","border","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","StyledMenuItem","backgroundColor","color","common","white","MenuItem","CustomizedMenus","React","useState","anchorEl","setAnchorEl","IconButton","aria-controls","aria-haspopup","onClick","event","currentTarget","keepMounted","open","onClose","push","ListItemIcon","ListItemText","DrawerContent","List","ListItem","useStyles","makeStyles","display","width","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","spacing","breakpoints","up","toolbar","alignItems","justifyContent","padding","mixins","content","flexGrow","MiniDrawer","classes","useTheme","setOpen","className","CssBaseline","AppBar","position","clsx","Toolbar","aria-label","edge","src","logo","alt","title","style","height","Drawer","variant","direction","Divider","ToggleButtons","alignment","setAlignment","ToggleButtonGroup","value","exclusive","onChange","newAlignment","ToggleButton","disabled","generateEd25519","contentType","a","_keys","ed25519","ed25519Key","x25519","x25519Key","secureRandom","randomBytes","fromEdKeyPair","accept","didDocument","generateX25519","generateSecp256k1","secp256k1","generateBls12381","bls12381","generateP256","didKeyWebCrypto","kty","crvOrSize","generateP384","generateP521","TabPanel","index","other","role","hidden","aria-labelledby","Box","p","background","tabs","borderRight","divider","Panel","onToggleRepresentation","onGenerate","Grid","item","sm","xs","Button","Typography","gutterBottom","JSON","stringify","VerticalTabs","setState","setValue","refresh","handleGenerate","useEffect","Tabs","orientation","newValue","map","opt","Tab","label","Home","routes","path","exact","component","ParticlesContainer","params","particles","line_linked","shadow","enable","blur","Fragment","top","NotFound","pathname","href","appReducers","persistConfig","whitelist","storage","middlewares","thunk","routerMiddleware","store","createStore","persistReducer","combineReducers","rootReducer","composeWithDevTools","applyMiddleware","withReduxEnhancer","persistor","persistStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","log","SUPPORTED_EC","crvToMulticodecPrefix","multicodecToJwkType","0","crv","crvToJwsHashAlg","jwkToBase58","jwk","base64url","fingerprintToDid","methodName","publicKeyBytes","prefix","buffer","getMultibaseFromJwk","base58KeyPairToJwk","Jws","createJws","createDetachedJws","x","y","getJwkTypeFromMultibase","toJwkPair","_keypair","staticImplements","args","KeyPair_1","generateEphemeralKeyPair","epkArgs","kekFromEphemeralPeer","keyAgreementKey","ephemeralPublicKey","kek","kekFromStaticPeer","ephemeralKeyPair","staticPublicKey","epkPair","apu","apv","namedCurve","privateKey","sign","hash","privateKeyToSigner","verify","publicKeyToVerifier","deriveSecret","public","result","d","getKid","copy","digest","canonicalize","privateKeyJwkFromPrivateKeyBase58","privateKeyBytes","_jwk","publicKeyJwkFromPublicKeyBase58","privateKeyBase58FromPrivateKeyJwk","publicKeyBase58FromPublicKeyJwk","X25519KeyPair","keyUtils","pubkeyBytes","isAvailable","did","keyId","X25519KeyPair_1","ed25519KeyPair","convertPublicKeyToX25519","convertSecretKeyToX25519","verifyFingerprint","error","valid","fingerprintBuffer","_private","toJwk","remotePubkeyBytes","privateKeyBuf","Ed25519KeyPair","equals","toX25519KeyPair","signatureUInt8Array","signature","verified","privateKeyJwkFromPrivateKeyHex","privateKeyHex","keyto","publicKeyJwkFromPublicKeyHex","publicKeyHex","keyBin","privateKeyHexFromJwk","publicKeyHexFromJwk","uncompressedPublicKey","compressed","privateKeyUInt8ArrayFromJwk","publicKeyUInt8ArrayFromJwk","publicKeyBase58FromPublicKeyHex","privateKeyBase58FromPrivateKeyHex","privateKeyPem","publicKeyPem","Secp256k1KeyPair","_generate","messageHashUInt8Array","sigObj","toString","toHex","exportPrivate","require","getClient","_wallet","UniversalWallet2020","entropy","find","c","split","VaultClient","fromDerivedContents","client","isContentPersisted","localContents","undefined","generateWallet","_seed","toggleLockStatus","password","unlock","lock","deleteWallet","importWallet","encryptedWallet","import","exportWallet","export","saveWallet","issueCredential","credential","issue","verifiableCredential","proveVerifiableCredential","prove","verifiablePresentation","syncVault","getWalletContents","message","parse","tableData","EdvClient","generateId","schema","doc","addWalletContent","toBeSigned","jws","header","toBeVerified","encodedHeader","b64","crit","encodedSignature","getVerificationMethod","externalKeyRepresentation","didKeyPairInstance","keyToDidDoc","verificationRelationships","verificationMethod","authentication","assertionMethod","capabilityInvocation","capabilityDelegation","keyAgreement","externalKeyRepresentation2","DidKeyPairClass","resolutionMetaData","didUri","didDocumentMetaData","didResolutionMetaData","url"],"mappings":"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","file":"static/js/main.947c5d55.chunk.js","sourcesContent":["import * as mattr from '@mattrglobal/bls12381-key-pair';\n\nimport { generateBls12381KeyPair } from '@mattrglobal/bbs-signatures';\nimport * as bs58 from 'bs58';\n\nexport class Bls12381G2KeyPair {\n  public id: string;\n  public type: string = 'Bls12381G2Key2020';\n  public controller: string;\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  static async generate() {\n    const keyPair = generateBls12381KeyPair();\n    let options = {\n      privateKeyBase58: bs58.encode(keyPair.secretKey as Uint8Array),\n      publicKeyBase58: bs58.encode(keyPair.publicKey),\n    };\n    const fingerprint = mattr.Bls12381G2KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58: options.publicKeyBase58,\n    });\n    return new Bls12381G2KeyPair({\n      ...options,\n      id: '#' + fingerprint,\n      controller: `did:key:${fingerprint}`,\n    });\n  }\n\n  static async fromFingerprint({ fingerprint }: any) {\n    const keypair = mattr.Bls12381G2KeyPair.fromFingerprint({\n      fingerprint,\n    });\n    const options = {\n      publicKeyBase58: bs58.encode(keypair.publicKeyBuffer),\n    };\n    return new Bls12381G2KeyPair(options);\n  }\n\n  static async from(options: any) {\n    let keypair;\n    if (options.publicKeyJwk) {\n      keypair = await mattr.Bls12381G2KeyPair.fromJwk(options);\n    }\n    if (options.privateKeyJwk) {\n      keypair = await mattr.Bls12381G2KeyPair.fromJwk(options);\n    }\n\n    if (options.publicKeyBase58) {\n      keypair = await mattr.Bls12381G2KeyPair.from(options);\n    }\n    if (options.privateKeyBase58) {\n      keypair = await mattr.Bls12381G2KeyPair.from(options);\n    }\n\n    let _options: any = {\n      publicKeyBase58: bs58.encode((keypair as any).publicKeyBuffer),\n    };\n    if ((keypair as any).privateKeyBuffer) {\n      _options.privateKeyBase58 = bs58.encode(\n        (keypair as any).privateKeyBuffer\n      );\n    }\n\n    return new Bls12381G2KeyPair(_options);\n  }\n\n  constructor(options: any) {\n    this.id = options.id;\n    this.type = options.type || 'Bls12381G2Key2020';\n    this.controller = options.controller;\n    if (options.publicKeyBase58) {\n      this.publicKeyBuffer = bs58.decode(options.publicKeyBase58);\n    } else if (options.publicKeyJwk) {\n      this.publicKeyBuffer = Buffer.from('a');\n    } else {\n      throw new Error(\n        'Bls12381G2KeyPair requires publicKeyBase58 or publicKeyJwk, recieved neither.'\n      );\n    }\n    if (options.privateKeyBase58) {\n      this.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n    }\n\n    if (!this.id) {\n      this.id = '#' + this.fingerprint();\n    }\n    if (!this.controller) {\n      this.controller = `did:key:${this.fingerprint()}`;\n    }\n  }\n  fingerprint() {\n    const fingerprint = mattr.Bls12381G2KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    });\n    return fingerprint;\n  }\n\n  toKeyPair(exportPrivateKey: boolean = false) {\n    const kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n\n    if (exportPrivateKey) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(exportPrivateKey = false) {\n    const mattrKey = new mattr.Bls12381G2KeyPair(\n      this.toKeyPair(exportPrivateKey)\n    );\n    const kp: any = {\n      id: this.id,\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: mattrKey.publicKeyJwk,\n    };\n    delete kp.publicKeyJwk.kid;\n    if (exportPrivateKey) {\n      kp.privateKeyJwk = mattrKey.privateKeyJwk;\n      delete kp.privateKeyJwk.kid;\n    }\n    return kp;\n  }\n  verifier() {\n    const mattrKey = new mattr.Bls12381G2KeyPair(this.toKeyPair(false));\n    return mattrKey.verifier();\n  }\n  signer() {\n    const mattrKey = new mattr.Bls12381G2KeyPair(this.toKeyPair(true));\n    return mattrKey.signer();\n  }\n}\n","import { Secp256k1KeyPair } from './Secp256k1KeyPair';\nimport { getResolve, getGet } from '@transmute/did-key-common';\n\nexport const resolve = getResolve(Secp256k1KeyPair);\nexport const get = getGet(resolve);\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1372;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1387;","import { Crypto } from 'node-webcrypto-ossl';\n\nfunction isNodejs() {\n  return (\n    typeof process === 'object' &&\n    typeof process.versions === 'object' &&\n    typeof process.versions.node !== 'undefined'\n  );\n}\n\nlet crypto: Crypto;\n\nif (isNodejs()) {\n  crypto = new Crypto();\n} else {\n  crypto = window.crypto as Crypto;\n}\n\nexport default crypto;\n","/*!\n * Copyright (c) 2019-2020 Digital Bazaar, Inc. All rights reserved.\n */\nimport crypto from '../crypto';\n\n// only supported algorithm\nconst KEY_ALGORITHM = 'ECDH-ES+A256KW';\n\n// create static ALGORITHM_ID\nconst ALGORITHM_CONTENT = KEY_ALGORITHM; //new TextEncoder().encode();\nconst ALGORITHM_ID = new Uint8Array(4 + ALGORITHM_CONTENT.length);\n// write length of content as 32-bit big endian integer, then write content\nconst dv = new DataView(\n  ALGORITHM_ID.buffer,\n  ALGORITHM_ID.byteOffset,\n  ALGORITHM_ID.byteLength\n);\ndv.setUint32(0, ALGORITHM_CONTENT.length);\nALGORITHM_ID.set(Buffer.from(ALGORITHM_CONTENT), 4);\n\n// RFC 7518 Section 4.6.2 specifies using SHA-256 for ECDH-ES KDF\n// https://tools.ietf.org/html/rfc7518#section-4.6.2\nconst HASH_ALGORITHM = { name: 'SHA-256' };\n\n// derived keys are always 256-bits\nconst KEY_LENGTH = 256;\n\n/**\n * Derives a 256-bit AES-KW key encryption key from a shared secret that\n * was derived from an ephemeral and static pair\n * of Elliptic Curve Diffie-Hellman keys.\n *\n * The KDF used is described in RFC 7518. This KDF is referenced by RFC 8037,\n * which defines how to perform Curve25519 (X25519) ECDH key agreement.\n *\n * @param {object} options - The options to use.\n * @param {Uint8Array} options.secret - The shared secret (i.e., `Z`) to use.\n * @param {Uint8Array} options.producerInfo - An array of application-specific\n *   bytes describing the consumer (aka the \"encrypter\" or \"sender\").\n * @param {Uint8Array} options.consumerInfo - An array of application-specific\n *   bytes describing the producer (aka the \"decrypter\" or\n *   \"receiver\"/\"recipient\").\n *\n * @returns {Promise<Uint8Array>} - Resolves to the generated key.\n */\nexport async function deriveKey({ secret, producerInfo, consumerInfo }: any) {\n  if (!(secret instanceof Uint8Array && secret.length > 0)) {\n    throw new TypeError('\"secret\" must be a non-empty Uint8Array.');\n  }\n  if (!(producerInfo instanceof Uint8Array && producerInfo.length > 0)) {\n    throw new TypeError('\"producerInfo\" must be a non-empty Uint8Array.');\n  }\n  if (!(consumerInfo instanceof Uint8Array && consumerInfo.length > 0)) {\n    throw new TypeError('\"consumerInfo\" must be a non-empty Uint8Array.');\n  }\n\n  // the output of Concat KDF is hash(roundNumber || Z || OtherInfo)\n  // where roundNumber is always 1 because the hash length is presumed to\n  // ...match the key length, encoded as a big endian 32-bit integer\n  // where OtherInfo is:\n  // AlgorithmID || PartyUInfo || PartyVInfo || SuppPubInfo\n  // where SuppPubInfo is the key length in bits, big endian encoded as a\n  // 32-bit number, i.e., 256 === [0, 0, 1, 0]\n  const input = new Uint8Array(\n    4 + // round number\n    secret.length + // `Z`\n    ALGORITHM_ID.length + // AlgorithmID\n    4 +\n    producerInfo.length + // PartyUInfo\n    4 +\n    consumerInfo.length + // PartyVInfo\n      4\n  ); // SuppPubInfo (key data length in bits)\n  let offset = 0;\n  const dv = new DataView(input.buffer, input.byteOffset, input.byteLength);\n  dv.setUint32(offset, 1);\n  input.set(secret, (offset += 4));\n  input.set(ALGORITHM_ID, (offset += secret.length));\n  dv.setUint32((offset += ALGORITHM_ID.length), producerInfo.length);\n  input.set(producerInfo, (offset += 4));\n  dv.setUint32((offset += producerInfo.length), consumerInfo.length);\n  input.set(consumerInfo, (offset += 4));\n  dv.setUint32((offset += consumerInfo.length), KEY_LENGTH);\n\n  // hash input and return result as derived key\n  return new Uint8Array(await crypto.subtle.digest(HASH_ALGORITHM, input));\n}\n","import { default as bs64 } from 'base64url';\nimport { AESKW } from '@stablelib/aes-kw';\n\nexport interface CreateKekOptions {\n  keyData: Uint8Array;\n}\n\nexport interface WrapKeyOptions {\n  unwrappedKey: Uint8Array;\n}\n\nexport interface UnwrapKeyOptions {\n  wrappedKey: string; //base64url\n}\n\nexport class KeyEncryptionKey {\n  public aeskw: AESKW;\n  public algorithm: any;\n\n  static createKek = async ({ keyData }: CreateKekOptions) => {\n    return new KeyEncryptionKey(keyData);\n  };\n\n  constructor(key: Uint8Array) {\n    if (key.length !== 32) {\n      throw new Error('key must be 32 bytes');\n    }\n    this.aeskw = new AESKW(key);\n    this.algorithm = { name: 'A256KW' };\n  }\n\n  /**\n   * Wraps a cryptographic key.\n   *\n   * @param {object} options - The options to use.\n   * @param {Uint8Array} options.unwrappedKey - The key material as a\n   *   `Uint8Array`.\n   *\n   * @returns {string} - The base64url-encoded wrapped key bytes.\n   */\n  wrapKey({ unwrappedKey }: WrapKeyOptions): string {\n    const wrappedKey = this.aeskw.wrapKey(unwrappedKey);\n    return bs64.encode(Buffer.from(wrappedKey));\n  }\n\n  /**\n   * Unwraps a cryptographic key.\n   *\n   * @param {object} options - The options to use.\n   * @param {string} options.wrappedKey - The wrapped key material as a\n   *   base64url-encoded string.\n   *\n   * @returns {Uint8Array} - Resolves to the key bytes or null if\n   *   the unwrapping fails because the key does not match.\n   */\n  unwrapKey({ wrappedKey }: UnwrapKeyOptions): Uint8Array | null {\n    const _wrappedKey = bs64.toBuffer(wrappedKey);\n    try {\n      return this.aeskw.unwrapKey(_wrappedKey);\n    } catch (e) {\n      // decryption failed\n      console.error(e);\n      return null;\n    }\n  }\n}\n","/*!\n * Copyright (c) 2019-2020 Digital Bazaar, Inc. All rights reserved.\n */\nimport crypto from '../crypto';\nimport { XChaCha20Poly1305, KEY_LENGTH } from '@stablelib/xchacha20poly1305';\n\nexport const JWE_ENC = 'XC20P';\n\n/**\n * Generates a content encryption key (CEK). The 256-bit key is intended to be\n * used as a XChaCha20Poly1305 (draft-irtf-cfrg-xchacha-01) key.\n *\n * @returns {Promise<Uint8Array>} - Resolves to the generated key.\n */\nexport async function generateKey() {\n  // generate content encryption key\n  return crypto.getRandomValues(new Uint8Array(KEY_LENGTH));\n}\n\n/**\n * Encrypts some data. The data will be encrypted using the given\n * 256-bit XChaCha20Poly1305 (draft-irtf-cfrg-xchacha-01) content encryption\n * key (CEK).\n *\n * @param {object} options - The options to use.\n * @param {Uint8Array} options.data - The data to encrypt.\n * @param {Uint8Array} [options.additionalData] - Optional additional\n *   authentication data.\n * @param {Uint8Array} options.cek - The content encryption key to use.\n *\n * @returns {Promise<object>} - Resolves to `{ciphertext, iv, tag}`.\n */\nexport async function encrypt({ data, additionalData, cek }: any) {\n  if (!(data instanceof Uint8Array)) {\n    throw new TypeError('\"data\" must be a Uint8Array.');\n  }\n  if (!(cek instanceof Uint8Array)) {\n    throw new TypeError('\"cek\" must be a Uint8Array.');\n  }\n\n  const cipher = new XChaCha20Poly1305(cek);\n  // Note: Uses a random value here as a counter is not viable -- multiple\n  // recipients may be trying to update at the same time and use the same\n  // counter breaking security; using XChaCha20Poly1305 once available will\n  // further reduce chances of a collision as it has a 192-bit IV\n  const iv = crypto.getRandomValues(new Uint8Array(cipher.nonceLength));\n\n  // encrypt data\n  const encrypted = cipher.seal(iv, data, additionalData);\n\n  // split ciphertext and tag\n  const ciphertext = encrypted.subarray(0, encrypted.length - cipher.tagLength);\n  const tag = encrypted.subarray(encrypted.length - cipher.tagLength);\n\n  return {\n    ciphertext,\n    iv,\n    tag,\n  };\n}\n\n/**\n * Decrypts some encrypted data. The data must have been encrypted using\n * the given XChaCha20Poly1305 (draft-irtf-cfrg-xchacha-01) content encryption\n * key (CEK).\n *\n * @param {object} options - The options to use.\n * @param {Uint8Array} options.ciphertext - The data to decrypt.\n * @param {Uint8Array} options.iv - The initialization vector (aka nonce).\n * @param {Uint8Array} options.tag - The authentication tag.\n * @param {Uint8Array} [options.additionalData] - Optional additional\n *   authentication data.\n * @param {Uint8Array} options.cek - The content encryption key to use.\n *\n * @returns {Promise<Uint8Array>} The decrypted data.\n */\nexport async function decrypt({\n  ciphertext,\n  iv,\n  tag,\n  additionalData,\n  cek,\n}: any) {\n  if (!(iv instanceof Uint8Array)) {\n    throw new Error('Invalid or missing \"iv\".');\n  }\n  if (!(ciphertext instanceof Uint8Array)) {\n    throw new Error('Invalid or missing \"ciphertext\".');\n  }\n  if (!(tag instanceof Uint8Array)) {\n    throw new Error('Invalid or missing \"tag\".');\n  }\n  if (!(cek instanceof Uint8Array)) {\n    throw new TypeError('\"cek\" must be a Uint8Array.');\n  }\n\n  // decrypt `ciphertext`\n  const cipher = new XChaCha20Poly1305(cek);\n  const encrypted = new Uint8Array(ciphertext.length + cipher.tagLength);\n  encrypted.set(ciphertext);\n  encrypted.set(tag, ciphertext.length);\n  return cipher.open(iv, encrypted, additionalData);\n}\n","/*!\n * Copyright (c) 2019-2020 Digital Bazaar, Inc. All rights reserved.\n */\nimport base64url from 'base64url';\n\nimport * as recAlgorithm from './algorithms/recommended';\nimport { stringToUint8Array } from './util';\n\nconst CIPHER_ALGORITHMS: any = {\n  [recAlgorithm.cipher.JWE_ENC]: recAlgorithm.cipher,\n};\n\nexport class DecryptTransformer {\n  public keyAgreementKey: any;\n  public KeyPairClass: any;\n\n  constructor({ keyAgreementKey, KeyPairClass }: any = {}) {\n    if (!keyAgreementKey) {\n      throw new TypeError('\"keyAgreementKey\" is a required parameter.');\n    }\n    this.KeyPairClass = KeyPairClass;\n    this.keyAgreementKey = keyAgreementKey;\n  }\n\n  async transform(chunk: any, controller: any) {\n    // assumes `chunk` is an object with a JWE under the `jwe` property\n    if (!(chunk && typeof chunk === 'object')) {\n      throw new TypeError('\"chunk\" must be an object.');\n    }\n    const { jwe } = chunk;\n\n    const data = await this.decrypt(jwe);\n    if (data === null) {\n      const error = new Error('Invalid decryption key.');\n      error.name = 'DataError';\n      throw error;\n    }\n\n    controller.enqueue(data);\n  }\n\n  async decrypt(jwe: any) {\n    // validate JWE\n    if (!(jwe && typeof jwe === 'object')) {\n      throw new TypeError('\"jwe\" must be an object.');\n    }\n    if (typeof jwe.protected !== 'string') {\n      throw new TypeError('\"jwe.protected\" is missing or not a string.');\n    }\n    if (typeof jwe.iv !== 'string') {\n      throw new Error('Invalid or missing \"iv\".');\n    }\n    if (typeof jwe.ciphertext !== 'string') {\n      throw new Error('Invalid or missing \"ciphertext\".');\n    }\n    if (typeof jwe.tag !== 'string') {\n      throw new Error('Invalid or missing \"tag\".');\n    }\n\n    // validate encryption header\n    let header;\n    let additionalData;\n    try {\n      // ASCII(BASE64URL(UTF8(JWE Protected Header)))\n      additionalData = stringToUint8Array(jwe.protected);\n      header = JSON.parse(base64url.toBuffer(jwe.protected).toString());\n    } catch (e) {\n      throw new Error('Invalid JWE \"protected\" header.');\n    }\n    if (!(header.enc && typeof header.enc === 'string')) {\n      throw new Error('Invalid JWE \"enc\" header.');\n    }\n    const cipher = CIPHER_ALGORITHMS[header.enc];\n    if (!cipher) {\n      throw new Error('Unsupported encryption algorithm \"${header.enc}\".');\n    }\n    if (!Array.isArray(jwe.recipients)) {\n      throw new TypeError('\"jwe.recipients\" must be an array.');\n    }\n\n    // find `keyAgreementKey` matching recipient\n    const { keyAgreementKey } = this;\n\n    const _findRecipient = (recipients: any, key: any) => {\n      return recipients.find(\n        (rec: any) =>\n          (rec.header && rec.header.kid === key.id) ||\n          rec.header.kid.split('#').pop() === key.id.split('#').pop()\n      );\n    };\n\n    const recipient = _findRecipient(jwe.recipients, keyAgreementKey);\n\n    if (!recipient) {\n      console.log(jwe.recipients, keyAgreementKey);\n      throw new Error('No matching recipient found for key agreement key.');\n    }\n    // get wrapped CEK\n    const { encrypted_key: wrappedKey } = recipient;\n    if (typeof wrappedKey !== 'string') {\n      throw new Error('Invalid or missing \"encrypted_key\".');\n    }\n\n    // TODO: consider a cache of encrypted_key => CEKs to reduce unwrapping\n    // calls which may even need to hit the network (e.g., Web KMS)\n\n    // derive KEK and unwrap CEK\n    const { epk } = recipient.header;\n\n    const { kek } = await this.KeyPairClass.kekFromEphemeralPeer({\n      keyAgreementKey,\n      epk,\n    });\n    const cek = await kek.unwrapKey({ wrappedKey });\n    if (!cek) {\n      // failed to unwrap key\n      return null;\n    }\n\n    // decrypt content\n    const { ciphertext, iv, tag } = jwe;\n    return cipher.decrypt({\n      ciphertext: base64url.toBuffer(ciphertext),\n      iv: base64url.toBuffer(iv),\n      tag: base64url.toBuffer(tag),\n      additionalData,\n      cek,\n    });\n  }\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","/*!\n * Copyright (c) 2019-2020 Digital Bazaar, Inc. All rights reserved.\n */\nimport base64url from 'base64url';\n\n// 1 MiB = 1048576\nconst DEFAULT_CHUNK_SIZE = 1048576;\n\nexport class EncryptTransformer {\n  public recipients: any;\n  public encodedProtectedHeader: any;\n  public cipher: any;\n  public additionalData: any;\n  public cek: any;\n  public chunkSize: any;\n  public offset: any;\n  public totalOffset: any;\n  public index: any;\n  public buffer: any;\n\n  constructor({\n    recipients,\n    encodedProtectedHeader,\n    cipher,\n    additionalData,\n    cek,\n    chunkSize = DEFAULT_CHUNK_SIZE,\n  }: any = {}) {\n    this.recipients = recipients;\n    this.encodedProtectedHeader = encodedProtectedHeader;\n    this.cipher = cipher;\n    this.additionalData = additionalData;\n    this.cek = cek;\n    this.chunkSize = chunkSize;\n    this.offset = 0;\n    this.totalOffset = 0;\n    this.index = 0;\n  }\n\n  start() {\n    this.buffer = new Uint8Array(this.chunkSize);\n  }\n\n  async transform(chunk: any, controller: any) {\n    const { buffer } = this;\n\n    // assumes `chunk` is a Uint8Array...\n    if (!(chunk instanceof Uint8Array)) {\n      throw new TypeError('\"chunk\" must be an object.');\n    }\n    while (chunk) {\n      const space = buffer.length - this.offset;\n      if (chunk.length <= space) {\n        buffer.set(chunk, this.offset);\n        this.offset += chunk.byteLength;\n        this.totalOffset += chunk.byteLength;\n        chunk = null;\n      } else {\n        const partial = new Uint8Array(chunk.buffer, chunk.byteOffset, space);\n        chunk = new Uint8Array(\n          chunk.buffer,\n          chunk.byteOffset + space,\n          chunk.length - space\n        );\n        buffer.set(partial, this.offset);\n        this.offset += space;\n        this.totalOffset += space;\n      }\n\n      // flush if buffer is full and more data remains\n      if (chunk) {\n        await this.flush(controller);\n      }\n    }\n  }\n\n  async flush(controller: any) {\n    if (this.offset === 0) {\n      // nothing to flush\n      return;\n    }\n\n    // encrypt data\n    const { buffer } = this;\n    const data = new Uint8Array(buffer.buffer, buffer.byteOffset, this.offset);\n    const jwe = await this.encrypt(data);\n\n    // clear buffer\n    this.offset = 0;\n\n    controller.enqueue({\n      index: this.index++,\n      offset: this.totalOffset,\n      jwe,\n    });\n  }\n\n  async encrypt(data: any) {\n    const { cipher, additionalData, cek } = this;\n    const { ciphertext, iv, tag } = await cipher.encrypt({\n      data,\n      additionalData,\n      cek,\n    });\n\n    // represent encrypted data as JWE\n    const jwe = {\n      protected: this.encodedProtectedHeader,\n      recipients: this.recipients,\n      iv: base64url.encode(iv),\n      ciphertext: base64url.encode(ciphertext),\n      tag: base64url.encode(tag),\n    };\n    return jwe;\n  }\n}\n","import { types } from '@transmute/did-key-common';\n\nexport const getEpkGenerator = (KeyPair: types.KeyPairClass, opts: any) => {\n  const generateEphemeralKeyPair = async (): Promise<types.EpkResult> => {\n    const k0 = await KeyPair.generate(opts);\n    const keypair = await k0.toJsonWebKeyPair(true);\n\n    return {\n      keypair,\n      epk: keypair.publicKeyJwk,\n    };\n  };\n  return generateEphemeralKeyPair;\n};\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","import { createAction } from 'redux-actions';\n\nexport const setUniversalWalletProp = createAction(\n  'universal-wallet/SET_UNIVERSAL_WALLET_PROP',\n  (payload) => payload\n);\n","import { handleActions } from \"redux-actions\";\nimport { setUniversalWalletProp } from \"./actions\";\n\nconst initialState = {\n  name: \"UniversalWallet2020\",\n  status: \"UNLOCKED\",\n  contents: [],\n  vaultEndpoint: \"https://edv.did.ai/edvs\",\n  isSyncEnabled: true,\n  isSyncing: false,\n};\n\nexport default handleActions(\n  {\n    [setUniversalWalletProp]: (state, { payload }) => ({\n      ...state,\n      ...payload,\n    }),\n  },\n  initialState\n);\n","import { connect } from 'react-redux';\nimport * as actions from './actions';\n\nexport default connect(({ wallet }) => ({ wallet }), { ...actions });\n","import reducer from './reducer';\nimport container from './container';\n\nexport default {\n  reducer,\n  container,\n};\n","import { compose } from 'recompose';\nimport withRedux from './redux';\nimport withHandlers from './handlers';\n\nexport default compose(withRedux, withHandlers);\n","import { connectRouter } from \"connected-react-router\";\n\nimport history from \"./history\";\n\nimport wallet from \"./universal-wallet\";\n\nexport default {\n  router: connectRouter(history),\n  wallet: wallet.reducer,\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\n\nimport { darken, lighten } from \"@material-ui/core/styles/colorManipulator\";\n\nconst primaryColor = \"#594aa8\";\nconst secondaryColor = \"#fcb373\";\n\nconst font1 = '\"Rajdhani\"';\nconst font2 = '\"Roboto Condensed\"';\nconst font3 = '\"Lato\"';\n\nconst fontWeightLight = 300;\nconst fontWeightRegular = 400;\nconst fontWeightMedium = 600;\n\nclass Theme extends Component {\n  render() {\n    const { children } = this.props;\n    const theme = createMuiTheme({\n      splashImage: \"\",\n      palette: {\n        type: \"light\",\n        primary: {\n          light: lighten(primaryColor, 0.07),\n          main: primaryColor,\n          dark: darken(primaryColor, 0.07),\n        },\n        secondary: {\n          light: lighten(secondaryColor, 0.07),\n          main: secondaryColor,\n          dark: darken(secondaryColor, 0.07),\n        },\n      },\n      typography: {\n        useNextVariants: true,\n        fontSize: 16,\n        fontFamily: [font1, font2, font3].join(\",\"),\n        h1: {\n          fontFamily: font1,\n          fontWeight: fontWeightMedium,\n        },\n        h2: {\n          fontFamily: font1,\n          fontWeight: fontWeightMedium,\n        },\n        h3: {\n          fontFamily: font1,\n          fontWeight: fontWeightMedium,\n        },\n        h4: {\n          fontFamily: font2,\n          textTransform: \"uppercase\",\n          letterSpacing: \"0.1em\",\n          fontWeight: fontWeightRegular,\n        },\n        h5: {\n          fontFamily: font2,\n          textTransform: \"uppercase\",\n          letterSpacing: \"0.1em\",\n          fontWeight: fontWeightRegular,\n        },\n        h6: {\n          fontFamily: font2,\n          textTransform: \"uppercase\",\n          letterSpacing: \"0.05em\",\n          fontWeight: fontWeightRegular,\n        },\n        subtitle1: {\n          fontFamily: font1,\n          fontWeight: fontWeightRegular,\n        },\n        subtitle2: {\n          fontFamily: font2,\n          fontWeight: fontWeightRegular,\n        },\n        body1: {\n          fontFamily: font3,\n          fontWeight: fontWeightRegular,\n        },\n        body2: {\n          fontFamily: font3,\n          fontWeight: fontWeightRegular,\n        },\n        button: {\n          fontFamily: font2,\n          fontWeight: fontWeightRegular,\n        },\n        caption: {\n          fontFamily: font2,\n          fontWeight: fontWeightRegular,\n        },\n        overline: {\n          fontFamily: font2,\n          letterSpacing: \"0.15em\",\n          textTransform: \"uppercase\",\n          fontWeight: fontWeightLight,\n        },\n      },\n\n      overrides: {\n        MuiInput: {\n          // Name of the component ⚛️ / style sheet\n          input: {\n            fontFamily: font3,\n          },\n        },\n        MuiInputLabel: {\n          // Name of the component ⚛️ / style sheet\n          root: {\n            fontFamily: font2,\n          },\n        },\n        MuiAppBar: {\n          root: {\n            // boxShadow: 'none',\n          },\n        },\n        MuiButton: {\n          // Name of the rule\n          contained: {\n            boxShadow: \"none\",\n          },\n        },\n      },\n    });\n    return <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>;\n  }\n}\n\nTheme.propTypes = {\n  children: PropTypes.any.isRequired,\n};\n\nexport default Theme;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport HomeIcon from \"@material-ui/icons/Home\";\n\nimport history from \"../../store/history\";\n\nconst StyledMenu = withStyles({\n  paper: {\n    border: \"1px solid #d3d4d5\",\n  },\n})((props) => (\n  <Menu\n    elevation={0}\n    getContentAnchorEl={null}\n    anchorOrigin={{\n      vertical: \"bottom\",\n      horizontal: \"center\",\n    }}\n    transformOrigin={{\n      vertical: \"top\",\n      horizontal: \"center\",\n    }}\n    {...props}\n  />\n));\n\nconst StyledMenuItem = withStyles((theme) => ({\n  root: {\n    \"&:focus\": {\n      backgroundColor: theme.palette.primary.main,\n      \"& .MuiListItemIcon-root, & .MuiListItemText-primary\": {\n        color: theme.palette.common.white,\n      },\n    },\n  },\n}))(MenuItem);\n\nexport default function CustomizedMenus() {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div>\n      <IconButton\n        color={\"inherit\"}\n        aria-controls=\"customized-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n      >\n        <MoreVertIcon />\n      </IconButton>\n      <StyledMenu\n        id=\"customized-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <StyledMenuItem\n          onClick={() => {\n            history.push(\"/workbench\");\n          }}\n        >\n          <ListItemIcon>\n            <HomeIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText primary=\"Workbench\" />\n        </StyledMenuItem>\n      </StyledMenu>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport HttpIcon from \"@material-ui/icons/Http\";\nimport CodeIcon from \"@material-ui/icons/Code\";\nimport GavelIcon from \"@material-ui/icons/Gavel\";\nimport BuildIcon from \"@material-ui/icons/Build\";\nimport PictureAsPdfIcon from \"@material-ui/icons/PictureAsPdf\";\nimport YouTubeIcon from \"@material-ui/icons/YouTube\";\nimport history from \"../../store/history\";\n\nexport default function DrawerContent() {\n  return (\n    <List>\n      <ListItem\n        button\n        onClick={() => {\n          history.push(\"/\");\n        }}\n      >\n        <ListItemIcon>\n          <HomeIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Home\"} />\n      </ListItem>\n\n      <ListItem\n        button\n        onClick={() => {\n          history.push(\"/workbench\");\n        }}\n      >\n        <ListItemIcon>\n          <BuildIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Workbench\"} />\n      </ListItem>\n\n      <ListItem\n        button\n        onClick={() => {\n          history.push(\"/offline\");\n        }}\n      >\n        <ListItemIcon>\n          <PictureAsPdfIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"PDF Demo\"} />\n      </ListItem>\n\n      <ListItem\n        button\n        onClick={() => {\n          history.push(\"/videos\");\n        }}\n      >\n        <ListItemIcon>\n          <YouTubeIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Videos\"} />\n      </ListItem>\n\n      <ListItem\n        button\n        onClick={() => {\n          window.open(\"https://w3c-ccg.github.io/did-method-key/\");\n        }}\n      >\n        <ListItemIcon>\n          <GavelIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Spec\"} />\n      </ListItem>\n\n      <ListItem\n        button\n        onClick={() => {\n          window.open(\"https://did-key.web.app/api/docs\");\n        }}\n      >\n        <ListItemIcon>\n          <HttpIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"API\"} />\n      </ListItem>\n\n      <ListItem\n        button\n        onClick={() => {\n          window.open(\"https://github.com/transmute-industries/did-key.js\");\n        }}\n      >\n        <ListItemIcon>\n          <CodeIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Code\"} />\n      </ListItem>\n    </List>\n  );\n}\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\n\nimport Theme from \"../../components/Theme/Theme\";\nimport logo from \"../../assets/logo.svg\";\n\nimport Menu from \"./menu\";\nimport DrawerContent from \"./drawer\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    width: \"100%\",\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: \"none\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: \"nowrap\",\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: \"hidden\",\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default function MiniDrawer({ children }) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Theme>\n      <div className={classes.root}>\n        <CssBaseline />\n        <AppBar\n          position=\"fixed\"\n          className={clsx(classes.appBar, {\n            [classes.appBarShift]: open,\n          })}\n        >\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              edge=\"start\"\n              className={clsx(classes.menuButton, {\n                [classes.hide]: open,\n              })}\n            >\n              <MenuIcon />\n            </IconButton>\n            <img\n              src={logo}\n              alt={\"logo\"}\n              className={classes.title}\n              style={{ height: \"28px\" }}\n            />\n            <div style={{ flexGrow: 1 }}></div>\n            <Menu />\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          variant=\"permanent\"\n          className={clsx(classes.drawer, {\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          })}\n          classes={{\n            paper: clsx({\n              [classes.drawerOpen]: open,\n              [classes.drawerClose]: !open,\n            }),\n          }}\n        >\n          <div className={classes.toolbar}>\n            <IconButton onClick={handleDrawerClose}>\n              {theme.direction === \"rtl\" ? (\n                <ChevronRightIcon />\n              ) : (\n                <ChevronLeftIcon />\n              )}\n            </IconButton>\n          </div>\n          <Divider />\n          <DrawerContent />\n        </Drawer>\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n          {children}\n        </main>\n      </div>\n    </Theme>\n  );\n}\n","import React from \"react\";\n\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\n\nexport default function ToggleButtons({ onClick }) {\n  const [alignment, setAlignment] = React.useState(\"left\");\n\n  const handleAlignment = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  return (\n    <ToggleButtonGroup\n      value={alignment}\n      exclusive\n      onChange={handleAlignment}\n      aria-label=\"did document representation\"\n    >\n      <ToggleButton\n        value=\"left\"\n        aria-label=\"json\"\n        onClick={() => {\n          onClick(\"did+json\");\n        }}\n      >\n        did+json\n      </ToggleButton>\n      <ToggleButton\n        value=\"right\"\n        aria-label=\"jsonld\"\n        onClick={() => {\n          onClick(\"did+ld+json\");\n        }}\n      >\n        did+ld+json\n      </ToggleButton>\n      <ToggleButton value=\"justify\" aria-label=\"cbor\" disabled>\n        did+cbor\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n","import crypto from \"crypto\";\nimport * as ed25519 from \"@transmute/did-key-ed25519\";\nimport * as x25519 from \"@transmute/did-key-x25519\";\nimport * as secp256k1 from \"@transmute/did-key-secp256k1\";\nimport * as bls12381 from \"@transmute/did-key-bls12381\";\nimport * as didKeyWebCrypto from \"@transmute/did-key-web-crypto\";\n\nexport const generateEd25519 = async (keys, contentType) => {\n  let _keys = keys;\n  let ed25519Key;\n  let x25519Key;\n  if (keys !== null) {\n    ed25519Key = await ed25519.Ed25519KeyPair.from(_keys.ed25519);\n    x25519Key = await x25519.X25519KeyPair.from(_keys.x25519);\n  } else {\n    ed25519Key = await ed25519.Ed25519KeyPair.generate({\n      secureRandom: () => {\n        return crypto.randomBytes(32);\n      },\n    });\n    x25519Key = await x25519.X25519KeyPair.fromEdKeyPair(\n      await ed25519Key.toKeyPair(true)\n    );\n  }\n  _keys = {\n    ed25519:\n      contentType === \"application/did+ld+json\"\n        ? await ed25519Key.toKeyPair(true)\n        : await ed25519Key.toJsonWebKeyPair(true),\n    x25519:\n      contentType === \"application/did+ld+json\"\n        ? await x25519Key.toKeyPair(true)\n        : await x25519Key.toJsonWebKeyPair(true),\n  };\n  const { didDocument } = await ed25519.driver.resolve(\n    _keys.ed25519.controller,\n    {\n      accept: contentType,\n    }\n  );\n  return {\n    keys: _keys,\n    didDocument,\n  };\n};\n\nexport const generateX25519 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    keyPair = await x25519.X25519KeyPair.from(keys.key);\n  } else {\n    keyPair = await x25519.X25519KeyPair.generate({\n      secureRandom: () => {\n        return crypto.randomBytes(32);\n      },\n    });\n  }\n  _keys = {\n    key:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.toKeyPair(true)\n        : await keyPair.toJsonWebKeyPair(true),\n  };\n  const { didDocument } = await x25519.driver.resolve(_keys.key.controller, {\n    accept: contentType,\n  });\n  return {\n    keys: _keys,\n    didDocument,\n  };\n};\n\nexport const generateSecp256k1 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    keyPair = await secp256k1.Secp256k1KeyPair.from(keys.key);\n  } else {\n    keyPair = await secp256k1.Secp256k1KeyPair.generate({\n      secureRandom: () => {\n        return crypto.randomBytes(32);\n      },\n    });\n  }\n  _keys = {\n    key:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.toKeyPair(true)\n        : await keyPair.toJsonWebKeyPair(true),\n  };\n  const { didDocument } = await secp256k1.driver.resolve(_keys.key.controller, {\n    accept: contentType,\n  });\n  return {\n    keys: _keys,\n    didDocument,\n  };\n};\n\nexport const generateBls12381 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    keyPair = await bls12381.Bls12381G2KeyPair.from(keys.key);\n  } else {\n    keyPair = await bls12381.Bls12381G2KeyPair.generate();\n  }\n  _keys = {\n    key:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.toKeyPair(true)\n        : await keyPair.toJsonWebKeyPair(true),\n  };\n  const { didDocument } = await bls12381.driver.resolve(_keys.key.controller, {\n    accept: contentType,\n  });\n  return {\n    keys: _keys,\n    didDocument,\n  };\n};\n\nexport const generateP256 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    keyPair = await didKeyWebCrypto.KeyPair.from(keys.key);\n  } else {\n    keyPair = await didKeyWebCrypto.KeyPair.generate({\n      kty: \"EC\",\n      crvOrSize: \"P-256\",\n    });\n  }\n  _keys = {\n    key:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.toKeyPair(true)\n        : await keyPair.toJsonWebKeyPair(true),\n  };\n  const { didDocument } = await didKeyWebCrypto.driver.resolve(\n    _keys.key.controller,\n    {\n      accept: contentType,\n    }\n  );\n  return {\n    keys: _keys,\n    didDocument,\n  };\n};\n\nexport const generateP384 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    keyPair = await didKeyWebCrypto.KeyPair.from(keys.key);\n  } else {\n    keyPair = await didKeyWebCrypto.KeyPair.generate({\n      kty: \"EC\",\n      crvOrSize: \"P-384\",\n    });\n  }\n  _keys = {\n    key:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.toKeyPair(true)\n        : await keyPair.toJsonWebKeyPair(true),\n  };\n  const { didDocument } = await didKeyWebCrypto.driver.resolve(\n    _keys.key.controller,\n    {\n      accept: contentType,\n    }\n  );\n  return {\n    keys: _keys,\n    didDocument,\n  };\n};\n\nexport const generateP521 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    keyPair = await didKeyWebCrypto.KeyPair.from(keys.key);\n  } else {\n    keyPair = await didKeyWebCrypto.KeyPair.generate({\n      kty: \"EC\",\n      crvOrSize: \"P-521\",\n    });\n  }\n  _keys = {\n    key:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.toKeyPair(true)\n        : await keyPair.toJsonWebKeyPair(true),\n  };\n  const { didDocument } = await didKeyWebCrypto.driver.resolve(\n    _keys.key.controller,\n    {\n      accept: contentType,\n    }\n  );\n  return {\n    keys: _keys,\n    didDocument,\n  };\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport ContentTypeToggle from \"./ContentTypeToggle\";\nimport { DIDDocumentPreview, JSONEditor } from \"@transmute/material-did-core\";\n\nimport {\n  generateEd25519,\n  generateX25519,\n  generateSecp256k1,\n  generateBls12381,\n  generateP256,\n  generateP384,\n  generateP521,\n} from \"./util\";\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`vertical-tabpanel-${index}`}\n      aria-labelledby={`vertical-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `vertical-tab-${index}`,\n    \"aria-controls\": `vertical-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n    display: \"flex\",\n  },\n  tabs: {\n    borderRight: `1px solid ${theme.palette.divider}`,\n  },\n}));\n\nconst Panel = ({ keys, didDocument, onToggleRepresentation, onGenerate }) => {\n  return (\n    <Grid container spacing={4}>\n      <Grid item sm={12} xs={12}>\n        <Box display=\"flex\">\n          <Box flexGrow={1}>\n            <ContentTypeToggle\n              onClick={(data) => {\n                onToggleRepresentation(data);\n              }}\n            />\n          </Box>\n          <Box>\n            <Button\n              variant={\"contained\"}\n              color={\"secondary\"}\n              onClick={() => {\n                onGenerate();\n              }}\n            >\n              Generate\n            </Button>\n          </Box>\n        </Box>\n      </Grid>\n      {didDocument !== null && (\n        <Grid item sm={12} xs={12}>\n          <Typography variant={\"h6\"} gutterBottom>\n            DID Document\n          </Typography>\n          <DIDDocumentPreview didDocument={didDocument} />\n        </Grid>\n      )}\n      <Grid item sm={12} xs={12}>\n        <Typography variant={\"h6\"} gutterBottom>\n          Key\n        </Typography>\n        <JSONEditor value={JSON.stringify(keys, null, 2)} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default function VerticalTabs() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    contentType: \"application/did+json\",\n    keys: null,\n    didDocument: null,\n  });\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const options = [\n    {\n      index: 0,\n      name: \"ed25519\",\n      refresh: generateEd25519,\n    },\n    {\n      index: 1,\n      name: \"x25519\",\n      refresh: generateX25519,\n    },\n    {\n      index: 2,\n      name: \"secp256k1\",\n      refresh: generateSecp256k1,\n    },\n    {\n      index: 3,\n      name: \"bls12381 g2\",\n      refresh: generateBls12381,\n    },\n    {\n      index: 4,\n      name: \"P-256\",\n      refresh: generateP256,\n    },\n    {\n      index: 5,\n      name: \"P-384\",\n      refresh: generateP384,\n    },\n    {\n      index: 6,\n      name: \"P-521\",\n      refresh: generateP521,\n    },\n  ];\n\n  const handleGenerate = async (index) => {\n    const refresh = options[index].refresh;\n    const { keys, didDocument } = await refresh(null, state.contentType);\n    setState({\n      ...state,\n      keys,\n      didDocument,\n    });\n  };\n\n  React.useEffect(() => {\n    (async () => {\n      handleGenerate(0);\n    })();\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <Tabs\n        orientation=\"vertical\"\n        variant=\"scrollable\"\n        value={value}\n        onChange={handleChange}\n        aria-label=\"DID Types\"\n        className={classes.tabs}\n      >\n        {options.map((opt) => {\n          return (\n            <Tab\n              key={opt.index}\n              label={opt.name}\n              {...a11yProps(opt.index)}\n              onClick={() => {\n                handleGenerate(opt.index);\n              }}\n            />\n          );\n        })}\n      </Tabs>\n      {options.map((opt) => {\n        return (\n          <TabPanel\n            key={opt.index}\n            value={value}\n            index={opt.index}\n            style={{ width: \"100%\" }}\n          >\n            <Panel\n              didDocument={state.didDocument}\n              keys={state.keys}\n              onToggleRepresentation={async (contentType) => {\n                const refresh = options[opt.index].refresh;\n                const { keys, didDocument } = await refresh(\n                  state.keys,\n                  `application/${contentType}`\n                );\n                setState({\n                  contentType: `application/${contentType}`,\n                  keys,\n                  didDocument,\n                });\n              }}\n              onGenerate={async () => {\n                handleGenerate(opt.index);\n              }}\n            />\n          </TabPanel>\n        );\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Base from \"../base/base\";\n\nimport VerticalTabs from \"./VerticalTabs\";\n\nexport const Home = () => {\n  return (\n    <Base>\n      <VerticalTabs />\n    </Base>\n  );\n};\n\nHome.propTypes = {};\n","import { Home } from \"./home\";\n// import { Workbench } from \"./workbench\";\n// import { PdfDemo } from \"./pdf\";\n// import { Videos } from \"./videos\";\n\nexport const routes = [\n  { path: \"/\", exact: true, component: Home },\n  // { path: \"/workbench\", exact: true, component: Workbench },\n  // { path: \"/offline\", exact: true, component: PdfDemo },\n  // { path: \"/videos\", exact: true, component: Videos },\n];\n","import React from \"react\";\nimport { Home as Page } from \"./Home\";\n\nimport { compose } from \"redux\";\n\nimport wallet from \"../../store/universal-wallet\";\n\nconst container = compose(wallet.container);\n\nexport const Home = container((props) => {\n  return <Page {...props} />;\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Particles from 'react-particles-js';\n\nexport class ParticlesContainer extends Component {\n  render() {\n    const params = this.props.params || {\n      particles: {\n        line_linked: {\n          shadow: {\n            enable: true,\n            color: '#3CA9D1',\n            blur: 5,\n          },\n        },\n      },\n    };\n    return (\n      <React.Fragment>\n        <div\n          style={{\n            zIndex: 2,\n            position: 'absolute',\n          }}\n        >\n          {this.props.children}\n        </div>\n\n        <Particles\n          className=\"Particles\"\n          style={{\n            zIndex: 1,\n            top: 0,\n            position: 'absolute',\n          }}\n          params={params}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nParticlesContainer.propTypes = {\n  params: PropTypes.object,\n  children: PropTypes.any,\n};\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Theme from '../../components/Theme/Theme';\n\nimport { ParticlesContainer } from '../../components/ParticlesContainer';\n\nimport './404.css';\n\nexport class NotFound extends Component {\n  render() {\n    return (\n      <Theme>\n        <div className=\"notFound\">\n          <ParticlesContainer>\n            <div className=\"copy\" style={{ padding: '32px' }}>\n              <Typography variant=\"h1\">404</Typography>\n              <Typography>\n                {window.location.pathname} page not found.\n              </Typography>\n              <br />\n              <Button\n                variant=\"contained\"\n                color={'secondary'}\n                onClick={() => {\n                  window.location.href = '/workbench';\n                }}\n              >\n                Go Home\n              </Button>\n            </div>\n          </ParticlesContainer>\n        </div>\n      </Theme>\n    );\n  }\n}\n\nexport default NotFound;\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport storage from \"redux-persist/lib/storage\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport withReduxEnhancer from \"addon-redux/enhancer\";\n\nimport rootReducer from \".\";\nimport history from \"./history\";\n\nexport default (appReducers = {}) => {\n  // Persistance configuration\n  const persistConfig = {\n    key: \"root\",\n    whitelist: [\"wallet\"],\n    storage,\n  };\n\n  const middlewares = [thunk, routerMiddleware(history)];\n\n  // TODO: refactor for production\n  if (process.env.NODE_ENV !== \"production\") {\n    // const reduxListener = createStorybookListener();\n    // middlewares.push(reduxListener);\n  }\n\n  // Store.\n  const store = createStore(\n    persistReducer(\n      persistConfig,\n      combineReducers({ ...rootReducer, ...appReducers })\n    ),\n    composeWithDevTools(\n      compose(applyMiddleware(...middlewares), withReduxEnhancer)\n    )\n  );\n\n  // Persistor.\n  const persistor = persistStore(store);\n  return {\n    store,\n    persistor,\n    history,\n  };\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport { Switch, Route } from \"react-router-dom\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/lib/integration/react\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport createStore from \"./store/create\";\n\nimport { routes } from \"./pages\";\n\nimport { NotFound } from \"./pages/errors/404\";\n\nconst { store, persistor, history } = createStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor}>\n      <ConnectedRouter history={history}>\n        <Switch>\n          {routes.map(({ exact, path, component }) => (\n            <Route key={path} exact={exact} path={path} component={component} />\n          ))}\n          <Route path=\"*\" render={() => <NotFound />} />\n        </Switch>\n      </ConnectedRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nconsole.log(\n  `\nHello Developer 🧙‍♂️! \nCheckout our corporate website if you are interested in working with us: \n✨ https://www.transmute.industries/\n`\n);\n","// See https://github.com/multiformats/multicodec/pull/190\n\nexport const SUPPORTED_EC = [\n  'P-256',\n  'P-384',\n  'P-521',\n  // not currently supported by web crypto\n  // 'Ed448', 'X448'\n];\n\nexport const multicodecPrefix = 0x12;\n\nexport const crvToMulticodecPrefix: any = {\n  'P-256': 0x00,\n  'P-384': 0x01,\n  'P-521': 0x02,\n  // Ed448: 0x03,\n  // X448: 0x04,\n};\n\nexport const multicodecToJwkType: any = {\n  0x00: { kty: 'EC', crv: 'P-256' },\n  0x01: { kty: 'EC', crv: 'P-384' },\n  0x02: { kty: 'EC', crv: 'P-521' },\n  // 0x03: { kty: 'OKP', crv: 'Ed448' },\n  // 0x04: { kty: 'OKP', crv: 'X448' },\n};\n\nexport const crvToJwsAlg: any = {\n  'P-256': 'ES256',\n  'P-384': 'ES384',\n  'P-521': 'ES521',\n};\n\nexport const crvToJwsHashAlg: any = {\n  'P-256': 'SHA-256',\n  'P-384': 'SHA-384',\n  'P-521': 'SHA-512',\n};\n","import { Crypto } from 'node-webcrypto-ossl';\n\nfunction isNodejs() {\n  return (\n    typeof process === 'object' &&\n    typeof process.versions === 'object' &&\n    typeof process.versions.node !== 'undefined' &&\n    typeof window !== undefined\n  );\n}\n\nlet crypto: Crypto;\n\nif (isNodejs()) {\n  crypto = new Crypto();\n} else {\n  crypto = window.crypto as Crypto;\n}\n\nexport default crypto;\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\n\nimport { types } from '@transmute/did-key-common';\n\nexport const jwkToBase58 = (jwk: any): types.LinkedDataKeyPair => {\n  let keypair: any = {};\n  if (jwk.d) {\n    keypair.privateKeyBase58 = bs58.encode(\n      Buffer.concat([base64url.toBuffer(jwk.d)])\n    );\n  }\n  if (jwk.x) {\n    keypair.publicKeyBase58 = bs58.encode(\n      Buffer.concat([base64url.toBuffer(jwk.x)])\n    );\n  }\n  if (jwk.x && jwk.y) {\n    keypair.publicKeyBase58 = bs58.encode(\n      Buffer.concat([base64url.toBuffer(jwk.x), base64url.toBuffer(jwk.y)])\n    );\n  }\n\n  return keypair;\n};\n","export const fingerprintToDid = (fingerprint: string, methodName = 'key') => {\n  return `did:${methodName}:${fingerprint}`;\n};\n","import { types } from '@transmute/did-key-common';\n\nimport { jwkToBase58 } from './jwkToBase58';\nimport { getMultibaseFromJwk } from './getMultibaseFromJwk';\nimport { fingerprintToDid } from './fingerprintToDid';\n\nexport const fromJwk = (jwk: any): types.LinkedDataKeyPair => {\n  const id = getMultibaseFromJwk(jwk);\n  const controller = fingerprintToDid(id);\n  return {\n    id: `#${id}`,\n    type: 'JsonWebKey2020',\n    controller,\n    ...(jwkToBase58(jwk) as any),\n  };\n};\n","import bs58 from 'bs58';\n\nimport { crvToMulticodecPrefix } from '../constants';\nimport { jwkToBase58 } from './jwkToBase58';\n\nexport const getMultibaseFromJwk = (publicKeyJwk: any): string => {\n  const { publicKeyBase58 } = jwkToBase58(publicKeyJwk);\n  const publicKeyBytes = bs58.decode(publicKeyBase58);\n  const prefix = crvToMulticodecPrefix[publicKeyJwk.crv];\n  const buffer = new Uint8Array(3 + publicKeyBytes.length);\n  // https://github.com/multiformats/multicodec/pull/190\n  buffer[0] = 0x12;\n  buffer[1] = prefix;\n  buffer[2] = 0x01;\n  buffer.set(publicKeyBytes, 3);\n  // prefix with `z` to indicate multi-base base58btc encoding\n  return `z${bs58.encode(buffer)}`;\n};\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\n\nimport { types } from '@transmute/did-key-common';\n\nexport const base58KeyPairToJwk = (\n  keypair: types.LinkedDataKeyPair\n): object => {\n  const publicKeyBuffer = bs58.decode(keypair.publicKeyBase58);\n\n  const x = base64url.encode(\n    publicKeyBuffer.slice(0, publicKeyBuffer.length / 2)\n  );\n\n  const y = base64url.encode(publicKeyBuffer.slice(publicKeyBuffer.length / 2));\n\n  let jwk: any = { x, y };\n\n  if (keypair.privateKeyBase58) {\n    jwk.d = base64url.encode(bs58.decode(keypair.privateKeyBase58));\n  }\n\n  return jwk;\n};\n","import crypto from '../crypto';\nimport { Jws } from '@transmute/did-key-common';\n\nimport { crvToJwsHashAlg } from '../constants';\n\nconst { createJws, verifyJws, createDetachedJws, verifyDetachedJws } = Jws;\n\nexport { createJws, verifyJws, createDetachedJws, verifyDetachedJws };\n\nexport const privateKeyToSigner = async (privateKeyJwk: any) => {\n  const privateKey = await crypto.subtle.importKey(\n    'jwk',\n    privateKeyJwk,\n    {\n      name: 'ECDSA',\n      namedCurve: privateKeyJwk.crv,\n    },\n    true,\n    ['sign']\n  );\n\n  return {\n    sign: async (data: Buffer) => {\n      const signature = await crypto.subtle.sign(\n        {\n          name: 'ECDSA',\n          hash: { name: crvToJwsHashAlg[privateKeyJwk.crv] },\n        },\n        privateKey,\n        data\n      );\n      return signature as Buffer;\n    },\n  };\n};\n\nexport const publicKeyToVerifier = async (publicKeyJwk: any) => {\n  const publicKey = await crypto.subtle.importKey(\n    'jwk',\n    publicKeyJwk,\n    {\n      name: 'ECDSA',\n      namedCurve: publicKeyJwk.crv,\n    },\n    true,\n    ['verify']\n  );\n\n  return {\n    verify: async (toBeVerified: Buffer, signature: Buffer) => {\n      const verified = await crypto.subtle.verify(\n        {\n          name: 'ECDSA',\n          hash: { name: crvToJwsHashAlg[publicKeyJwk.crv] },\n        },\n        publicKey,\n        signature,\n        toBeVerified\n      );\n      return verified;\n    },\n  };\n};\n","import bs58 from 'bs58';\nimport { multicodecToJwkType } from '../constants';\nexport const getJwkTypeFromMultibase = (fingerprint: string) => {\n  const buffer = bs58.decode(fingerprint.substring(1));\n\n  if (buffer[0] !== 0x12) {\n    throw new Error(`Unsupported multibase ${buffer[0].toString(16)}`);\n  }\n\n  const type = multicodecToJwkType[buffer[1]];\n  if (!type) {\n    throw new Error(\n      `Unsupported multibase ${buffer[0].toString(16)} ${buffer[1].toString(\n        16\n      )}`\n    );\n  }\n  return type;\n};\n","import { types } from '@transmute/did-key-common';\n\nimport { base58KeyPairToJwk } from './base58KeyPairToJwk';\nimport { getJwkTypeFromMultibase } from './getJwkTypeFromMultibase';\nexport const toJwkPair = (\n  keypair: types.LinkedDataKeyPair\n): types.JsonWebKeyPair => {\n  // console.log('toJwkPair', keypair);\n  const id = keypair.id.substring(keypair.id.indexOf('#') + 1);\n  let _keypair: any = {\n    id: keypair.id,\n    type: 'JsonWebKey2020',\n    controller: keypair.controller,\n  };\n\n  _keypair.publicKeyJwk = {\n    ...getJwkTypeFromMultibase(id),\n    ...base58KeyPairToJwk({\n      publicKeyBase58: keypair.publicKeyBase58,\n    } as any),\n  };\n\n  if (keypair.privateKeyBase58) {\n    _keypair.privateKeyJwk = {\n      ...getJwkTypeFromMultibase(id),\n      ...base58KeyPairToJwk({\n        publicKeyBase58: keypair.publicKeyBase58,\n        privateKeyBase58: keypair.privateKeyBase58,\n      } as any),\n    };\n  }\n\n  return _keypair;\n};\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\n\nimport { generate } from './functions/generate';\nimport { fromJwk } from './functions/fromJwk';\n\nimport { deriveSecret } from './Jwe';\nimport { privateKeyToSigner, publicKeyToVerifier } from './Jws';\nimport { toJwkPair } from './functions/toJwkPair';\nimport { fingerprintToDid } from './functions/fingerprintToDid';\nimport { getJwkTypeFromMultibase } from './functions/getJwkTypeFromMultibase';\n\nimport { types } from '@transmute/did-key-common';\n\nimport {\n  getEpkGenerator,\n  deriveKey,\n  KeyEncryptionKey,\n} from '@transmute/did-key-cipher';\n\n/* class decorator */\nfunction staticImplements<T>() {\n  return <U extends T>(constructor: U) => {\n    return constructor;\n  };\n}\n\nconst KEY_TYPE = 'JsonWebKey2020';\n\n@staticImplements<types.KeyAgreementKeyPairClass>()\nexport class KeyPair implements types.KeyAgreementKeyPairInstance {\n  public static JWE_ALG: types.ECDH_ES_A256KW = 'ECDH-ES+A256KW';\n\n  static generate = async (options?: any) => {\n    const { privateKeyJwk } = await generate(options);\n    return new KeyPair({ ...fromJwk(privateKeyJwk) });\n  };\n\n  static from = (options?: any) => {\n    return new KeyPair({ ...options });\n  };\n\n  static fromFingerprint = async ({ fingerprint }: any) => {\n    const data = getJwkTypeFromMultibase(fingerprint);\n    if (data.kty) {\n      const publicKeyBytes = bs58.decode(fingerprint.substring(1));\n\n      const publicKeyBase58 = bs58.encode(publicKeyBytes.slice(3));\n\n      return new KeyPair({\n        id: '#' + fingerprint,\n        controller: fingerprintToDid(fingerprint),\n        type: 'JsonWebKey2020',\n        publicKeyBase58,\n      });\n    }\n    throw new Error('Cannot create key from fingerprint ' + fingerprint);\n  };\n\n  static fingerprintFromPublicKey(\n    keypair: types.KeyPairJwk | types.KeyPairBase58\n  ) {\n    let kp = KeyPair.from(keypair);\n    return kp.id.substring(1);\n  }\n\n  static async generateEphemeralKeyPair(\n    epkArgs: any\n  ): Promise<types.EpkResult> {\n    return getEpkGenerator(KeyPair, epkArgs)();\n  }\n\n  static async kekFromEphemeralPeer({\n    keyAgreementKey,\n    epk,\n  }: types.KeyEncryptionKeyFromEphemeralPublicKeyOptions) {\n    if (!(epk && typeof epk === 'object')) {\n      throw new TypeError('\"epk\" must be an object.');\n    }\n\n    // convert to LD key for Web KMS\n    const ephemeralPublicKey = new KeyPair({\n      publicKeyJwk: epk,\n    } as any);\n\n    // safe to use IDs like in rfc7518 or does\n    // https://tools.ietf.org/html/rfc7748#section-7 pose any issues?\n\n    // \"Party U Info\"\n    const producerInfo = ephemeralPublicKey.publicKeyBuffer;\n    // \"Party V Info\"\n    const consumerInfo = Buffer.from(keyAgreementKey.id);\n    // converts keys again....\n    // base58 encoding should only be used at the network / serialization boundary.\n    const secret = await (keyAgreementKey as types.KeyAgreementKeyPairInstance).deriveSecret(\n      {\n        publicKey: ephemeralPublicKey.toJsonWebKeyPair(),\n      } as any\n    );\n    const keyData = await deriveKey({ secret, producerInfo, consumerInfo });\n    return {\n      kek: await KeyEncryptionKey.createKek({ keyData }),\n    };\n  }\n\n  static async kekFromStaticPeer({\n    ephemeralKeyPair,\n    staticPublicKey,\n  }: types.KeyEncryptionKeyFromStaticPublicKeyOptions) {\n    if (staticPublicKey.type !== KEY_TYPE) {\n      throw new Error(`\"staticPublicKey.type\" must be \"${KEY_TYPE}\".`);\n    }\n\n    const epkPair = await KeyPair.from(ephemeralKeyPair.keypair);\n\n    // \"Party U Info\"\n    const producerInfo = epkPair.publicKeyBuffer;\n    // \"Party V Info\"\n    const consumerInfo = Buffer.from(staticPublicKey.id);\n\n    const secret = await epkPair.deriveSecret({\n      publicKey: staticPublicKey,\n    } as any);\n    const keyData = await deriveKey({ secret, producerInfo, consumerInfo });\n    return {\n      kek: await KeyEncryptionKey.createKek({ keyData }),\n      epk: ephemeralKeyPair.epk,\n      apu: base64url.encode(producerInfo),\n      apv: base64url.encode(consumerInfo as any),\n    };\n  }\n\n  public id: string;\n  public type: string;\n  public controller: string;\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  constructor(options: any) {\n    this.id = options.id;\n    this.type = options.type || 'JsonWebKey2020';\n\n    this.controller = options.controller;\n    if (options.publicKeyBase58) {\n      this.publicKeyBuffer = bs58.decode(options.publicKeyBase58);\n    } else if (options.publicKeyJwk) {\n      const args = fromJwk(options.publicKeyJwk);\n      this.publicKeyBuffer = bs58.decode(args.publicKeyBase58);\n      this.id = options.id || args.id;\n      this.controller = args.controller;\n    } else {\n      throw new Error('publicKeyJwk or publicKeyBase58 is required.');\n    }\n\n    if (options.privateKeyBase58) {\n      this.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n    } else if (options.privateKeyJwk) {\n      const { privateKeyBase58 } = fromJwk(options.privateKeyJwk);\n      this.privateKeyBuffer = bs58.decode(privateKeyBase58);\n    }\n  }\n\n  fingerprint() {\n    const { id } = this.toJsonWebKeyPair();\n    return id.substring(1);\n  }\n\n  toKeyPair(exportPrivateKey = false) {\n    let options: any = {\n      id: this.id,\n      type: 'UnsupportedVerificationMethod2020',\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n    if (exportPrivateKey) {\n      options.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return options;\n  }\n\n  toJsonWebKeyPair(exportPrivateKey = false) {\n    const options = this.toKeyPair(exportPrivateKey);\n    return toJwkPair(options);\n  }\n\n  async signer() {\n    const { privateKeyJwk } = this.toJsonWebKeyPair(true);\n    return privateKeyToSigner(privateKeyJwk);\n  }\n\n  async verifier() {\n    const { publicKeyJwk } = this.toJsonWebKeyPair();\n    return publicKeyToVerifier(publicKeyJwk);\n  }\n\n  deriveSecret(options: types.DeriveSecretOptions) {\n    const { privateKeyJwk } = this.toJsonWebKeyPair(true);\n    let publicKeyJwk;\n\n    if ((options.publicKey as any).publicKeyJwk) {\n      publicKeyJwk = (options.publicKey as any).publicKeyJwk;\n    } else if ((options.publicKey as any).publicKeyBase58) {\n      ({ publicKeyJwk } = toJwkPair(options.publicKey as any));\n    } else {\n      throw new Error(\n        'Cannot deriveSecret from remote... publicKeyJwk or publicKeyBase58 must be present.'\n      );\n    }\n    return deriveSecret(privateKeyJwk, publicKeyJwk);\n  }\n}\n","import crypto from '../crypto';\n\nexport const deriveSecret = async (\n  privateKeyJwk: any,\n  publicKeyJwk: any\n): Promise<Uint8Array> => {\n  // console.log(privateKeyJwk, publicKeyJwk);\n  const privateKey = await crypto.subtle.importKey(\n    'jwk',\n    privateKeyJwk,\n    {\n      name: 'ECDH',\n      namedCurve: privateKeyJwk.crv,\n    },\n    true,\n    ['deriveBits']\n  );\n  const publicKey = await crypto.subtle.importKey(\n    'jwk',\n    publicKeyJwk,\n    {\n      name: 'ECDH',\n      namedCurve: publicKeyJwk.crv,\n    },\n    true,\n    ['deriveBits']\n  );\n  const result = await crypto.subtle.deriveBits(\n    {\n      name: 'ECDH',\n      public: publicKey,\n    },\n    privateKey,\n    256\n  );\n  return new Uint8Array(result);\n};\n","import { SUPPORTED_EC } from '../constants';\nimport crypto from '../crypto';\n\nexport interface GenerateOptions {\n  kty: string;\n  crvOrSize: string;\n}\n\nexport const generate = async (\n  options: GenerateOptions = { kty: 'EC', crvOrSize: 'P-256' }\n) => {\n  if (options.kty === 'EC' && SUPPORTED_EC.indexOf(options.crvOrSize) !== -1) {\n    let kp = await crypto.subtle.generateKey(\n      {\n        name: 'ECDSA',\n        namedCurve: options.crvOrSize,\n      },\n      true,\n      ['sign', 'verify']\n    );\n    const jwk = await crypto.subtle.exportKey('jwk', kp.privateKey);\n    return {\n      publicKeyJwk: {\n        kty: jwk.kty,\n        crv: jwk.crv,\n        x: jwk.x,\n        y: jwk.y,\n      },\n      privateKeyJwk: {\n        kty: jwk.kty,\n        crv: jwk.crv,\n        x: jwk.x,\n        y: jwk.y,\n        d: jwk.d,\n      },\n    };\n  }\n\n  throw new Error(\n    `Generate does not support ${options.kty} and ${options.crvOrSize}`\n  );\n};\n","import keyto from '@trust/keyto';\nimport base64url from 'base64url';\nimport crypto from 'crypto';\nimport bs58 from 'bs58';\nimport secp256k1 from 'secp256k1';\n\nimport canonicalize from 'canonicalize';\n\nconst compressedHexEncodedPublicKeyLength = 66;\n\n/** Secp256k1 Private Key  */\nexport interface ISecp256k1PrivateKeyJwk {\n  /** key type */\n  kty: string;\n\n  /** curve */\n  crv: string;\n\n  /** private point */\n  d: string;\n\n  /** public point */\n  x: string;\n\n  /** public point */\n  y: string;\n\n  /** key id */\n  kid: string;\n}\n\n/** Secp256k1 Public Key  */\nexport interface ISecp256k1PublicKeyJwk {\n  /** key type */\n  kty: string;\n\n  /** curve */\n  crv: string;\n\n  /** public point */\n  x: string;\n\n  /** public point */\n  y: string;\n\n  /** key id */\n  kid: string;\n}\n\n/**\n * Example\n * ```js\n * {\n *  kty: 'EC',\n *  crv: 'secp256k1',\n *  d: 'rhYFsBPF9q3-uZThy7B3c4LDF_8wnozFUAEm5LLC4Zw',\n *  x: 'dWCvM4fTdeM0KmloF57zxtBPXTOythHPMm1HCLrdd3A',\n *  y: '36uMVGM7hnw-N6GnjFcihWE3SkrhMLzzLCdPMXPEXlA',\n *  kid: 'JUvpllMEYUZ2joO59UNui_XYDqxVqiFLLAJ8klWuPBw'\n * }\n * ```\n * See [rfc7638](https://tools.ietf.org/html/rfc7638) for more details on Jwk.\n */\nexport const getKid = (\n  jwk: ISecp256k1PrivateKeyJwk | ISecp256k1PublicKeyJwk\n) => {\n  const copy = { ...jwk } as any;\n  delete copy.d;\n  delete copy.kid;\n  delete copy.alg;\n  const digest = crypto\n    .createHash('sha256')\n    .update(canonicalize(copy))\n    .digest();\n\n  return base64url.encode(Buffer.from(digest));\n};\n\n/** convert compressed hex encoded private key to jwk */\nexport const privateKeyJwkFromPrivateKeyHex = (privateKeyHex: string) => {\n  const jwk = {\n    ...keyto.from(privateKeyHex, 'blk').toJwk('private'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert compressed hex encoded public key to jwk */\nexport const publicKeyJwkFromPublicKeyHex = (publicKeyHex: string) => {\n  let key = publicKeyHex;\n  if (publicKeyHex.length === compressedHexEncodedPublicKeyLength) {\n    const keyBin = secp256k1.publicKeyConvert(\n      Buffer.from(publicKeyHex, 'hex'),\n      false\n    );\n    key = Buffer.from(keyBin).toString('hex');\n  }\n  const jwk = {\n    ...keyto.from(key, 'blk').toJwk('public'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert pem encoded private key to jwk */\nexport const privateKeyJwkFromPrivateKeyPem = (privateKeyPem: string) => {\n  const jwk = {\n    ...keyto.from(privateKeyPem, 'pem').toJwk('private'),\n    crv: 'secp256k1',\n  };\n  // console.log(jwk);\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert pem encoded public key to jwk */\nexport const publicKeyJwkFromPublicKeyPem = (publicKeyPem: string) => {\n  const jwk = {\n    ...keyto.from(publicKeyPem, 'pem').toJwk('public'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert jwk to hex encoded private key */\nexport const privateKeyHexFromJwk = (jwk: ISecp256k1PrivateKeyJwk) =>\n  keyto\n    .from(\n      {\n        ...jwk,\n        crv: 'K-256',\n      },\n      'jwk'\n    )\n    .toString('blk', 'private');\n\n/** convert jwk to hex encoded public key */\nexport const publicKeyHexFromJwk = (jwk: ISecp256k1PublicKeyJwk) => {\n  const uncompressedPublicKey = keyto\n    .from(\n      {\n        ...jwk,\n        crv: 'K-256',\n      },\n      'jwk'\n    )\n    .toString('blk', 'public');\n\n  const compressed = secp256k1.publicKeyConvert(\n    Buffer.from(uncompressedPublicKey, 'hex'),\n    true\n  );\n  return Buffer.from(compressed).toString('hex');\n};\n\n/** convert jwk to binary encoded private key */\nexport const privateKeyUInt8ArrayFromJwk = (jwk: ISecp256k1PrivateKeyJwk) => {\n  const privateKeyHex = privateKeyHexFromJwk(jwk);\n  return Buffer.from(privateKeyHex, 'hex');\n};\n\n/** convert jwk to binary encoded public key */\nexport const publicKeyUInt8ArrayFromJwk = (jwk: ISecp256k1PublicKeyJwk) => {\n  const publicKeyHex = publicKeyHexFromJwk(jwk);\n  return Buffer.from(publicKeyHex, 'hex');\n};\n\n/** convert publicKeyHex to base58 */\nexport const publicKeyBase58FromPublicKeyHex = (publicKeyHex: string) => {\n  return bs58.encode(Buffer.from(publicKeyHex, 'hex'));\n};\n\n/** convert publicKeyHex to base58 */\nexport const privateKeyBase58FromPrivateKeyHex = (privateKeyHex: string) => {\n  return bs58.encode(Buffer.from(privateKeyHex, 'hex'));\n};\n\nexport const privateKeyUInt8ArrayFromPrivateKeyBase58 = (\n  privateKeyBase58: string\n) => {\n  return bs58.decode(privateKeyBase58);\n};\n\nexport const publicKeyUInt8ArrayFromPublicKeyBase58 = (\n  publicKeyBase58: string\n) => {\n  return bs58.decode(publicKeyBase58);\n};\n\nexport const publicKeyHexFromPrivateKeyHex = (privateKeyHex: string) => {\n  const publicKey = secp256k1.publicKeyCreate(\n    new Uint8Array(Buffer.from(privateKeyHex, 'hex'))\n  );\n  return Buffer.from(publicKey).toString('hex');\n};\n","import bs58 from 'bs58';\n\nimport {\n  convertPublicKeyToX25519,\n  convertSecretKeyToX25519,\n} from '@stablelib/ed25519';\nimport * as x25519 from '@stablelib/x25519';\nimport * as keyUtils from './keyUtils';\n\nimport base64url from 'base64url';\nimport crypto from 'crypto';\n\nimport * as common from '@transmute/did-key-common';\n\nimport {\n  deriveKey,\n  getEpkGenerator,\n  KeyEncryptionKey,\n} from '@transmute/did-key-cipher';\n\nconst KEY_TYPE = 'X25519KeyAgreementKey2019';\n\n@common.types.staticImplements<common.types.KeyAgreementKeyPairClass>()\nexport class X25519KeyPair implements common.types.KeyPairInstance {\n  public id: string;\n  public type: string;\n  public controller: string;\n\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  public static JWE_ALG: common.types.ECDH_ES_A256KW = 'ECDH-ES+A256KW';\n\n  static fingerprintFromPublicKey(\n    keypair: common.types.KeyPairJwk | common.types.KeyPairBase58\n  ) {\n    let pubkeyBytes: any;\n\n    if ((keypair as any).publicKeyBase58) {\n      pubkeyBytes = bs58.decode(\n        (keypair as common.types.KeyPairBase58).publicKeyBase58\n      );\n    }\n\n    if ((keypair as any).publicKeyJwk) {\n      pubkeyBytes = bs58.decode(\n        keyUtils.publicKeyBase58FromPublicKeyJwk(\n          (keypair as common.types.KeyPairJwk).publicKeyJwk\n        )\n      );\n    }\n\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L80\n\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    buffer[0] = 0xec;\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${bs58.encode(buffer)}`;\n  }\n\n  static async generate(options: common.types.KeyPairGenerateOptions) {\n    let key;\n\n    key = x25519.generateKeyPair({\n      isAvailable: true,\n      randomBytes: options.secureRandom,\n    });\n\n    if (!key) {\n      throw new Error('options.seed or options.secureRandom is required.');\n    }\n\n    const publicKeyBase58 = bs58.encode(key.publicKey);\n    const privateKeyBase58 = bs58.encode(key.secretKey);\n\n    const did = `did:key:${X25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    const keyId = `#${X25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    return new X25519KeyPair({\n      id: keyId,\n      controller: did,\n      publicKeyBase58,\n      privateKeyBase58,\n    } as common.types.KeyPairBase58);\n  }\n\n  static async generateEphemeralKeyPair(): Promise<common.types.EpkResult> {\n    return getEpkGenerator(X25519KeyPair, {\n      secureRandom: () => {\n        return crypto.randomBytes(32);\n      },\n    })();\n  }\n\n  static async kekFromEphemeralPeer({\n    keyAgreementKey,\n    epk,\n  }: common.types.KeyEncryptionKeyFromEphemeralPublicKeyOptions) {\n    if (!(epk && typeof epk === 'object')) {\n      throw new TypeError('\"epk\" must be an object.');\n    }\n\n    // decode public key material\n    const publicKey = base64url.toBuffer(epk.x);\n\n    // convert to LD key for Web KMS\n    const ephemeralPublicKey = {\n      type: KEY_TYPE,\n      publicKeyBase58: bs58.encode(publicKey),\n    };\n\n    // safe to use IDs like in rfc7518 or does\n    // https://tools.ietf.org/html/rfc7748#section-7 pose any issues?\n\n    // \"Party U Info\"\n    const producerInfo = publicKey;\n    // \"Party V Info\"\n    const consumerInfo = Buffer.from(keyAgreementKey.id);\n    // converts keys again....\n    // base58 encoding should only be used at the network / serialization boundary.\n    const secret = await (keyAgreementKey as common.types.KeyAgreementKeyPairInstance).deriveSecret(\n      {\n        publicKey: ephemeralPublicKey,\n      } as any\n    );\n    const keyData = await deriveKey({ secret, producerInfo, consumerInfo });\n    return {\n      kek: await KeyEncryptionKey.createKek({ keyData }),\n    };\n  }\n\n  static async kekFromStaticPeer({\n    ephemeralKeyPair,\n    staticPublicKey,\n  }: common.types.KeyEncryptionKeyFromStaticPublicKeyOptions) {\n    // TODO: consider accepting JWK format for `staticPublicKey` not just LD key\n    if (\n      !(\n        staticPublicKey.type === 'X25519KeyAgreementKey2019' ||\n        staticPublicKey.type === 'JsonWebKey2020'\n      )\n    ) {\n      throw new Error(\n        `\"staticPublicKey.type\" must be \"X25519KeyAgreementKey2019\".`\n      );\n    }\n\n    const epkPair = await X25519KeyPair.from(ephemeralKeyPair.keypair);\n\n    // \"Party U Info\"\n    const producerInfo = epkPair.publicKeyBuffer;\n    // \"Party V Info\"\n    const consumerInfo = Buffer.from(staticPublicKey.id);\n\n    const secret = await epkPair.deriveSecret({\n      publicKey: staticPublicKey,\n    } as any);\n    const keyData = await deriveKey({ secret, producerInfo, consumerInfo });\n    return {\n      kek: await KeyEncryptionKey.createKek({ keyData }),\n      epk: ephemeralKeyPair.epk,\n      apu: base64url.encode(producerInfo),\n      apv: base64url.encode(consumerInfo as any),\n    };\n  }\n\n  static fromFingerprint({ fingerprint }: any) {\n    // skip leading `z` that indicates base58 encoding\n    const buffer = bs58.decode(fingerprint.substr(1));\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L80\n    if (buffer[0] === 0xec && buffer[1] === 0x01) {\n      const publicKeyBase58 = bs58.encode(buffer.slice(2));\n      const did = `did:key:${X25519KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      const keyId = `#${X25519KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      return new X25519KeyPair({\n        id: keyId,\n        controller: did,\n        publicKeyBase58,\n      } as common.types.KeyPairBase58);\n    }\n\n    throw new Error(`Unsupported Fingerprint Type: ${fingerprint}`);\n  }\n\n  static fromEdKeyPair(ed25519KeyPair: common.types.KeyPairBase58) {\n    let publicKeyBase58;\n    let privateKeyBase58;\n\n    if (ed25519KeyPair.publicKeyBase58) {\n      publicKeyBase58 = bs58.encode(\n        convertPublicKeyToX25519(bs58.decode(ed25519KeyPair.publicKeyBase58))\n      );\n    }\n\n    if (ed25519KeyPair.privateKeyBase58) {\n      privateKeyBase58 = bs58.encode(\n        convertSecretKeyToX25519(bs58.decode(ed25519KeyPair.privateKeyBase58))\n      );\n    }\n\n    return new X25519KeyPair({\n      controller: ed25519KeyPair.controller,\n      publicKeyBase58,\n      privateKeyBase58,\n    } as common.types.KeyPairBase58);\n  }\n\n  static from(options: common.types.KeyPairBase58 | common.types.KeyPairJwk) {\n    let privateKeyBase58;\n    let publicKeyBase58;\n\n    if ((options as common.types.KeyPairBase58).publicKeyBase58) {\n      publicKeyBase58 = (options as common.types.KeyPairBase58).publicKeyBase58;\n    }\n\n    if ((options as common.types.KeyPairBase58).privateKeyBase58) {\n      privateKeyBase58 = (options as common.types.KeyPairBase58)\n        .privateKeyBase58;\n    }\n\n    if ((options as common.types.KeyPairJwk).privateKeyJwk) {\n      privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyJwk(\n        (options as common.types.KeyPairJwk).privateKeyJwk\n      );\n    }\n\n    if ((options as common.types.KeyPairJwk).publicKeyJwk) {\n      publicKeyBase58 = keyUtils.publicKeyBase58FromPublicKeyJwk(\n        (options as common.types.KeyPairJwk).publicKeyJwk\n      );\n    }\n\n    return new X25519KeyPair({\n      ...options,\n      privateKeyBase58,\n      publicKeyBase58,\n    });\n  }\n\n  constructor(options: common.types.KeyPairJwk | common.types.KeyPairBase58) {\n    this.type = 'X25519KeyAgreementKey2019';\n    this.id = options.id;\n    this.controller = options.controller;\n\n    if ((options as common.types.KeyPairBase58).publicKeyBase58) {\n      this.publicKeyBuffer = Buffer.from(\n        bs58.decode((options as common.types.KeyPairBase58).publicKeyBase58)\n      );\n    } else if ((options as common.types.JsonWebKeyPair).publicKeyJwk) {\n      this.publicKeyBuffer = Buffer.from(\n        bs58.decode(\n          keyUtils.publicKeyBase58FromPublicKeyJwk(\n            (options as common.types.JsonWebKeyPair).publicKeyJwk\n          )\n        )\n      );\n    } else {\n      throw new Error(\n        'X25519KeyPair requires publicKeyBase58 or publicKeyJwk, received none.'\n      );\n    }\n\n    if ((options as common.types.KeyPairBase58).privateKeyBase58) {\n      this.privateKeyBuffer = Buffer.from(\n        bs58.decode((options as common.types.KeyPairBase58).privateKeyBase58)\n      );\n    }\n\n    if ((options as common.types.JsonWebKeyPair).privateKeyJwk) {\n      this.privateKeyBuffer = Buffer.from(\n        bs58.decode(\n          keyUtils.privateKeyBase58FromPrivateKeyJwk(\n            (options as common.types.JsonWebKeyPair).privateKeyJwk\n          )\n        )\n      );\n    }\n\n    if (!this.id) {\n      this.id = `#${this.fingerprint()}`;\n    }\n  }\n\n  fingerprint() {\n    return X25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    } as any);\n  }\n\n  verifyFingerprint(fingerprint: any) {\n    // fingerprint should have `z` prefix indicating\n    // that it's multi-base encoded\n    if (!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      return {\n        error: new Error('`fingerprint` must be a multibase encoded string.'),\n        valid: false,\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = bs58.decode(fingerprint.slice(1));\n    } catch (e) {\n      return { error: e, valid: false };\n    }\n    let publicKeyBuffer = this.publicKeyBuffer;\n\n    // validate the first two multicodec bytes 0xec01\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L80\n    const valid =\n      fingerprintBuffer.slice(0, 2).toString('hex') === 'ec01' &&\n      publicKeyBuffer.equals(fingerprintBuffer.slice(2));\n    if (!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false,\n      };\n    }\n    return { valid };\n  }\n\n  toKeyPair(_private: boolean = false): common.types.LinkedDataKeyPair {\n    let kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n    if (_private) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(_private: boolean = false): common.types.JsonWebKeyPair {\n    let kp: any = {\n      id: this.id,\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: this.toJwk(),\n    };\n    delete kp.publicKeyJwk.kid;\n    if (_private) {\n      kp.privateKeyJwk = this.toJwk(true);\n      delete kp.privateKeyJwk.kid;\n    }\n\n    return kp;\n  }\n\n  toJwk(_private: boolean = false) {\n    const publicKeyBase58 = bs58.encode(this.publicKeyBuffer);\n    if (_private) {\n      return keyUtils.privateKeyJwkFromPrivateKeyBase58(\n        publicKeyBase58,\n        bs58.encode(this.privateKeyBuffer)\n      );\n    }\n    return keyUtils.publicKeyJwkFromPublicKeyBase58(publicKeyBase58);\n  }\n\n  deriveSecret(options: common.types.DeriveSecretOptions) {\n    let remotePubkeyBytes;\n\n    const { publicKey } = options;\n\n    if ((publicKey as any).publicKeyBase58) {\n      remotePubkeyBytes = bs58.decode(\n        (publicKey as common.types.LinkedDataKeyPair).publicKeyBase58\n      );\n    } else if ((publicKey as any).publicKeyJwk) {\n      remotePubkeyBytes = bs58.decode(\n        keyUtils.publicKeyBase58FromPublicKeyJwk(\n          (publicKey as common.types.JsonWebKeyPair).publicKeyJwk\n        )\n      );\n    }\n\n    const privateKeyBytes = this.privateKeyBuffer as Buffer;\n\n    const scalarMultipleResult = x25519.sharedKey(\n      new Uint8Array(privateKeyBytes),\n      new Uint8Array(remotePubkeyBytes),\n      true\n    );\n\n    return scalarMultipleResult;\n  }\n}\n","import base64url from 'base64url';\n\nimport * as ed25519 from '@stablelib/ed25519';\n\nimport canonicalize from 'canonicalize';\n\nclass JWSVerificationFailed extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'JWSVerificationFailed';\n  }\n}\n\nconst _jwkToSecretKey = (jwk: any) => {\n  const d = base64url.toBuffer(jwk.d);\n  const x = base64url.toBuffer(jwk.x);\n  const secretKey = new Uint8Array(Buffer.concat([d, x]));\n  return secretKey;\n};\n\nconst _jwkToPublicKey = (jwk: any) => {\n  const x = base64url.toBuffer(jwk.x);\n  const publicKey = new Uint8Array(x);\n  return publicKey;\n};\n\nexport const decode = (jws: string, options = { complete: false }) => {\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n\n  if (options.complete) {\n    return {\n      header: JSON.parse(base64url.decode(encodedHeader)),\n      payload: JSON.parse(base64url.decode(encodedPayload)),\n      signature: encodedSignature,\n    };\n  }\n  return JSON.parse(base64url.decode(encodedPayload));\n};\n\nexport const sign = (\n  payload: any,\n  privateKeyJwk: any,\n  header: any = {\n    alg: 'EdDSA',\n  }\n) => {\n  const secretKey = _jwkToSecretKey(privateKeyJwk);\n  const encodedHeader = base64url.encode(canonicalize(header));\n  const encodedPayload = base64url.encode(canonicalize(payload));\n  const message = new Uint8Array(\n    Buffer.from(`${encodedHeader}.${encodedPayload}`)\n  );\n  const signature = ed25519.sign(secretKey, message);\n  const encodedSignature = base64url.encode(Buffer.from(signature));\n  const jws = `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\n  return jws;\n};\n\nexport const signDetached = (\n  payload: Buffer,\n  privateKeyJwk: any,\n  header: any = {\n    alg: 'EdDSA',\n  }\n) => {\n  const secretKey = _jwkToSecretKey(privateKeyJwk);\n  const encodedHeader = base64url.encode(canonicalize(header));\n  const message = new Uint8Array(\n    Buffer.concat([\n      Buffer.from(encodedHeader, 'utf-8'),\n      Buffer.from('.', 'utf-8'),\n      payload,\n    ])\n  );\n  const signature = ed25519.sign(secretKey, message);\n  const encodedSignature = base64url.encode(Buffer.from(signature));\n  const jws = `${encodedHeader}..${encodedSignature}`;\n  return jws;\n};\n\nexport const verify = (jws: string, publicKeyJwk: any) => {\n  const publicKey = _jwkToPublicKey(publicKeyJwk);\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n\n  const message = new Uint8Array(\n    Buffer.from(`${encodedHeader}.${encodedPayload}`)\n  );\n  const verified = ed25519.verify(\n    publicKey,\n    message,\n    new Uint8Array(base64url.toBuffer(encodedSignature))\n  );\n\n  if (verified) {\n    return JSON.parse(base64url.decode(encodedPayload));\n  }\n\n  throw new JWSVerificationFailed('signature verification failed');\n};\n\nexport const verifyDetached = (\n  jws: string,\n  payload: Buffer,\n  publicKeyJwk: any\n) => {\n  const publicKey = _jwkToPublicKey(publicKeyJwk);\n  const [encodedHeader, encodedSignature] = jws.split('..');\n  const message = new Uint8Array(\n    Buffer.concat([\n      Buffer.from(encodedHeader, 'utf-8'),\n      Buffer.from('.', 'utf-8'),\n      payload,\n    ])\n  );\n  const verified = ed25519.verify(\n    publicKey,\n    message,\n    new Uint8Array(base64url.toBuffer(encodedSignature))\n  );\n  return verified;\n};\n\nexport default {\n  decode,\n\n  sign,\n  signDetached,\n\n  verify,\n  verifyDetached,\n};\n","import bs58 from 'bs58';\n\nimport * as ed25519 from '@stablelib/ed25519';\nimport * as keyUtils from './keyUtils';\n\nimport * as common from '@transmute/did-key-common';\n\nimport { X25519KeyPair } from '@transmute/did-key-x25519';\n\n@common.types.staticImplements<common.types.KeyPairClass>()\nexport class Ed25519KeyPair {\n  public id: string;\n  public type: string;\n  public controller: string;\n\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  static fingerprintFromPublicKey(\n    keypair: common.types.KeyPairJwk | common.types.KeyPairBase58\n  ) {\n    let pubkeyBytes: any;\n\n    if ((keypair as any).publicKeyBase58) {\n      pubkeyBytes = bs58.decode(\n        (keypair as common.types.KeyPairBase58).publicKeyBase58\n      );\n    }\n\n    if ((keypair as any).publicKeyJwk) {\n      pubkeyBytes = bs58.decode(\n        keyUtils.publicKeyBase58FromPublicKeyJwk(\n          (keypair as common.types.KeyPairJwk).publicKeyJwk\n        )\n      );\n    }\n    // ed25519 cryptonyms are multicodec encoded values, specifically:\n    // (multicodec ed25519-pub 0xed01 + key bytes)\n\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    buffer[0] = 0xed;\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${bs58.encode(buffer)}`;\n  }\n  static async generate(options: common.types.KeyPairGenerateOptions) {\n    let key;\n    if (options.secureRandom) {\n      key = ed25519.generateKeyPair({\n        isAvailable: true,\n        randomBytes: options.secureRandom,\n      });\n    } else {\n      throw new Error('options.secureRandom is required.');\n    }\n\n    const publicKeyBase58 = bs58.encode(key.publicKey);\n    const privateKeyBase58 = bs58.encode(key.secretKey);\n\n    const did = `did:key:${Ed25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    const keyId = `#${Ed25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    return new Ed25519KeyPair({\n      id: keyId,\n      controller: did,\n      publicKeyBase58,\n      privateKeyBase58,\n    });\n  }\n\n  static fromFingerprint({ fingerprint }: any) {\n    // skip leading `z` that indicates base58 encoding\n    const buffer = bs58.decode(fingerprint.substr(1));\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L81\n    if (buffer[0] === 0xed && buffer[1] === 0x01) {\n      const publicKeyBase58 = bs58.encode(buffer.slice(2));\n      const did = `did:key:${Ed25519KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      const keyId = `#${Ed25519KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      return new Ed25519KeyPair({\n        id: keyId,\n        controller: did,\n        publicKeyBase58,\n      });\n    }\n\n    throw new Error(`Unsupported Fingerprint Type: ${fingerprint}`);\n  }\n  // todo: consider moving this type conversion cancer to common.\n  static from(options: common.types.KeyPairBase58 | common.types.KeyPairJwk) {\n    let privateKeyBase58;\n    let publicKeyBase58;\n\n    if ((options as common.types.KeyPairBase58).publicKeyBase58) {\n      publicKeyBase58 = (options as common.types.KeyPairBase58).publicKeyBase58;\n    }\n\n    if ((options as common.types.KeyPairBase58).privateKeyBase58) {\n      privateKeyBase58 = (options as common.types.KeyPairBase58)\n        .privateKeyBase58;\n    }\n\n    if ((options as common.types.KeyPairJwk).privateKeyJwk) {\n      privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyJwk(\n        (options as common.types.KeyPairJwk).privateKeyJwk\n      );\n    }\n\n    if ((options as common.types.KeyPairJwk).publicKeyJwk) {\n      publicKeyBase58 = keyUtils.publicKeyBase58FromPublicKeyJwk(\n        (options as common.types.KeyPairJwk).publicKeyJwk\n      );\n    }\n\n    return new Ed25519KeyPair({\n      ...options,\n      privateKeyBase58,\n      publicKeyBase58,\n    });\n  }\n\n  constructor(options: any = {}) {\n    this.type = 'Ed25519VerificationKey2018';\n    this.id = options.id;\n    this.controller = options.controller;\n\n    if (options.publicKeyBase58) {\n      this.publicKeyBuffer = bs58.decode(options.publicKeyBase58);\n    } else if (options.publicKeyJwk) {\n      this.publicKeyBuffer = bs58.decode(\n        keyUtils.publicKeyBase58FromPublicKeyJwk(options.publicKeyJwk)\n      );\n    } else {\n      throw new Error(\n        'Ed25519KeyPair requires publicKeyBase58 or publicKeyJwk, recieved neither.'\n      );\n    }\n\n    if (options.privateKeyBase58) {\n      this.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n    }\n\n    if (this.controller && !this.id) {\n      this.id = `${this.controller}#${this.fingerprint()}`;\n    }\n  }\n\n  fingerprint() {\n    return Ed25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    } as any);\n  }\n  verifyFingerprint(fingerprint: any) {\n    // fingerprint should have `z` prefix indicating\n    // that it's multi-base encoded\n    if (!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      return {\n        error: new Error('`fingerprint` must be a multibase encoded string.'),\n        valid: false,\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = bs58.decode(fingerprint.slice(1));\n    } catch (e) {\n      return { error: e, valid: false };\n    }\n\n    // validate the first two multicodec bytes 0xed01\n    const valid =\n      fingerprintBuffer.slice(0, 2).toString('hex') === 'ed01' &&\n      this.publicKeyBuffer.equals(fingerprintBuffer.slice(2));\n    if (!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false,\n      };\n    }\n    return { valid };\n  }\n\n  async toJwk(exportPrivateKey: boolean = false) {\n    if (exportPrivateKey) {\n      return keyUtils.privateKeyJwkFromPrivateKeyBase58(\n        bs58.encode(this.privateKeyBuffer)\n      );\n    }\n    return keyUtils.publicKeyJwkFromPublicKeyBase58(\n      bs58.encode(this.publicKeyBuffer)\n    );\n  }\n\n  toX25519KeyPair(exportPrivateKey: boolean = false) {\n    if (exportPrivateKey) {\n      return X25519KeyPair.fromEdKeyPair({\n        controller: this.controller,\n        publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n        privateKeyBase58: bs58.encode(this.privateKeyBuffer),\n      } as any);\n    } else {\n      return X25519KeyPair.fromEdKeyPair({\n        controller: this.controller,\n        publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n      } as any);\n    }\n  }\n\n  toKeyPair(exportPrivateKey: boolean = false) {\n    const kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n\n    if (exportPrivateKey) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(exportPrivateKey: boolean = false) {\n    const kp: any = {\n      id: this.id,\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: keyUtils.publicKeyJwkFromPublicKeyBase58(\n        bs58.encode(this.publicKeyBuffer)\n      ),\n    };\n\n    delete kp.publicKeyJwk.kid;\n    if (exportPrivateKey) {\n      kp.privateKeyJwk = keyUtils.privateKeyJwkFromPrivateKeyBase58(\n        bs58.encode(this.privateKeyBuffer)\n      );\n      delete kp.privateKeyJwk.kid;\n    }\n\n    return kp;\n  }\n\n  signer() {\n    if (!this.privateKeyBuffer) {\n      throw new Error('No private key to sign with.');\n    }\n    let { privateKeyBuffer } = this;\n    return {\n      async sign({ data }: any) {\n        const signatureUInt8Array = ed25519.sign(privateKeyBuffer, data);\n        return signatureUInt8Array;\n      },\n    };\n  }\n  verifier() {\n    if (!this.publicKeyBuffer) {\n      throw new Error('No public key to verify with.');\n    }\n    let { publicKeyBuffer } = this;\n    return {\n      async verify({ data, signature }: any) {\n        let verified = false;\n        try {\n          verified = ed25519.verify(publicKeyBuffer, data, signature);\n        } catch (e) {\n          console.error('An error occurred when verifying signature: ', e);\n        }\n        return verified;\n      },\n    };\n  }\n}\n","import crypto from 'crypto';\n\nimport * as keyUtils from './keyUtils';\nimport bs58 from 'bs58';\nimport secp256k1 from 'secp256k1';\n\nimport * as common from '@transmute/did-key-common';\n\nconst _generate = (secureRandom: any) => {\n  let privateKey;\n  do {\n    privateKey = secureRandom();\n  } while (!secp256k1.privateKeyVerify(privateKey));\n\n  const publicKey = secp256k1.publicKeyCreate(privateKey);\n  return { publicKey, privateKey };\n};\n\n@common.types.staticImplements<common.types.KeyPairClass>()\nexport class Secp256k1KeyPair {\n  public id: string;\n  public type: string;\n  public controller: string;\n\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  static fingerprintFromPublicKey(\n    keypair: common.types.KeyPairJwk | common.types.KeyPairBase58\n  ) {\n    let pubkeyBytes: any;\n\n    if ((keypair as any).publicKeyBase58) {\n      pubkeyBytes = bs58.decode(\n        (keypair as common.types.KeyPairBase58).publicKeyBase58\n      );\n    }\n\n    if ((keypair as any).publicKeyJwk) {\n      pubkeyBytes = new Uint8Array(\n        Buffer.from(\n          keyUtils.publicKeyHexFromJwk(\n            (keypair as common.types.KeyPairJwk).publicKeyJwk\n          )\n        )\n      );\n    }\n\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    // See https://github.com/multiformats/multicodec/blob/master/table.csv\n    // 0xe7 is Secp256k1 public key\n    buffer[0] = 0xe7; //\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${bs58.encode(buffer)}`;\n  }\n\n  static async generate(options: any = {}) {\n    let privateKey;\n    let publicKey;\n    if (options.secureRandom) {\n      ({ privateKey, publicKey } = _generate(options.secureRandom));\n    }\n\n    if (!privateKey) {\n      throw new Error('Cannot generate private key.');\n    }\n\n    const publicKeyBase58 = keyUtils.publicKeyBase58FromPublicKeyHex(\n      Buffer.from(publicKey).toString('hex')\n    );\n    const privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyHex(\n      Buffer.from(privateKey).toString('hex')\n    );\n\n    const did = `did:key:${Secp256k1KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    const keyId = `#${Secp256k1KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n\n    return new Secp256k1KeyPair({\n      id: keyId,\n      controller: did,\n      publicKeyBase58,\n      privateKeyBase58,\n    });\n  }\n\n  static async from(options: any) {\n    let privateKeyBase58 = options.privateKeyBase58;\n    let publicKeyBase58 = options.publicKeyBase58;\n\n    if (options.privateKeyHex) {\n      privateKeyBase58 = await keyUtils.privateKeyBase58FromPrivateKeyHex(\n        options.privateKeyHex\n      );\n    }\n\n    if (options.publicKeyHex) {\n      publicKeyBase58 = await keyUtils.publicKeyBase58FromPublicKeyHex(\n        options.publicKeyHex\n      );\n    }\n\n    if (options.privateKeyJwk) {\n      privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyHex(\n        await keyUtils.privateKeyHexFromJwk(options.privateKeyJwk)\n      );\n    }\n\n    if (options.publicKeyJwk) {\n      publicKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyHex(\n        await keyUtils.publicKeyHexFromJwk(options.publicKeyJwk)\n      );\n    }\n\n    return new Secp256k1KeyPair({\n      ...options,\n      privateKeyBase58,\n      publicKeyBase58,\n    });\n  }\n\n  static fromFingerprint({ fingerprint }: any) {\n    // skip leading `z` that indicates base58 encoding\n    const buffer = bs58.decode(fingerprint.substr(1));\n\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L77\n    if (buffer[0] === 0xe7 && buffer[1] === 0x01) {\n      const publicKeyBase58 = bs58.encode(buffer.slice(2));\n      const did = `did:key:${Secp256k1KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      const keyId = `#${Secp256k1KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      return new Secp256k1KeyPair({\n        id: keyId,\n        controller: did,\n        publicKeyBase58,\n      });\n    }\n\n    throw new Error(`Unsupported Fingerprint Type: ${fingerprint}`);\n  }\n\n  constructor(options: any = {}) {\n    this.type = 'EcdsaSecp256k1VerificationKey2019';\n    this.id = options.id;\n    this.controller = options.controller;\n\n    if (options.publicKeyBase58) {\n      this.publicKeyBuffer = bs58.decode(options.publicKeyBase58);\n    } else if (options.publicKeyJwk) {\n      this.publicKeyBuffer = Buffer.from(\n        keyUtils.publicKeyHexFromJwk(options.publicKeyJwk),\n        'hex'\n      );\n    } else {\n      throw new Error(\n        'Secp256k1KeyPair requires publicKeyBase58 or publicKeyJwk, recieved neither.'\n      );\n    }\n\n    if (options.privateKeyBase58) {\n      this.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n    }\n\n    if (options.privateKeyJwk) {\n      this.privateKeyBuffer = Buffer.from(\n        keyUtils.privateKeyHexFromJwk(options.privateKeyJwk),\n        'hex'\n      );\n    }\n\n    if (this.controller && !this.id) {\n      this.id = `${this.controller}#${this.fingerprint()}`;\n    }\n  }\n\n  signer() {\n    if (!this.privateKeyBuffer) {\n      throw new Error('No private key to sign with.');\n    }\n    let { privateKeyBuffer } = this;\n    return {\n      async sign({ data }: any) {\n        const messageHashUInt8Array = crypto\n          .createHash('sha256')\n          .update(data)\n          .digest();\n\n        const sigObj: any = secp256k1.ecdsaSign(\n          messageHashUInt8Array,\n          new Uint8Array(privateKeyBuffer)\n        );\n\n        return sigObj.signature;\n      },\n    };\n  }\n\n  verifier() {\n    if (!this.publicKeyBuffer) {\n      throw new Error('No public key to verify with.');\n    }\n    let { publicKeyBuffer } = this;\n    return {\n      async verify({ data, signature }: any) {\n        const messageHashUInt8Array = crypto\n          .createHash('sha256')\n          .update(data)\n          .digest();\n\n        let verified = false;\n        try {\n          verified = secp256k1.ecdsaVerify(\n            signature,\n            messageHashUInt8Array,\n            new Uint8Array(publicKeyBuffer)\n          );\n        } catch (e) {\n          console.error('An error occurred when verifying signature: ', e);\n        }\n        return verified;\n      },\n    };\n  }\n\n  fingerprint() {\n    return Secp256k1KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    } as any);\n  }\n\n  verifyFingerprint(fingerprint: string) {\n    // fingerprint should have `z` prefix indicating\n    // that it's multi-base encoded\n    if (!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      return {\n        error: new Error('`fingerprint` must be a multibase encoded string.'),\n        valid: false,\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = bs58.decode(fingerprint.slice(1));\n    } catch (e) {\n      return { error: e, valid: false };\n    }\n    let { publicKeyBuffer } = this;\n\n    // validate the first two multicodec bytes 0xe701\n    const valid =\n      fingerprintBuffer.slice(0, 2).toString('hex') === 'e701' &&\n      publicKeyBuffer.equals(fingerprintBuffer.slice(2));\n    if (!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false,\n      };\n    }\n    return { valid };\n  }\n\n  toJwk(_private: boolean = false) {\n    if (_private) {\n      if (!this.privateKeyBuffer) {\n        throw new Error('No private key to export');\n      }\n      return keyUtils.privateKeyJwkFromPrivateKeyHex(\n        this.privateKeyBuffer.toString('hex')\n      );\n    }\n    return keyUtils.publicKeyJwkFromPublicKeyHex(\n      this.publicKeyBuffer.toString('hex')\n    );\n  }\n\n  async toHex(_private: boolean = false) {\n    if (_private) {\n      if (!this.privateKeyBuffer) {\n        throw new Error('No private key to export');\n      }\n      return keyUtils.privateKeyHexFromJwk(\n        await keyUtils.privateKeyJwkFromPrivateKeyHex(\n          this.privateKeyBuffer.toString('hex')\n        )\n      );\n    }\n    return keyUtils.publicKeyHexFromJwk(\n      await keyUtils.publicKeyJwkFromPublicKeyHex(\n        this.publicKeyBuffer.toString('hex')\n      )\n    );\n  }\n\n  toKeyPair(exportPrivate = false) {\n    const kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n    if (exportPrivate) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(exportPrivate: boolean = false): any {\n    let kp: any = {\n      id: this.id,\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: this.toJwk(),\n    };\n    delete kp.publicKeyJwk.kid;\n    if (exportPrivate) {\n      kp.privateKeyJwk = this.toJwk(true);\n      delete kp.privateKeyJwk.kid;\n    }\n\n    return kp;\n  }\n}\n","import base64url from 'base64url';\n\nimport crypto from 'crypto';\nimport secp256k1 from 'secp256k1';\n\nimport {\n  ISecp256k1PrivateKeyJwk,\n  ISecp256k1PublicKeyJwk,\n  privateKeyUInt8ArrayFromJwk,\n  publicKeyUInt8ArrayFromJwk,\n} from './keyUtils';\n\n/** error matching @panva/jose for JWS verification failure. */\nclass JWSVerificationFailed extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'JWSVerificationFailed';\n  }\n}\n\n/** JWS Header */\nexport interface IJWSHeader {\n  /** algorithm, ES256K */\n  alg: string;\n\n  /** type, JWT */\n  typ?: string;\n  /** signing key id, ... */\n  kid?: string;\n}\n\n/** Produce a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\nexport const signDetached = async (\n  // in the case of EcdsaSecp256k1Signature2019 this is the result of createVerifyData\n  payload: Buffer,\n  privateKeyJwk: ISecp256k1PrivateKeyJwk,\n  header = {\n    alg: 'ES256K',\n    b64: false,\n    crit: ['b64'],\n  }\n) => {\n  const privateKeyUInt8Array = await privateKeyUInt8ArrayFromJwk(privateKeyJwk);\n\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n\n  const message = Buffer.from(toBeSignedBuffer);\n\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n  const sigObj: any = secp256k1.ecdsaSign(\n    messageHashUInt8Array,\n    privateKeyUInt8Array\n  );\n\n  const encodedSignature = base64url.encode(Buffer.from(sigObj.signature));\n\n  return `${encodedHeader}..${encodedSignature}`;\n};\n\n/** Verify a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\nexport const verifyDetached = async (\n  jws: string,\n  payload: Buffer,\n  publicKeyJwk: ISecp256k1PublicKeyJwk\n) => {\n  if (jws.indexOf('..') === -1) {\n    throw new JWSVerificationFailed('not a valid rfc7797 jws.');\n  }\n  const [encodedHeader, encodedSignature] = jws.split('..');\n  const header = JSON.parse(base64url.decode(encodedHeader));\n  if (header.alg !== 'ES256K') {\n    throw new Error('JWS alg is not signed with ES256K.');\n  }\n  if (\n    header.b64 !== false ||\n    !header.crit ||\n    !header.crit.length ||\n    header.crit[0] !== 'b64'\n  ) {\n    throw new Error('JWS Header is not in rfc7797 format (not detached).');\n  }\n  const publicKeyUInt8Array = await publicKeyUInt8ArrayFromJwk(publicKeyJwk);\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n  const message = Buffer.from(toBeSignedBuffer);\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n  const signatureUInt8Array = base64url.toBuffer(encodedSignature);\n  let signatureLowerS = secp256k1.signatureNormalize(signatureUInt8Array);\n  const verified = secp256k1.ecdsaVerify(\n    signatureLowerS,\n    messageHashUInt8Array,\n    publicKeyUInt8Array\n  );\n\n  if (verified) {\n    return true;\n  }\n  const erroObject = {\n    signature: signatureUInt8Array.toString('hex'),\n    // message: messageHashUInt8Array.toString('hex'),\n    // publicKey: publicKeyUInt8Array.toString('hex'),\n  };\n  throw new JWSVerificationFailed(\n    'ECDSA Verify Failed: ' + JSON.stringify(erroObject, null, 2)\n  );\n};\n\n/** Produce a normal ES256K JWS */\nexport const sign = async (\n  payload: any,\n  privateKeyJwk: ISecp256k1PrivateKeyJwk,\n  header: IJWSHeader = { alg: 'ES256K' }\n) => {\n  const privateKeyUInt8Array = await privateKeyUInt8ArrayFromJwk(privateKeyJwk);\n\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n  const encodedPayload = base64url.encode(JSON.stringify(payload));\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n  const message = Buffer.from(toBeSigned);\n\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n\n  const sigObj: any = secp256k1.ecdsaSign(\n    messageHashUInt8Array,\n    privateKeyUInt8Array\n  );\n\n  const encodedSignature = base64url.encode(sigObj.signature);\n  return `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\n};\n\n/** Verify an ES256K JWS, returns the decoded object if successful, throws otherwise. */\nexport const verify = async (\n  jws: string,\n  publicKeyJwk: ISecp256k1PublicKeyJwk\n) => {\n  const publicKeyUInt8Array = await publicKeyUInt8ArrayFromJwk(publicKeyJwk);\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n\n  const message = Buffer.from(toBeSigned);\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n\n  const signatureUInt8Array = base64url.toBuffer(encodedSignature);\n  let signatureLowerS = secp256k1.signatureNormalize(signatureUInt8Array);\n\n  const verified = secp256k1.ecdsaVerify(\n    signatureLowerS,\n    messageHashUInt8Array,\n    publicKeyUInt8Array\n  );\n  if (verified) {\n    return JSON.parse(base64url.decode(encodedPayload));\n  }\n  const erroObject = {\n    signature: signatureUInt8Array.toString('hex'),\n    message: messageHashUInt8Array.toString('hex'),\n    publicKey: publicKeyUInt8Array.toString('hex'),\n  };\n  throw new JWSVerificationFailed(\n    'ECDSA Verify Failed: ' + JSON.stringify(erroObject, null, 2)\n  );\n};\n\n/** decode a JWS (without verifying it) */\nexport const decode = (jws: string, options = { complete: false }) => {\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n\n  if (options.complete) {\n    return {\n      header: JSON.parse(base64url.decode(encodedHeader)),\n      payload: JSON.parse(base64url.decode(encodedPayload)),\n      signature: encodedSignature,\n    };\n  }\n  return JSON.parse(base64url.decode(encodedPayload));\n};\n","\n'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./did-key-bls12381.cjs.production.min.js')\n} else {\n  module.exports = require('./did-key-bls12381.cjs.development.js')\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 556;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 766;","import { withHandlers } from \"recompose\";\nimport { EdvClient } from \"edv-client\";\nimport { UniversalWallet2020, VaultClient } from \"@transmute/universal-wallet\";\n\n// correct horse battery staple\n\nconst getClient = async (wallet) => {\n  let _wallet = new UniversalWallet2020(wallet.contents);\n  const entropy = _wallet.contents.find((c) => {\n    return c.type === \"Entropy\";\n  });\n  const ed25519Key = _wallet.contents.find((c) => {\n    return c.type === \"Ed25519VerificationKey2018\";\n  });\n  ed25519Key.controller = ed25519Key.id.split(\"#\")[0];\n  const x25519Key = _wallet.contents.find((c) => {\n    return c.type === \"X25519KeyAgreementKey2019\";\n  });\n  x25519Key.controller = x25519Key.id.split(\"#\")[0];\n  let client = await VaultClient.fromDerivedContents(\n    wallet.vaultEndpoint,\n    ed25519Key,\n    x25519Key,\n    Buffer.from(entropy.value, \"hex\")\n  );\n  return client;\n};\n\nconst isContentPersisted = (localContents, id) => {\n  return (\n    localContents.find((c) => {\n      return c.id === id;\n    }) !== undefined\n  );\n};\n\nexport default withHandlers({\n  setUniversalWalletProp: ({ setUniversalWalletProp }) => (payload) => {\n    setUniversalWalletProp(payload);\n  },\n  generateWallet: ({ setUniversalWalletProp }) => async (_seed) => {\n    if (!_seed) {\n      throw new Error(\"seed is required.\");\n    }\n    let wallet = await UniversalWallet2020.generate(_seed);\n    setUniversalWalletProp({\n      status: wallet.status,\n      contents: wallet.contents,\n    });\n  },\n  toggleLockStatus: ({ setUniversalWalletProp }) => async ({\n    status,\n    password,\n    contents,\n  }) => {\n    let wallet = new UniversalWallet2020(contents);\n    wallet.status = status;\n\n    if (status === \"LOCKED\") {\n      await wallet.unlock(password);\n    }\n    if (status === \"UNLOCKED\") {\n      await wallet.lock(password);\n    }\n    setUniversalWalletProp({\n      status: wallet.status,\n      contents: wallet.contents,\n    });\n  },\n\n  deleteWallet: ({ setUniversalWalletProp }) => async () => {\n    setUniversalWalletProp({\n      status: \"UNLOCKED\",\n      contents: [],\n    });\n  },\n\n  importWallet: ({ setUniversalWalletProp }) => async (encryptedWallet) => {\n    let wallet = new UniversalWallet2020();\n    await wallet.import(encryptedWallet);\n    setUniversalWalletProp({\n      status: wallet.status,\n      contents: wallet.contents,\n    });\n  },\n\n  exportWallet: () => async (status, contents) => {\n    if (status !== \"LOCKED\") {\n      throw new Error(\"Cannot export unlocked wallet.\");\n    }\n    let wallet = new UniversalWallet2020(contents);\n    wallet.status = status;\n    return wallet.export();\n  },\n\n  saveWallet: ({ setUniversalWalletProp }) => async (contents) => {\n    setUniversalWalletProp({\n      contents,\n    });\n  },\n  issueCredential: ({ wallet, setUniversalWalletProp }) => async ({\n    credential,\n    options,\n  }) => {\n    let _wallet = new UniversalWallet2020(wallet.contents);\n    const verifiableCredential = await _wallet.issue({\n      credential,\n      options,\n    });\n    setUniversalWalletProp({\n      contents: [verifiableCredential, ..._wallet.contents],\n    });\n  },\n  proveVerifiableCredential: ({ wallet, setUniversalWalletProp }) => async ({\n    verifiableCredential,\n    options,\n  }) => {\n    let _wallet = new UniversalWallet2020(wallet.contents);\n    const verifiablePresentation = await _wallet.prove({\n      verifiableCredential,\n      options,\n    });\n    setUniversalWalletProp({\n      contents: [verifiablePresentation, ..._wallet.contents],\n    });\n  },\n  syncVault: ({ wallet, setUniversalWalletProp }) => async () => {\n    setUniversalWalletProp({\n      isSyncing: true,\n    });\n    const client = await getClient(wallet);\n\n    let contents = [];\n    try {\n      contents = await client.getWalletContents();\n    } catch (e) {\n      console.log(e);\n      if (e.message === \"Request failed with status code 404\") {\n        // no-op we will add content that does not existt anyway..\n      }\n    }\n    // console.log('remote wallet contents: ', contents);\n\n    for (const content of wallet.contents) {\n      // console.log({ content });\n      const isPersisted = isContentPersisted(contents, content.id);\n      // console.log({ isPersisted });\n      if (!isPersisted) {\n        let data = JSON.parse(JSON.stringify(content));\n        delete data.tableData;\n        const doc = {\n          id: await EdvClient.generateId(),\n          content: {\n            schema: \"https://schema.org/UniversalWallet\",\n            data,\n          },\n        };\n        await client.addWalletContent(doc);\n        // console.log({ response });\n      }\n    }\n\n    contents = await client.getWalletContents();\n    setUniversalWalletProp({\n      isSyncing: false,\n      contents,\n    });\n  },\n});\n","module.exports = __webpack_public_path__ + \"static/media/logo.33b194d8.svg\";","/* class decorator */\nexport const staticImplements = <T>() => {\n  return <U extends T>(constructor: U) => {\n    return constructor;\n  };\n};\n\nexport * from './JWE_ALG';\nexport * from './JWS_ALG';\n\nexport * from './KeyPairClass';\nexport * from './KeyPairInstance';\nexport * from './KeyAgreementKeyPairClass';\nexport * from './KeyPairGenerateOptions';\nexport * from './EpkResult';\nexport * from './KeyEncryptionKeyFromEphemeralPublicKeyOptions';\nexport * from './KeyEncryptionKeyFromStaticPublicKeyOptions';\nexport * from './DeriveSecretOptions';\n\nexport * from './KeyPairBase';\n\nexport * from './KeyPairJwk';\nexport * from './JsonWebKeyPair';\n\nexport * from './KeyPairBase58';\nexport * from './LinkedDataKeyPair';\n\nexport * from './KeyAgreementKeyPairInstance';\n","import base64url from 'base64url';\nimport canonicalize from 'canonicalize';\n\nexport const createJws = async (signer: any, payload: any, header: object) => {\n  const encodedHeader = base64url.encode(canonicalize(header));\n  const encodedPayload = base64url.encode(canonicalize(payload));\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n  const signature = await signer.sign(Buffer.from(toBeSigned));\n  return `${toBeSigned}.${base64url.encode(Buffer.from(signature))}`;\n};\n\nexport const verifyJws = async (verifier: any, jws: string) => {\n  const [header, payload, signature] = jws.split('.');\n  const toBeVerified = `${header}.${payload}`;\n  const verified = await verifier.verify(\n    Buffer.from(toBeVerified),\n    base64url.toBuffer(signature)\n  );\n\n  return verified;\n};\n\nexport const createDetachedJws = async (\n  signer: any,\n  payload: Buffer,\n  header: object\n) => {\n  const encodedHeader = base64url.encode(\n    canonicalize({ ...header, b64: false, crit: ['b64'] })\n  );\n\n  const toBeSigned = new Uint8Array(\n    Buffer.concat([\n      Buffer.from(encodedHeader, 'utf-8'),\n      Buffer.from('.', 'utf-8'),\n      payload,\n    ])\n  );\n  const signature = await signer.sign(Buffer.from(toBeSigned));\n  const encodedSignature = base64url.encode(Buffer.from(signature));\n  return `${encodedHeader}..${encodedSignature}`;\n};\n\nexport const verifyDetachedJws = async (\n  verifier: any,\n  payload: Buffer,\n  signature: string\n) => {\n  const [encodedHeader, encodedSignature] = signature.split('..');\n\n  const toBeVerified = new Uint8Array(\n    Buffer.concat([\n      Buffer.from(encodedHeader, 'utf-8'),\n      Buffer.from('.', 'utf-8'),\n      payload,\n    ])\n  );\n\n  const verified = await verifier.verify(\n    Buffer.from(toBeVerified),\n    base64url.toBuffer(encodedSignature)\n  );\n\n  return verified;\n};\n","export const getVerificationMethod = (\n  didKeyPairInstance: any,\n  contentType: string = 'application/did+ld+json'\n) => {\n  let externalKeyRepresentation;\n  switch (contentType) {\n    case 'application/did+json': {\n      externalKeyRepresentation = didKeyPairInstance.toJsonWebKeyPair();\n      break;\n    }\n    case '*/*':\n    case 'application/did+ld+json': {\n      externalKeyRepresentation = didKeyPairInstance.toKeyPair();\n      break;\n    }\n    default: {\n      throw new Error(\n        'This implementation of did:key does not support: ' + contentType\n      );\n    }\n  }\n  return externalKeyRepresentation;\n};\n\nexport const keyToDidDoc = async (\n  didKeyPairInstance: any,\n  contentType: string = 'application/did+ld+json'\n) => {\n  const did = `did:key:${didKeyPairInstance.fingerprint()}`;\n  const externalKeyRepresentation = getVerificationMethod(\n    didKeyPairInstance,\n    contentType\n  );\n  let verificationRelationships: any = {\n    verificationMethod: [externalKeyRepresentation],\n  };\n\n  if (didKeyPairInstance.verifier) {\n    verificationRelationships = {\n      ...verificationRelationships,\n      authentication: [externalKeyRepresentation.id],\n      assertionMethod: [externalKeyRepresentation.id],\n      capabilityInvocation: [externalKeyRepresentation.id],\n      capabilityDelegation: [externalKeyRepresentation.id],\n    };\n  }\n\n  if (didKeyPairInstance.deriveSecret) {\n    verificationRelationships = {\n      ...verificationRelationships,\n      keyAgreement: [externalKeyRepresentation.id],\n    };\n  }\n\n  if (didKeyPairInstance.type === 'Ed25519VerificationKey2018') {\n    const kek = await didKeyPairInstance.toX25519KeyPair(false);\n    const externalKeyRepresentation2 = getVerificationMethod(kek, contentType);\n    verificationRelationships = {\n      ...verificationRelationships,\n      verificationMethod: [\n        ...verificationRelationships.verificationMethod,\n        externalKeyRepresentation2,\n      ],\n      keyAgreement: [externalKeyRepresentation2.id],\n    };\n  }\n\n  // imagine if people injected ads like this....\n  // verificationRelationships = {\n  //   ...verificationRelationships,\n  //   service: [\n  //     {\n  //       id: '#provider',\n  //       type: 'ServiceProvider',\n  //       serviceEndpoint: 'https://transmute.industries',\n  //     },\n  //   ],\n  // };\n\n  const didDocument = {\n    '@context': [\n      'https://www.w3.org/ns/did/v1',\n      {\n        '@base': did,\n      },\n    ],\n    id: did,\n    ...verificationRelationships,\n  };\n\n  // Here is were I would delete a property for JSON-only\n  // If I wanted to conform to the DID Core JSON Production Rules.\n  return didDocument;\n};\n\n// resolve ( did, did-resolution-input-metadata )\n//      -> ( did-resolution-metadata, did-document, did-document-metadata )\nexport const getResolve = (DidKeyPairClass: any) => {\n  const resolve = async (\n    didUri: string,\n    resolutionMetaData: any = { accept: 'application/did+ld+json' }\n  ) => {\n    const fingerprint = didUri\n      .split('#')[0]\n      .split('did:key:')\n      .pop();\n    const publicKey = await DidKeyPairClass.fromFingerprint({ fingerprint });\n    return {\n      didDocument: await keyToDidDoc(publicKey, resolutionMetaData.accept),\n      didDocumentMetaData: {\n        'content-type': resolutionMetaData.accept,\n      },\n      didResolutionMetaData: {},\n    };\n  };\n  return resolve;\n};\n","export const getGet = (resolve: any) => {\n  const get = async ({ did, url }: any = {}) => {\n    did = did || url;\n    if (!did) {\n      throw new TypeError('\"did\" must be a string.');\n    }\n    const result = await resolve(did);\n    return result.didDocument;\n  };\n  return get;\n};\n"],"sourceRoot":""}