{"version":3,"sources":["../../src/types/BlsCurveName.ts","../../src/functions/generateKeyPairs.ts","../../src/functions/toJsonWebKeyPair.ts","../../src/functions/fingerprintToJsonWebKeyPair.ts","../../src/constants/index.ts","../../src/functions/publicKeyJwkToDidKey.ts","../../src/Bls12381G1KeyPair.ts","../../src/Bls12381G2KeyPair.ts","../../src/Bls12381KeyPairs.ts","../../src/functions/keyToDidDoc.ts","../../src/driver.ts","../../bls12381/node_modules/@mattrglobal/bbs-signatures/lib sync","../../src/Cipher/crypto.ts","../../src/Cipher/algorithms/ecdhkdf.ts","../../src/Cipher/algorithms/classes/KeyEncryptionKey.ts","../../src/Cipher/algorithms/xc20p.ts","../../src/Cipher/DecryptTransformer.ts","../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../../src/Cipher/EncryptTransformer.ts","../../src/Cipher/getEpkGenerator.ts","../../src/keyUtils.ts","../../src/X25519KeyPair.ts","../../bls12381/dist/index.js","store/history.js","serviceWorker.js","store/universal-wallet/actions.js","store/universal-wallet/reducer.js","store/universal-wallet/redux.js","store/universal-wallet/index.js","store/universal-wallet/container.js","store/index.js","pages/home/util.js","pages/home/Home.js","pages/home/index.js","../../src/resolver.ts","pages/resolver/Resolver.js","pages/resolver/index.js","pages/index.js","pages/unextractable/index.js","components/ParticlesContainer/ParticlesContainer.js","pages/errors/404.js","store/create.js","index.js","pages/base/menu.js","pages/base/drawer.js","pages/base/base.js","../../src/EdDSA.ts","../../src/Ed25519KeyPair.ts","../../src/Secp256k1KeyPair.ts","../../src/ES256K.ts","components/Theme/Theme.js","../../bls12381/node_modules/@mattrglobal/node-bbs-signatures/lib sync","pages/unextractable/documentLoader.js","store/universal-wallet/handlers.js","assets/logo.svg","pages/unextractable/Unextractable.js","pages/unextractable/libp2p.js","../../src/crypto.ts","../../src/functions/jwkToBase58.ts","../../src/functions/fingerprintToDid.ts","../../src/functions/fromJwk.ts","../../src/functions/getMultibaseFromJwk.ts","../../src/Jws/Jws.ts","../../src/functions/base58KeyPairToJwk.ts","../../src/functions/getJwkTypeFromMultibase.ts","../../src/functions/toJwkPair.ts","../../src/KeyPair.ts","../../src/Jwe/Jwe.ts","../../src/functions/generate.ts","../../src/types/index.ts","../../src/Jws/index.ts","../../src/getResolver.ts","../../src/getGet.ts"],"names":["BlsCurveName","generateKeyPairs","generateBls12381G1KeyPair","g1","generateBls12381G2KeyPair","g2","bls12381G1KeyPair","id","type","controller","publicKeyBase58","bs58","encode","publicKey","privateKeyBase58","secretKey","bls12381G2KeyPair","curveMap","Bls12381G1Key2020","G1","Bls12381G2Key2020","G2","toJsonWebKeyPair","keypair","jsonWebKeyPair","publicKeyJwk","kty","crv","x","base64url","decode","privateKeyJwk","d","fingerprintToJsonWebKeyPair","fingerprint","Error","buffer","substring","slice","curveToMulticodecMap","publicKeyJwkToDidKey","toBuffer","Uint8Array","length","set","Bls12381G1KeyPair","options","publicKeyBuffer","privateKeyBuffer","this","split","pop","generate","fromFingerprint","from","opts","toKeyPair","exportPrivateKey","kp","verifier","mattr","signer","Bls12381G2KeyPair","Bls12381KeyPairs","g1KeyPair","g2KeyPair","indexOf","g1AndG2","Buffer","concat","exportPrivate","getVerificationMethod","instance","contentType","cbor","require","getResolve","didUri","resolutionMetaData","accept","didKeyPairInstance","verificationRelationships","verificationMethod","did","push","authentication","assertionMethod","capabilityInvocation","capabilityDelegation","vm","didDocument","didResolutionResponse","didDocumentMetaData","didResolutionMetaData","resolve","getGet","webpackEmptyContext","req","e","code","keys","module","exports","process","crypto","window","deriveKey","secret","producerInfo","consumerInfo","TypeError","input","ALGORITHM_ID","offset","dv","DataView","HASH_ALGORITHM","name","KEY_LENGTH","KeyEncryptionKey","key","wrapKey","unwrappedKey","wrappedKey","aeskw","bs64","unwrapKey","_wrappedKey","console","keyData","ciphertext","iv","tag","additionalData","cek","cipher","encrypted","data","Symbol","iterator","asyncIterator","getEpkGenerator","KeyPair","k0","epk","getKid","copy","digest","canonicalize","privateKeyJwkFromPrivateKeyBase58","publicKeyBytes","privateKeyBytes","_jwk","kid","publicKeyJwkFromPublicKeyBase58","privateKeyBase58FromPrivateKeyJwk","jwk","publicKeyBase58FromPublicKeyJwk","X25519KeyPair","keyUtils","fingerprintFromPublicKey","pubkeyBytes","isAvailable","randomBytes","secureRandom","keyId","generateEphemeralKeyPair","kekFromEphemeralPeer","keyAgreementKey","ephemeralPublicKey","kek","kekFromStaticPeer","ephemeralKeyPair","staticPublicKey","X25519KeyPair_1","epkPair","apu","apv","fromEdKeyPair","ed25519KeyPair","convertPublicKeyToX25519","convertSecretKeyToX25519","verifyFingerprint","error","valid","fingerprintBuffer","_private","toJwk","deriveSecret","remotePubkeyBytes","x25519","common","createBrowserHistory","Boolean","location","hostname","match","setUniversalWalletProp","createAction","payload","handleActions","state","status","contents","vaultEndpoint","isSyncEnabled","isSyncing","connect","wallet","actions","reducer","container","compose","withRedux","withHandlers","router","connectRouter","history","generateEd25519","a","_keys","ed25519","ed25519Key","x25519Key","resolutionResponse","generateX25519","keyPair","generateSecp256k1","secp256k1","generateBls12381","log","bls12381","generateP256","didKeyWebCrypto","crvOrSize","generateP384","generateP521","AceEditor","default","TabPanel","props","children","value","index","other","role","hidden","aria-labelledby","Box","p","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","display","tabs","borderRight","divider","refresh","Panel","handleGenerate","handleContentTypeChange","Grid","spacing","item","sm","xs","ToggleButtonGroup","exclusive","onChange","event","newContentType","aria-label","ToggleButton","Button","variant","color","onClick","Typography","gutterBottom","mode","style","width","readOnly","wrapEnabled","JSON","stringify","editorProps","$blockScrolling","Home","classes","React","useState","setContentType","setKeys","setResolutionResponse","tabValue","tabTabValue","result","useEffect","className","Tabs","orientation","newValue","map","opt","Tab","label","prefixToDriverMap","z6Mk","z6LS","zUC7","z3tE","z5Tc","zQ3s","zXwp","zACH","zJss","didWebDriver","resolver","didUrl","encodedType","idchar","body","recover","then","Resolver","setDidResolutionResponse","params","onToggleRepresentation","routes","path","exact","component","ParticlesContainer","particles","line_linked","shadow","enable","blur","Fragment","zIndex","position","top","Component","NotFound","Theme","padding","href","appReducers","persistConfig","whitelist","storage","middlewares","thunk","routerMiddleware","store","createStore","persistReducer","combineReducers","rootReducer","composeWithDevTools","applyMiddleware","withReduxEnhancer","persistor","persistStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","StyledMenu","withStyles","border","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","StyledMenuItem","primary","main","white","MenuItem","CustomizedMenus","anchorEl","setAnchorEl","IconButton","aria-controls","aria-haspopup","currentTarget","keepMounted","open","onClose","ListItemIcon","fontSize","ListItemText","DrawerContent","List","ListItem","button","appBar","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","alignItems","justifyContent","mixins","content","MiniDrawer","useTheme","setOpen","CssBaseline","AppBar","clsx","Toolbar","edge","src","logo","alt","title","height","Drawer","direction","Divider","privateKeyBuf","Ed25519KeyPair","publicNode","equals","toX25519KeyPair","sign","signatureUInt8Array","verify","signature","verified","privateKeyJwkFromPrivateKeyHex","privateKeyHex","keyto","publicKeyJwkFromPublicKeyHex","publicKeyHex","keyBin","privateKeyHexFromJwk","publicKeyHexFromJwk","uncompressedPublicKey","compressed","privateKeyUInt8ArrayFromJwk","publicKeyUInt8ArrayFromJwk","publicKeyBase58FromPublicKeyHex","privateKeyBase58FromPrivateKeyHex","privateKeyPem","publicKeyPem","Secp256k1KeyPair","privateKey","_generate","messageHashUInt8Array","sigObj","toString","toHex","font1","font2","font3","createMuiTheme","splashImage","light","lighten","dark","darken","secondary","typography","useNextVariants","fontFamily","join","h1","fontWeight","h2","h3","h4","textTransform","letterSpacing","h5","h6","subtitle1","subtitle2","body1","body2","caption","overline","overrides","MuiInput","MuiInputLabel","MuiAppBar","MuiButton","contained","boxShadow","golem","documentLoaderFactory","pluginFactory","build","contexts","W3C_Decentralized_Identifiers","W3C_Verifiable_Credentials","W3ID_Security_Vocabulary","addContext","addResolver","uri","webCryptoDriver","documentLoader","buildDocumentLoader","getClient","_wallet","UniversalWallet2020","entropy","find","c","VaultClient","fromDerivedContents","client","isContentPersisted","localContents","undefined","generateWallet","_seed","toggleLockStatus","password","unlock","lock","deleteWallet","importWallet","encryptedWallet","import","exportWallet","export","saveWallet","issueCredential","credential","issue","verifiableCredential","proveVerifiableCredential","prove","verifiablePresentation","syncVault","getWalletContents","message","parse","tableData","EdvClient","generateId","schema","doc","addWalletContent","dbPromise","openDB","upgrade","db","createObjectStore","idbKeyval","get","val","put","peerCredentials","Unextractable","yourNode","setYourNode","observedCredentials","setObservedCredentials","usableKey","algorithm","namedCurve","keyUsages","subtle","generateKey","exportKey","info","keyJson","JsonWebKey","createDetachedJws","hash","alg","b64","crit","getLibp2p","libp2p","peerId","toB58String","suite","JsonWebSignature","date","issuanceDate","vcjs","issuer","credentialSubject","res","room","Room","setInterval","broadcast","on","peer","messageJson","verifyCredential","Libp2p","addresses","listen","modules","transport","Websockets","WebRTCStar","connEncryption","NOISE","streamMuxer","Mplex","peerDiscovery","Bootstrap","pubsub","Gossipsub","config","enabled","list","start","SUPPORTED_EC","crvToMulticodecPrefix","multicodecToJwkType","0","crvToJwsHashAlg","jwkToBase58","fingerprintToDid","methodName","fromJwk","prefix","getMultibaseFromJwk","Jws","createJws","base58KeyPairToJwk","y","getJwkTypeFromMultibase","toJwkPair","_keypair","staticImplements","args","KeyPair_1","epkArgs","privateKeyToSigner","publicKeyToVerifier","public","toBeSigned","jws","header","toBeVerified","encodedHeader","encodedSignature","supportedContentTypes","keyToDidDoc","externalKeyRepresentation","keyAgreement","externalKeyRepresentation2","DidKeyPairClass","url"],"mappings":"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","file":"static/js/main.02a7bea6.chunk.js","sourcesContent":["export enum BlsCurveName {\n  G1 = 'BLS12381_G1',\n  G2 = 'BLS12381_G2',\n}\n","import bs58 from 'bs58';\nimport {\n  generateBls12381G1KeyPair,\n  generateBls12381G2KeyPair,\n} from '@mattrglobal/bbs-signatures';\n\nexport const generateKeyPairs = async () => {\n  const g1 = await generateBls12381G1KeyPair();\n  const g2 = await generateBls12381G2KeyPair();\n\n  const bls12381G1KeyPair = {\n    id: '',\n    type: 'Bls12381G1Key2020',\n    controller: '',\n    publicKeyBase58: bs58.encode(g1.publicKey),\n    privateKeyBase58: bs58.encode(g1.secretKey),\n  };\n\n  const bls12381G2KeyPair = {\n    id: '',\n    type: 'Bls12381G2Key2020',\n    controller: '',\n    publicKeyBase58: bs58.encode(g2.publicKey),\n    privateKeyBase58: bs58.encode(g2.secretKey),\n  };\n  return {\n    bls12381G1KeyPair,\n    bls12381G2KeyPair,\n  };\n};\n","import { BlsCurveName } from '../types';\nimport base64url from 'base64url';\nimport bs58 from 'bs58';\nconst curveMap: any = {\n  Bls12381G1Key2020: BlsCurveName.G1,\n  Bls12381G2Key2020: BlsCurveName.G2,\n};\n\nexport const toJsonWebKeyPair = (keypair: any) => {\n  const jsonWebKeyPair: any = {\n    id: keypair.id,\n    controller: keypair.controller,\n    type: 'JsonWebKey2020',\n    publicKeyJwk: {\n      kty: 'EC',\n      crv: curveMap[keypair.type],\n      x: base64url.encode(bs58.decode(keypair.publicKeyBase58)),\n    },\n  };\n\n  if (keypair.privateKeyBase58) {\n    jsonWebKeyPair.privateKeyJwk = {\n      kty: 'EC',\n      crv: curveMap[keypair.type],\n      x: base64url.encode(bs58.decode(keypair.publicKeyBase58)),\n      d: base64url.encode(bs58.decode(keypair.privateKeyBase58)),\n    };\n  }\n\n  return jsonWebKeyPair;\n};\n","import bs58 from 'bs58';\n\nimport {\n  BLS12381G1ANDG2_MULTICODEC_IDENTIFIER,\n  BLS12381G1_MULTICODEC_IDENTIFIER,\n  BLS12381G2_MULTICODEC_IDENTIFIER,\n  VARIABLE_INTEGER_TRAILING_BYTE,\n} from '../constants';\n\nimport { toJsonWebKeyPair } from './toJsonWebKeyPair';\nexport const fingerprintToJsonWebKeyPair = (fingerprint: string) => {\n  if (fingerprint[0] !== 'z') {\n    throw new Error('base58 encoded fingerprint must start with \"z\"');\n  }\n\n  const buffer = bs58.decode(fingerprint.substring(1));\n\n  if (\n    buffer[0] === BLS12381G1_MULTICODEC_IDENTIFIER &&\n    buffer[1] === VARIABLE_INTEGER_TRAILING_BYTE\n  ) {\n    let kp = toJsonWebKeyPair({\n      type: 'Bls12381G1Key2020',\n      publicKeyBase58: bs58.encode(buffer.slice(2)),\n    });\n    return {\n      bls12381G1KeyPair: {\n        ...kp,\n        id: '#' + fingerprint,\n        controller: `did:key:${fingerprint}`,\n      },\n    };\n  }\n\n  if (\n    buffer[0] === BLS12381G2_MULTICODEC_IDENTIFIER &&\n    buffer[1] === VARIABLE_INTEGER_TRAILING_BYTE\n  ) {\n    let kp = toJsonWebKeyPair({\n      type: 'Bls12381G2Key2020',\n      publicKeyBase58: bs58.encode(buffer.slice(2)),\n    });\n    return {\n      bls12381G2KeyPair: {\n        ...kp,\n        id: '#' + fingerprint,\n        controller: `did:key:${fingerprint}`,\n      },\n    };\n  }\n\n  if (\n    buffer[0] === BLS12381G1ANDG2_MULTICODEC_IDENTIFIER &&\n    buffer[1] === VARIABLE_INTEGER_TRAILING_BYTE\n  ) {\n    let g1 = toJsonWebKeyPair({\n      type: 'Bls12381G1Key2020',\n      publicKeyBase58: bs58.encode(buffer.slice(2, 50)),\n    });\n    let g2 = toJsonWebKeyPair({\n      type: 'Bls12381G2Key2020',\n      publicKeyBase58: bs58.encode(buffer.slice(50)),\n    });\n    return {\n      bls12381G1KeyPair: {\n        ...g1,\n        id: '#' + fingerprint,\n        controller: `did:key:${fingerprint}`,\n      },\n      bls12381G2KeyPair: {\n        ...g2,\n        id: '#' + fingerprint,\n        controller: `did:key:${fingerprint}`,\n      },\n    };\n  }\n\n  throw new Error('unsupported fingerprint is not g1, g2 or g1 and g2.');\n};\n","// See https://github.com/multiformats/multicodec/pull/190\n\nexport const SUPPORTED_EC = [\n  'P-256',\n  'P-384',\n  'P-521',\n  // not currently supported by web crypto\n  // 'Ed448', 'X448'\n];\n\nexport const multicodecPrefix = 0x12;\n\nexport const crvToMulticodecPrefix: any = {\n  'P-256': 0x00,\n  'P-384': 0x01,\n  'P-521': 0x02,\n  // Ed448: 0x03,\n  // X448: 0x04,\n};\n\nexport const multicodecToJwkType: any = {\n  0x00: { kty: 'EC', crv: 'P-256' },\n  0x01: { kty: 'EC', crv: 'P-384' },\n  0x02: { kty: 'EC', crv: 'P-521' },\n  // 0x03: { kty: 'OKP', crv: 'Ed448' },\n  // 0x04: { kty: 'OKP', crv: 'X448' },\n};\n\nexport const crvToJwsAlg: any = {\n  'P-256': 'ES256',\n  'P-384': 'ES384',\n  'P-521': 'ES521',\n};\n\nexport const crvToJwsHashAlg: any = {\n  'P-256': 'SHA-256',\n  'P-384': 'SHA-384',\n  'P-521': 'SHA-512',\n};\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\nimport {\n  MULTIBASE_ENCODED_BASE58_IDENTIFIER,\n  BLS12381G1_MULTICODEC_IDENTIFIER,\n  BLS12381G2_MULTICODEC_IDENTIFIER,\n  VARIABLE_INTEGER_TRAILING_BYTE,\n} from '../constants';\nimport { BlsCurveName } from '../types';\n\nconst curveToMulticodecMap: any = {\n  [BlsCurveName.G1]: BLS12381G1_MULTICODEC_IDENTIFIER,\n  [BlsCurveName.G2]: BLS12381G2_MULTICODEC_IDENTIFIER,\n};\n\nexport const publicKeyJwkToDidKey = (publicKeyJwk: any) => {\n  const publicKey = base64url.toBuffer(publicKeyJwk.x);\n\n  const buffer = new Uint8Array(2 + publicKey.length);\n  buffer[0] = curveToMulticodecMap[publicKeyJwk.crv];\n  buffer[1] = VARIABLE_INTEGER_TRAILING_BYTE;\n\n  buffer.set(publicKey, 2);\n\n  return `did:key:${MULTIBASE_ENCODED_BASE58_IDENTIFIER}${bs58.encode(buffer)}`;\n};\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\nimport * as mattr from '@mattrglobal/bls12381-key-pair';\nimport { generateKeyPairs } from './functions/generateKeyPairs';\nimport { toJsonWebKeyPair } from './functions/toJsonWebKeyPair';\nimport { publicKeyJwkToDidKey } from './functions/publicKeyJwkToDidKey';\nimport { fingerprintToJsonWebKeyPair } from './functions/fingerprintToJsonWebKeyPair';\n\nexport class Bls12381G1KeyPair {\n  public id: string;\n  public type: string = 'Bls12381G1Key2020';\n  public controller: string;\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  static async generate() {\n    const { bls12381G1KeyPair } = await generateKeyPairs();\n    const { publicKeyJwk } = toJsonWebKeyPair(bls12381G1KeyPair);\n    bls12381G1KeyPair.controller = publicKeyJwkToDidKey(publicKeyJwk);\n    bls12381G1KeyPair.id =\n      '#' + bls12381G1KeyPair.controller.split('did:key:').pop();\n    return new Bls12381G1KeyPair({\n      id: bls12381G1KeyPair.id,\n      controller: bls12381G1KeyPair.controller,\n      publicKeyBuffer: bs58.decode(bls12381G1KeyPair.publicKeyBase58),\n      privateKeyBuffer: bs58.decode(bls12381G1KeyPair.privateKeyBase58),\n    });\n  }\n\n  static async fromFingerprint({ fingerprint }: any) {\n    const { bls12381G1KeyPair } = fingerprintToJsonWebKeyPair(fingerprint);\n    return new Bls12381G1KeyPair({\n      id: bls12381G1KeyPair.id,\n      controller: bls12381G1KeyPair.controller,\n      publicKeyBuffer: base64url.toBuffer(bls12381G1KeyPair.publicKeyJwk.x),\n    });\n  }\n\n  static async from(options: any) {\n    if (options.type === 'JsonWebKey2020') {\n      let opts: any = {\n        id: options.id,\n        controller: options.controller,\n        publicKeyBuffer: base64url.toBuffer(options.publicKeyJwk.x),\n      };\n      if (options.privateKeyJwk) {\n        opts.privateKeyBuffer = base64url.toBuffer(options.privateKeyJwk.d);\n      }\n      return new Bls12381G1KeyPair(opts);\n    }\n\n    if (options.type === 'Bls12381G1Key2020') {\n      let opts: any = {\n        id: options.id,\n        controller: options.controller,\n        publicKeyBuffer: bs58.decode(options.publicKeyBase58),\n      };\n      if (options.privateKeyBase58) {\n        opts.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n      }\n      return new Bls12381G1KeyPair(opts);\n    }\n\n    throw new Error('unsuported key type');\n  }\n\n  constructor(options: any) {\n    this.id = options.id;\n    this.controller = options.controller;\n    this.publicKeyBuffer = options.publicKeyBuffer;\n    this.privateKeyBuffer = options.privateKeyBuffer;\n    if (!this.controller) {\n      const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n      this.controller = publicKeyJwkToDidKey(publicKeyJwk);\n    }\n    if (!this.id) {\n      const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n      this.id =\n        '#' +\n        publicKeyJwkToDidKey(publicKeyJwk)\n          .split('did:key:')\n          .pop();\n    }\n  }\n\n  fingerprint() {\n    const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n    return publicKeyJwkToDidKey(publicKeyJwk)\n      .split('did:key:')\n      .pop();\n  }\n\n  toKeyPair(exportPrivateKey: boolean = false) {\n    const kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n\n    if (exportPrivateKey) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n\n    return kp;\n  }\n\n  toJsonWebKeyPair(exportPrivateKey = false) {\n    const result = toJsonWebKeyPair(this.toKeyPair(exportPrivateKey));\n    return result;\n  }\n\n  verifier() {\n    const key = new mattr.Bls12381G1KeyPair({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    });\n    return key.verifier();\n  }\n\n  signer() {\n    const key = new mattr.Bls12381G1KeyPair({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n      privateKeyBase58: bs58.encode(this.privateKeyBuffer),\n    });\n    return key.signer();\n  }\n}\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\nimport * as mattr from '@mattrglobal/bls12381-key-pair';\nimport { generateKeyPairs } from './functions/generateKeyPairs';\nimport { toJsonWebKeyPair } from './functions/toJsonWebKeyPair';\nimport { publicKeyJwkToDidKey } from './functions/publicKeyJwkToDidKey';\nimport { fingerprintToJsonWebKeyPair } from './functions/fingerprintToJsonWebKeyPair';\n\nexport class Bls12381G2KeyPair {\n  public id: string;\n  public type: string = 'Bls12381G2Key2020';\n  public controller: string;\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  static async generate() {\n    const { bls12381G2KeyPair } = await generateKeyPairs();\n    const { publicKeyJwk } = toJsonWebKeyPair(bls12381G2KeyPair);\n    bls12381G2KeyPair.controller = publicKeyJwkToDidKey(publicKeyJwk);\n    bls12381G2KeyPair.id =\n      '#' + bls12381G2KeyPair.controller.split('did:key:').pop();\n    return new Bls12381G2KeyPair({\n      id: bls12381G2KeyPair.id,\n      controller: bls12381G2KeyPair.controller,\n      publicKeyBuffer: bs58.decode(bls12381G2KeyPair.publicKeyBase58),\n      privateKeyBuffer: bs58.decode(bls12381G2KeyPair.privateKeyBase58),\n    });\n  }\n\n  static async fromFingerprint({ fingerprint }: any) {\n    const { bls12381G2KeyPair } = fingerprintToJsonWebKeyPair(fingerprint);\n    return new Bls12381G2KeyPair({\n      id: bls12381G2KeyPair.id,\n      controller: bls12381G2KeyPair.controller,\n      publicKeyBuffer: base64url.toBuffer(bls12381G2KeyPair.publicKeyJwk.x),\n    });\n  }\n\n  static async from(options: any) {\n    if (options.type === 'JsonWebKey2020') {\n      let opts: any = {\n        id: options.id,\n        controller: options.controller,\n        publicKeyBuffer: base64url.toBuffer(options.publicKeyJwk.x),\n      };\n      if (options.privateKeyJwk) {\n        opts.privateKeyBuffer = base64url.toBuffer(options.privateKeyJwk.d);\n      }\n      return new Bls12381G2KeyPair(opts);\n    }\n\n    if (options.type === 'Bls12381G2Key2020') {\n      let opts: any = {\n        id: options.id,\n        controller: options.controller,\n        publicKeyBuffer: bs58.decode(options.publicKeyBase58),\n      };\n      if (options.privateKeyBase58) {\n        opts.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n      }\n      return new Bls12381G2KeyPair(opts);\n    }\n\n    throw new Error('unsuported key type');\n  }\n\n  constructor(options: any) {\n    this.id = options.id;\n    this.controller = options.controller;\n    this.publicKeyBuffer = options.publicKeyBuffer;\n    this.privateKeyBuffer = options.privateKeyBuffer;\n\n    if (!this.controller) {\n      const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n      this.controller = publicKeyJwkToDidKey(publicKeyJwk);\n    }\n    if (!this.id) {\n      const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n      this.id =\n        '#' +\n        publicKeyJwkToDidKey(publicKeyJwk)\n          .split('did:key:')\n          .pop();\n    }\n  }\n\n  fingerprint() {\n    const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n    return publicKeyJwkToDidKey(publicKeyJwk)\n      .split('did:key:')\n      .pop();\n  }\n\n  toKeyPair(exportPrivateKey: boolean = false) {\n    const kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n\n    if (exportPrivateKey) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(exportPrivateKey = false) {\n    return toJsonWebKeyPair(this.toKeyPair(exportPrivateKey));\n  }\n\n  verifier() {\n    const key = new mattr.Bls12381G2KeyPair({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    });\n    return key.verifier();\n  }\n\n  signer() {\n    const key = new mattr.Bls12381G2KeyPair({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n      privateKeyBase58: bs58.encode(this.privateKeyBuffer),\n    });\n    return key.signer();\n  }\n}\n","import bs58 from 'bs58';\n// import base64url from 'base64url'\n// import * as mattr from '@mattrglobal/bls12381-key-pair'\nimport { generateKeyPairs } from './functions/generateKeyPairs';\n// import { keypairsToDidKey } from './functions/keypairsToDidKey';\nimport { fingerprintToJsonWebKeyPair } from './functions/fingerprintToJsonWebKeyPair';\nimport { Bls12381G1KeyPair } from './Bls12381G1KeyPair';\nimport { Bls12381G2KeyPair } from './Bls12381G2KeyPair';\n\nimport {\n  MULTIBASE_ENCODED_BASE58_IDENTIFIER,\n  BLS12381G1ANDG2_MULTICODEC_IDENTIFIER,\n  VARIABLE_INTEGER_TRAILING_BYTE,\n} from './constants';\n\nexport class Bls12381KeyPairs {\n  public id: string;\n  public type: string = 'Bls12381KeyPairs2020';\n  public controller: string;\n  public g1KeyPair: Bls12381G1KeyPair;\n  public g2KeyPair: Bls12381G2KeyPair;\n\n  static async generate() {\n    const { bls12381G1KeyPair, bls12381G2KeyPair } = await generateKeyPairs();\n    const options = {\n      id: '',\n      controller: '',\n      g1KeyPair: new Bls12381G1KeyPair({\n        id: bls12381G1KeyPair.id,\n        publicKeyBuffer: bs58.decode(bls12381G1KeyPair.publicKeyBase58),\n        privateKeyBuffer: bs58.decode(bls12381G1KeyPair.privateKeyBase58),\n      }),\n      g2KeyPair: new Bls12381G2KeyPair({\n        id: bls12381G2KeyPair.id,\n        publicKeyBuffer: bs58.decode(bls12381G2KeyPair.publicKeyBase58),\n        privateKeyBuffer: bs58.decode(bls12381G2KeyPair.privateKeyBase58),\n      }),\n    };\n    return new Bls12381KeyPairs(options);\n  }\n\n  static async fromFingerprint({ fingerprint }: any) {\n    if (fingerprint.indexOf('z5Tc') === 0) {\n      const {\n        bls12381G1KeyPair,\n        bls12381G2KeyPair,\n      } = fingerprintToJsonWebKeyPair(fingerprint);\n      delete bls12381G1KeyPair.id;\n      delete bls12381G2KeyPair.id;\n      const controller = 'did:key:' + fingerprint;\n      bls12381G1KeyPair.controller = controller;\n      bls12381G2KeyPair.controller = controller;\n      return new Bls12381KeyPairs({\n        id: '#' + fingerprint,\n        controller,\n        g1KeyPair: await Bls12381G1KeyPair.from(bls12381G1KeyPair),\n        g2KeyPair: await Bls12381G2KeyPair.from(bls12381G2KeyPair),\n      });\n    }\n    if (fingerprint.indexOf('z3t') === 0) {\n      return Bls12381G1KeyPair.fromFingerprint({ fingerprint });\n    }\n    if (fingerprint.indexOf('zUC') === 0) {\n      return Bls12381G2KeyPair.fromFingerprint({ fingerprint });\n    }\n    throw new Error(\n      'Bls12381KeyPairs only supports g1, g2 and g1 and g2 mulicodec fingerprints.'\n    );\n  }\n\n  constructor(options: any) {\n    this.id = options.id;\n    this.controller = options.controller;\n    this.g1KeyPair = options.g1KeyPair;\n    this.g2KeyPair = options.g2KeyPair;\n    if (!this.id) {\n      this.id = '#' + this.fingerprint();\n    }\n\n    if (!this.controller) {\n      this.controller = 'did:key:' + this.fingerprint();\n    }\n\n    this.g1KeyPair.controller = this.controller;\n    this.g2KeyPair.controller = this.controller;\n  }\n\n  fingerprint() {\n    const g1Buffer = this.g1KeyPair.publicKeyBuffer;\n    const g2Buffer = this.g2KeyPair.publicKeyBuffer;\n    const g1AndG2 = Buffer.concat([g1Buffer, g2Buffer]);\n    const buffer = new Uint8Array(2 + g1AndG2.length);\n    buffer[0] = BLS12381G1ANDG2_MULTICODEC_IDENTIFIER;\n    buffer[1] = VARIABLE_INTEGER_TRAILING_BYTE;\n\n    buffer.set(g1AndG2, 2);\n    return `${MULTIBASE_ENCODED_BASE58_IDENTIFIER}${bs58.encode(buffer)}`;\n  }\n\n  export(exportPrivate = false) {\n    return {\n      fingerprint: this.fingerprint(),\n      g1: this.g1KeyPair.toJsonWebKeyPair(exportPrivate),\n      g2: this.g2KeyPair.toJsonWebKeyPair(exportPrivate),\n    };\n  }\n}\n","import { Bls12381KeyPairs } from '../Bls12381KeyPairs';\n\nexport const getVerificationMethod = (\n  instance: any,\n  contentType: string = 'application/did+ld+json'\n) => {\n\n  switch (contentType) {\n    case 'application/did+json': {\n      return  instance.toJsonWebKeyPair();\n    }\n    case 'application/did+cbor': {\n     return  instance.toJsonWebKeyPair();\n    }\n    case 'application/did+ld+json': {\n     return instance.toKeyPair();\n    }\n  }\n  throw new Error(\n    'This implementation of did:key for bls12381 does not support: ' + contentType\n  );\n};\n\n\nexport const keyToDidDoc = async (\n  didKeyPairInstance: any,\n  contentType: string = 'application/did+ld+json'\n) => {\n  let verificationRelationships: any = {\n    verificationMethod: [],\n  };\n  const did = `did:key:${didKeyPairInstance.fingerprint()}`;\n  if (didKeyPairInstance.type === 'Bls12381KeyPairs2020') {\n    const g1 = getVerificationMethod(\n      (didKeyPairInstance as Bls12381KeyPairs).g1KeyPair,\n      contentType\n    );\n    const g2 = getVerificationMethod(\n      (didKeyPairInstance as Bls12381KeyPairs).g2KeyPair,\n      contentType\n    );\n    verificationRelationships.verificationMethod.push(g1);\n    verificationRelationships.verificationMethod.push(g2);\n    verificationRelationships = {\n      ...verificationRelationships,\n      authentication: [g1.id, g2.id],\n      assertionMethod: [g1.id, g2.id],\n      capabilityInvocation: [g1.id, g2.id],\n      capabilityDelegation: [g1.id, g2.id],\n    };\n  } else {\n    const vm = getVerificationMethod(didKeyPairInstance, contentType);\n    verificationRelationships.verificationMethod.push(vm);\n    verificationRelationships = {\n      ...verificationRelationships,\n      authentication: [vm.id],\n      assertionMethod: [vm.id],\n      capabilityInvocation: [vm.id],\n      capabilityDelegation: [vm.id],\n    };\n  }\n\n  const didDocument = {\n    '@context': [\n      'https://www.w3.org/ns/did/v1',\n      {\n        '@base': did,\n      },\n    ],\n    id: did,\n    ...verificationRelationships,\n  };\n\n  return didDocument;\n};\n","import { getResolve, getGet } from '@transmute/did-key-common';\n\nimport { KeyPair } from './KeyPair';\n\nexport const resolve = getResolve(KeyPair);\nexport const get = getGet(resolve);\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1214;","import { Crypto } from '@peculiar/webcrypto';\n\nfunction isNodejs() {\n  return (\n    typeof process === 'object' &&\n    typeof process.versions === 'object' &&\n    typeof process.versions.node !== 'undefined'\n  );\n}\n\nlet crypto: Crypto;\n\nif (isNodejs()) {\n  crypto = new Crypto();\n} else {\n  crypto = window.crypto;\n}\n\nexport default crypto;\n","/*!\n * Copyright (c) 2019-2020 Digital Bazaar, Inc. All rights reserved.\n */\nimport crypto from '../crypto';\n\n// only supported algorithm\nconst KEY_ALGORITHM = 'ECDH-ES+A256KW';\n\n// create static ALGORITHM_ID\nconst ALGORITHM_CONTENT = KEY_ALGORITHM; //new TextEncoder().encode();\nconst ALGORITHM_ID = new Uint8Array(4 + ALGORITHM_CONTENT.length);\n// write length of content as 32-bit big endian integer, then write content\nconst dv = new DataView(\n  ALGORITHM_ID.buffer,\n  ALGORITHM_ID.byteOffset,\n  ALGORITHM_ID.byteLength\n);\ndv.setUint32(0, ALGORITHM_CONTENT.length);\nALGORITHM_ID.set(Buffer.from(ALGORITHM_CONTENT), 4);\n\n// RFC 7518 Section 4.6.2 specifies using SHA-256 for ECDH-ES KDF\n// https://tools.ietf.org/html/rfc7518#section-4.6.2\nconst HASH_ALGORITHM = { name: 'SHA-256' };\n\n// derived keys are always 256-bits\nconst KEY_LENGTH = 256;\n\n/**\n * Derives a 256-bit AES-KW key encryption key from a shared secret that\n * was derived from an ephemeral and static pair\n * of Elliptic Curve Diffie-Hellman keys.\n *\n * The KDF used is described in RFC 7518. This KDF is referenced by RFC 8037,\n * which defines how to perform Curve25519 (X25519) ECDH key agreement.\n *\n * @param {object} options - The options to use.\n * @param {Uint8Array} options.secret - The shared secret (i.e., `Z`) to use.\n * @param {Uint8Array} options.producerInfo - An array of application-specific\n *   bytes describing the consumer (aka the \"encrypter\" or \"sender\").\n * @param {Uint8Array} options.consumerInfo - An array of application-specific\n *   bytes describing the producer (aka the \"decrypter\" or\n *   \"receiver\"/\"recipient\").\n *\n * @returns {Promise<Uint8Array>} - Resolves to the generated key.\n */\nexport async function deriveKey({ secret, producerInfo, consumerInfo }: any) {\n  if (!(secret instanceof Uint8Array && secret.length > 0)) {\n    throw new TypeError('\"secret\" must be a non-empty Uint8Array.');\n  }\n  if (!(producerInfo instanceof Uint8Array && producerInfo.length > 0)) {\n    throw new TypeError('\"producerInfo\" must be a non-empty Uint8Array.');\n  }\n  if (!(consumerInfo instanceof Uint8Array && consumerInfo.length > 0)) {\n    throw new TypeError('\"consumerInfo\" must be a non-empty Uint8Array.');\n  }\n\n  // the output of Concat KDF is hash(roundNumber || Z || OtherInfo)\n  // where roundNumber is always 1 because the hash length is presumed to\n  // ...match the key length, encoded as a big endian 32-bit integer\n  // where OtherInfo is:\n  // AlgorithmID || PartyUInfo || PartyVInfo || SuppPubInfo\n  // where SuppPubInfo is the key length in bits, big endian encoded as a\n  // 32-bit number, i.e., 256 === [0, 0, 1, 0]\n  const input = new Uint8Array(\n    4 + // round number\n    secret.length + // `Z`\n    ALGORITHM_ID.length + // AlgorithmID\n    4 +\n    producerInfo.length + // PartyUInfo\n    4 +\n    consumerInfo.length + // PartyVInfo\n      4\n  ); // SuppPubInfo (key data length in bits)\n  let offset = 0;\n  const dv = new DataView(input.buffer, input.byteOffset, input.byteLength);\n  dv.setUint32(offset, 1);\n  input.set(secret, (offset += 4));\n  input.set(ALGORITHM_ID, (offset += secret.length));\n  dv.setUint32((offset += ALGORITHM_ID.length), producerInfo.length);\n  input.set(producerInfo, (offset += 4));\n  dv.setUint32((offset += producerInfo.length), consumerInfo.length);\n  input.set(consumerInfo, (offset += 4));\n  dv.setUint32((offset += consumerInfo.length), KEY_LENGTH);\n\n  // hash input and return result as derived key\n  return new Uint8Array(await crypto.subtle.digest(HASH_ALGORITHM, input));\n}\n","import { default as bs64 } from 'base64url';\nimport { AESKW } from '@stablelib/aes-kw';\n\nexport interface CreateKekOptions {\n  keyData: Uint8Array;\n}\n\nexport interface WrapKeyOptions {\n  unwrappedKey: Uint8Array;\n}\n\nexport interface UnwrapKeyOptions {\n  wrappedKey: string; //base64url\n}\n\nexport class KeyEncryptionKey {\n  public aeskw: AESKW;\n  public algorithm: any;\n\n  static createKek = async ({ keyData }: CreateKekOptions) => {\n    return new KeyEncryptionKey(keyData);\n  };\n\n  constructor(key: Uint8Array) {\n    if (key.length !== 32) {\n      throw new Error('key must be 32 bytes');\n    }\n    this.aeskw = new AESKW(key);\n    this.algorithm = { name: 'A256KW' };\n  }\n\n  /**\n   * Wraps a cryptographic key.\n   *\n   * @param {object} options - The options to use.\n   * @param {Uint8Array} options.unwrappedKey - The key material as a\n   *   `Uint8Array`.\n   *\n   * @returns {string} - The base64url-encoded wrapped key bytes.\n   */\n  wrapKey({ unwrappedKey }: WrapKeyOptions): string {\n    const wrappedKey = this.aeskw.wrapKey(unwrappedKey);\n    return bs64.encode(Buffer.from(wrappedKey));\n  }\n\n  /**\n   * Unwraps a cryptographic key.\n   *\n   * @param {object} options - The options to use.\n   * @param {string} options.wrappedKey - The wrapped key material as a\n   *   base64url-encoded string.\n   *\n   * @returns {Uint8Array} - Resolves to the key bytes or null if\n   *   the unwrapping fails because the key does not match.\n   */\n  unwrapKey({ wrappedKey }: UnwrapKeyOptions): Uint8Array | null {\n    const _wrappedKey = bs64.toBuffer(wrappedKey);\n    try {\n      return this.aeskw.unwrapKey(_wrappedKey);\n    } catch (e) {\n      // decryption failed\n      console.error(e);\n      return null;\n    }\n  }\n}\n","/*!\n * Copyright (c) 2019-2020 Digital Bazaar, Inc. All rights reserved.\n */\nimport crypto from '../crypto';\nimport { XChaCha20Poly1305, KEY_LENGTH } from '@stablelib/xchacha20poly1305';\n\nexport const JWE_ENC = 'XC20P';\n\n/**\n * Generates a content encryption key (CEK). The 256-bit key is intended to be\n * used as a XChaCha20Poly1305 (draft-irtf-cfrg-xchacha-01) key.\n *\n * @returns {Promise<Uint8Array>} - Resolves to the generated key.\n */\nexport async function generateKey() {\n  // generate content encryption key\n  return crypto.getRandomValues(new Uint8Array(KEY_LENGTH));\n}\n\n/**\n * Encrypts some data. The data will be encrypted using the given\n * 256-bit XChaCha20Poly1305 (draft-irtf-cfrg-xchacha-01) content encryption\n * key (CEK).\n *\n * @param {object} options - The options to use.\n * @param {Uint8Array} options.data - The data to encrypt.\n * @param {Uint8Array} [options.additionalData] - Optional additional\n *   authentication data.\n * @param {Uint8Array} options.cek - The content encryption key to use.\n *\n * @returns {Promise<object>} - Resolves to `{ciphertext, iv, tag}`.\n */\nexport async function encrypt({ data, additionalData, cek }: any) {\n  if (!(data instanceof Uint8Array)) {\n    throw new TypeError('\"data\" must be a Uint8Array.');\n  }\n  if (!(cek instanceof Uint8Array)) {\n    throw new TypeError('\"cek\" must be a Uint8Array.');\n  }\n\n  const cipher = new XChaCha20Poly1305(cek);\n  // Note: Uses a random value here as a counter is not viable -- multiple\n  // recipients may be trying to update at the same time and use the same\n  // counter breaking security; using XChaCha20Poly1305 once available will\n  // further reduce chances of a collision as it has a 192-bit IV\n  const iv = crypto.getRandomValues(new Uint8Array(cipher.nonceLength));\n\n  // encrypt data\n  const encrypted = cipher.seal(iv, data, additionalData);\n\n  // split ciphertext and tag\n  const ciphertext = encrypted.subarray(0, encrypted.length - cipher.tagLength);\n  const tag = encrypted.subarray(encrypted.length - cipher.tagLength);\n\n  return {\n    ciphertext,\n    iv,\n    tag,\n  };\n}\n\n/**\n * Decrypts some encrypted data. The data must have been encrypted using\n * the given XChaCha20Poly1305 (draft-irtf-cfrg-xchacha-01) content encryption\n * key (CEK).\n *\n * @param {object} options - The options to use.\n * @param {Uint8Array} options.ciphertext - The data to decrypt.\n * @param {Uint8Array} options.iv - The initialization vector (aka nonce).\n * @param {Uint8Array} options.tag - The authentication tag.\n * @param {Uint8Array} [options.additionalData] - Optional additional\n *   authentication data.\n * @param {Uint8Array} options.cek - The content encryption key to use.\n *\n * @returns {Promise<Uint8Array>} The decrypted data.\n */\nexport async function decrypt({\n  ciphertext,\n  iv,\n  tag,\n  additionalData,\n  cek,\n}: any) {\n  if (!(iv instanceof Uint8Array)) {\n    throw new Error('Invalid or missing \"iv\".');\n  }\n  if (!(ciphertext instanceof Uint8Array)) {\n    throw new Error('Invalid or missing \"ciphertext\".');\n  }\n  if (!(tag instanceof Uint8Array)) {\n    throw new Error('Invalid or missing \"tag\".');\n  }\n  if (!(cek instanceof Uint8Array)) {\n    throw new TypeError('\"cek\" must be a Uint8Array.');\n  }\n\n  // decrypt `ciphertext`\n  const cipher = new XChaCha20Poly1305(cek);\n  const encrypted = new Uint8Array(ciphertext.length + cipher.tagLength);\n  encrypted.set(ciphertext);\n  encrypted.set(tag, ciphertext.length);\n  return cipher.open(iv, encrypted, additionalData);\n}\n","/*!\n * Copyright (c) 2019-2020 Digital Bazaar, Inc. All rights reserved.\n */\nimport base64url from 'base64url';\n\nimport * as recAlgorithm from './algorithms/recommended';\nimport { stringToUint8Array } from './util';\n\nconst CIPHER_ALGORITHMS: any = {\n  [recAlgorithm.cipher.JWE_ENC]: recAlgorithm.cipher,\n};\n\nexport class DecryptTransformer {\n  public keyAgreementKey: any;\n  public KeyPairClass: any;\n\n  constructor({ keyAgreementKey, KeyPairClass }: any = {}) {\n    if (!keyAgreementKey) {\n      throw new TypeError('\"keyAgreementKey\" is a required parameter.');\n    }\n    this.KeyPairClass = KeyPairClass;\n    this.keyAgreementKey = keyAgreementKey;\n  }\n\n  async transform(chunk: any, controller: any) {\n    // assumes `chunk` is an object with a JWE under the `jwe` property\n    if (!(chunk && typeof chunk === 'object')) {\n      throw new TypeError('\"chunk\" must be an object.');\n    }\n    const { jwe } = chunk;\n\n    const data = await this.decrypt(jwe);\n    if (data === null) {\n      const error = new Error('Invalid decryption key.');\n      error.name = 'DataError';\n      throw error;\n    }\n\n    controller.enqueue(data);\n  }\n\n  async decrypt(jwe: any) {\n    // validate JWE\n    if (!(jwe && typeof jwe === 'object')) {\n      throw new TypeError('\"jwe\" must be an object.');\n    }\n    if (typeof jwe.protected !== 'string') {\n      throw new TypeError('\"jwe.protected\" is missing or not a string.');\n    }\n    if (typeof jwe.iv !== 'string') {\n      throw new Error('Invalid or missing \"iv\".');\n    }\n    if (typeof jwe.ciphertext !== 'string') {\n      throw new Error('Invalid or missing \"ciphertext\".');\n    }\n    if (typeof jwe.tag !== 'string') {\n      throw new Error('Invalid or missing \"tag\".');\n    }\n\n    // validate encryption header\n    let header;\n    let additionalData;\n    try {\n      // ASCII(BASE64URL(UTF8(JWE Protected Header)))\n      additionalData = stringToUint8Array(jwe.protected);\n      header = JSON.parse(base64url.toBuffer(jwe.protected).toString());\n    } catch (e) {\n      throw new Error('Invalid JWE \"protected\" header.');\n    }\n    if (!(header.enc && typeof header.enc === 'string')) {\n      throw new Error('Invalid JWE \"enc\" header.');\n    }\n    const cipher = CIPHER_ALGORITHMS[header.enc];\n    if (!cipher) {\n      throw new Error('Unsupported encryption algorithm \"${header.enc}\".');\n    }\n    if (!Array.isArray(jwe.recipients)) {\n      throw new TypeError('\"jwe.recipients\" must be an array.');\n    }\n\n    // find `keyAgreementKey` matching recipient\n    const { keyAgreementKey } = this;\n\n    const _findRecipient = (recipients: any, key: any) => {\n      return recipients.find(\n        (rec: any) =>\n          (rec.header && rec.header.kid === key.id) ||\n          rec.header.kid.split('#').pop() === key.id.split('#').pop()\n      );\n    };\n\n    const recipient = _findRecipient(jwe.recipients, keyAgreementKey);\n\n    if (!recipient) {\n      console.log(jwe.recipients, keyAgreementKey);\n      throw new Error('No matching recipient found for key agreement key.');\n    }\n    // get wrapped CEK\n    const { encrypted_key: wrappedKey } = recipient;\n    if (typeof wrappedKey !== 'string') {\n      throw new Error('Invalid or missing \"encrypted_key\".');\n    }\n\n    // TODO: consider a cache of encrypted_key => CEKs to reduce unwrapping\n    // calls which may even need to hit the network (e.g., Web KMS)\n\n    // derive KEK and unwrap CEK\n    const { epk } = recipient.header;\n\n    const { kek } = await this.KeyPairClass.kekFromEphemeralPeer({\n      keyAgreementKey,\n      epk,\n    });\n    const cek = await kek.unwrapKey({ wrappedKey });\n    if (!cek) {\n      // failed to unwrap key\n      return null;\n    }\n\n    // decrypt content\n    const { ciphertext, iv, tag } = jwe;\n    return cipher.decrypt({\n      ciphertext: base64url.toBuffer(ciphertext),\n      iv: base64url.toBuffer(iv),\n      tag: base64url.toBuffer(tag),\n      additionalData,\n      cek,\n    });\n  }\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","/*!\n * Copyright (c) 2019-2020 Digital Bazaar, Inc. All rights reserved.\n */\nimport base64url from 'base64url';\n\n// 1 MiB = 1048576\nconst DEFAULT_CHUNK_SIZE = 1048576;\n\nexport class EncryptTransformer {\n  public recipients: any;\n  public encodedProtectedHeader: any;\n  public cipher: any;\n  public additionalData: any;\n  public cek: any;\n  public chunkSize: any;\n  public offset: any;\n  public totalOffset: any;\n  public index: any;\n  public buffer: any;\n\n  constructor({\n    recipients,\n    encodedProtectedHeader,\n    cipher,\n    additionalData,\n    cek,\n    chunkSize = DEFAULT_CHUNK_SIZE,\n  }: any = {}) {\n    this.recipients = recipients;\n    this.encodedProtectedHeader = encodedProtectedHeader;\n    this.cipher = cipher;\n    this.additionalData = additionalData;\n    this.cek = cek;\n    this.chunkSize = chunkSize;\n    this.offset = 0;\n    this.totalOffset = 0;\n    this.index = 0;\n  }\n\n  start() {\n    this.buffer = new Uint8Array(this.chunkSize);\n  }\n\n  async transform(chunk: any, controller: any) {\n    const { buffer } = this;\n\n    // assumes `chunk` is a Uint8Array...\n    if (!(chunk instanceof Uint8Array)) {\n      throw new TypeError('\"chunk\" must be an object.');\n    }\n    while (chunk) {\n      const space = buffer.length - this.offset;\n      if (chunk.length <= space) {\n        buffer.set(chunk, this.offset);\n        this.offset += chunk.byteLength;\n        this.totalOffset += chunk.byteLength;\n        chunk = null;\n      } else {\n        const partial = new Uint8Array(chunk.buffer, chunk.byteOffset, space);\n        chunk = new Uint8Array(\n          chunk.buffer,\n          chunk.byteOffset + space,\n          chunk.length - space\n        );\n        buffer.set(partial, this.offset);\n        this.offset += space;\n        this.totalOffset += space;\n      }\n\n      // flush if buffer is full and more data remains\n      if (chunk) {\n        await this.flush(controller);\n      }\n    }\n  }\n\n  async flush(controller: any) {\n    if (this.offset === 0) {\n      // nothing to flush\n      return;\n    }\n\n    // encrypt data\n    const { buffer } = this;\n    const data = new Uint8Array(buffer.buffer, buffer.byteOffset, this.offset);\n    const jwe = await this.encrypt(data);\n\n    // clear buffer\n    this.offset = 0;\n\n    controller.enqueue({\n      index: this.index++,\n      offset: this.totalOffset,\n      jwe,\n    });\n  }\n\n  async encrypt(data: any) {\n    const { cipher, additionalData, cek } = this;\n    const { ciphertext, iv, tag } = await cipher.encrypt({\n      data,\n      additionalData,\n      cek,\n    });\n\n    // represent encrypted data as JWE\n    const jwe = {\n      protected: this.encodedProtectedHeader,\n      recipients: this.recipients,\n      iv: base64url.encode(iv),\n      ciphertext: base64url.encode(ciphertext),\n      tag: base64url.encode(tag),\n    };\n    return jwe;\n  }\n}\n","import { types } from '@transmute/did-key-common';\n\nexport const getEpkGenerator = (KeyPair: types.KeyPairClass, opts: any) => {\n  const generateEphemeralKeyPair = async (): Promise<types.EpkResult> => {\n    const k0 = await KeyPair.generate(opts);\n    const keypair = await k0.toJsonWebKeyPair(true);\n\n    return {\n      keypair,\n      epk: keypair.publicKeyJwk,\n    };\n  };\n  return generateEphemeralKeyPair;\n};\n","import keyto from '@trust/keyto';\nimport base64url from 'base64url';\nimport crypto from 'crypto';\nimport bs58 from 'bs58';\nimport secp256k1 from 'secp256k1';\n\nimport canonicalize from 'canonicalize';\n\nconst compressedHexEncodedPublicKeyLength = 66;\n\n/** Secp256k1 Private Key  */\nexport interface ISecp256k1PrivateKeyJwk {\n  /** key type */\n  kty: string;\n\n  /** curve */\n  crv: string;\n\n  /** private point */\n  d: string;\n\n  /** public point */\n  x: string;\n\n  /** public point */\n  y: string;\n\n  /** key id */\n  kid: string;\n}\n\n/** Secp256k1 Public Key  */\nexport interface ISecp256k1PublicKeyJwk {\n  /** key type */\n  kty: string;\n\n  /** curve */\n  crv: string;\n\n  /** public point */\n  x: string;\n\n  /** public point */\n  y: string;\n\n  /** key id */\n  kid: string;\n}\n\n/**\n * Example\n * ```js\n * {\n *  kty: 'EC',\n *  crv: 'secp256k1',\n *  d: 'rhYFsBPF9q3-uZThy7B3c4LDF_8wnozFUAEm5LLC4Zw',\n *  x: 'dWCvM4fTdeM0KmloF57zxtBPXTOythHPMm1HCLrdd3A',\n *  y: '36uMVGM7hnw-N6GnjFcihWE3SkrhMLzzLCdPMXPEXlA',\n *  kid: 'JUvpllMEYUZ2joO59UNui_XYDqxVqiFLLAJ8klWuPBw'\n * }\n * ```\n * See [rfc7638](https://tools.ietf.org/html/rfc7638) for more details on Jwk.\n */\nexport const getKid = (\n  jwk: ISecp256k1PrivateKeyJwk | ISecp256k1PublicKeyJwk\n) => {\n  const copy = { ...jwk } as any;\n  delete copy.d;\n  delete copy.kid;\n  delete copy.alg;\n  const digest = crypto\n    .createHash('sha256')\n    .update(canonicalize(copy))\n    .digest();\n\n  return base64url.encode(Buffer.from(digest));\n};\n\n/** convert compressed hex encoded private key to jwk */\nexport const privateKeyJwkFromPrivateKeyHex = (privateKeyHex: string) => {\n  const jwk = {\n    ...keyto.from(privateKeyHex, 'blk').toJwk('private'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert compressed hex encoded public key to jwk */\nexport const publicKeyJwkFromPublicKeyHex = (publicKeyHex: string) => {\n  let key = publicKeyHex;\n  if (publicKeyHex.length === compressedHexEncodedPublicKeyLength) {\n    const keyBin = secp256k1.publicKeyConvert(\n      Buffer.from(publicKeyHex, 'hex'),\n      false\n    );\n    key = Buffer.from(keyBin).toString('hex');\n  }\n  const jwk = {\n    ...keyto.from(key, 'blk').toJwk('public'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert pem encoded private key to jwk */\nexport const privateKeyJwkFromPrivateKeyPem = (privateKeyPem: string) => {\n  const jwk = {\n    ...keyto.from(privateKeyPem, 'pem').toJwk('private'),\n    crv: 'secp256k1',\n  };\n  // console.log(jwk);\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert pem encoded public key to jwk */\nexport const publicKeyJwkFromPublicKeyPem = (publicKeyPem: string) => {\n  const jwk = {\n    ...keyto.from(publicKeyPem, 'pem').toJwk('public'),\n    crv: 'secp256k1',\n  };\n  const kid = getKid(jwk);\n\n  return {\n    ...jwk,\n    kid,\n  };\n};\n\n/** convert jwk to hex encoded private key */\nexport const privateKeyHexFromJwk = (jwk: ISecp256k1PrivateKeyJwk) =>\n  keyto\n    .from(\n      {\n        ...jwk,\n        crv: 'K-256',\n      },\n      'jwk'\n    )\n    .toString('blk', 'private');\n\n/** convert jwk to hex encoded public key */\nexport const publicKeyHexFromJwk = (jwk: ISecp256k1PublicKeyJwk) => {\n  const uncompressedPublicKey = keyto\n    .from(\n      {\n        ...jwk,\n        crv: 'K-256',\n      },\n      'jwk'\n    )\n    .toString('blk', 'public');\n\n  const compressed = secp256k1.publicKeyConvert(\n    Buffer.from(uncompressedPublicKey, 'hex'),\n    true\n  );\n  return Buffer.from(compressed).toString('hex');\n};\n\n/** convert jwk to binary encoded private key */\nexport const privateKeyUInt8ArrayFromJwk = (jwk: ISecp256k1PrivateKeyJwk) => {\n  const privateKeyHex = privateKeyHexFromJwk(jwk);\n  return Buffer.from(privateKeyHex, 'hex');\n};\n\n/** convert jwk to binary encoded public key */\nexport const publicKeyUInt8ArrayFromJwk = (jwk: ISecp256k1PublicKeyJwk) => {\n  const publicKeyHex = publicKeyHexFromJwk(jwk);\n  return Buffer.from(publicKeyHex, 'hex');\n};\n\n/** convert publicKeyHex to base58 */\nexport const publicKeyBase58FromPublicKeyHex = (publicKeyHex: string) => {\n  return bs58.encode(Buffer.from(publicKeyHex, 'hex'));\n};\n\n/** convert publicKeyHex to base58 */\nexport const privateKeyBase58FromPrivateKeyHex = (privateKeyHex: string) => {\n  return bs58.encode(Buffer.from(privateKeyHex, 'hex'));\n};\n\nexport const privateKeyUInt8ArrayFromPrivateKeyBase58 = (\n  privateKeyBase58: string\n) => {\n  return bs58.decode(privateKeyBase58);\n};\n\nexport const publicKeyUInt8ArrayFromPublicKeyBase58 = (\n  publicKeyBase58: string\n) => {\n  return bs58.decode(publicKeyBase58);\n};\n\nexport const publicKeyHexFromPrivateKeyHex = (privateKeyHex: string) => {\n  const publicKey = secp256k1.publicKeyCreate(\n    new Uint8Array(Buffer.from(privateKeyHex, 'hex'))\n  );\n  return Buffer.from(publicKey).toString('hex');\n};\n","import bs58 from 'bs58';\n\nimport {\n  convertPublicKeyToX25519,\n  convertSecretKeyToX25519,\n} from '@stablelib/ed25519';\nimport * as x25519 from '@stablelib/x25519';\nimport * as keyUtils from './keyUtils';\n\nimport base64url from 'base64url';\nimport crypto from 'crypto';\n\nimport * as common from '@transmute/did-key-common';\n\nimport {\n  deriveKey,\n  getEpkGenerator,\n  KeyEncryptionKey,\n} from '@transmute/did-key-cipher';\n\nconst KEY_TYPE = 'X25519KeyAgreementKey2019';\n\n@common.types.staticImplements<common.types.KeyAgreementKeyPairClass>()\nexport class X25519KeyPair implements common.types.KeyPairInstance {\n  public id: string;\n  public type: string;\n  public controller: string;\n\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  public static JWE_ALG: common.types.ECDH_ES_A256KW = 'ECDH-ES+A256KW';\n\n  static fingerprintFromPublicKey(\n    keypair: common.types.KeyPairJwk | common.types.KeyPairBase58\n  ) {\n    let pubkeyBytes: any;\n\n    if ((keypair as any).publicKeyBase58) {\n      pubkeyBytes = bs58.decode(\n        (keypair as common.types.KeyPairBase58).publicKeyBase58\n      );\n    }\n\n    if ((keypair as any).publicKeyJwk) {\n      pubkeyBytes = bs58.decode(\n        keyUtils.publicKeyBase58FromPublicKeyJwk(\n          (keypair as common.types.KeyPairJwk).publicKeyJwk\n        )\n      );\n    }\n\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L80\n\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    buffer[0] = 0xec;\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${bs58.encode(buffer)}`;\n  }\n\n  static async generate(options: common.types.KeyPairGenerateOptions) {\n    let key;\n\n    key = x25519.generateKeyPair({\n      isAvailable: true,\n      randomBytes: options.secureRandom,\n    });\n\n    if (!key) {\n      throw new Error('options.seed or options.secureRandom is required.');\n    }\n\n    const publicKeyBase58 = bs58.encode(key.publicKey);\n    const privateKeyBase58 = bs58.encode(key.secretKey);\n\n    const did = `did:key:${X25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    const keyId = `#${X25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    return new X25519KeyPair({\n      id: keyId,\n      controller: did,\n      publicKeyBase58,\n      privateKeyBase58,\n    } as common.types.KeyPairBase58);\n  }\n\n  static async generateEphemeralKeyPair(): Promise<common.types.EpkResult> {\n    return getEpkGenerator(X25519KeyPair, {\n      secureRandom: () => {\n        return crypto.randomBytes(32);\n      },\n    })();\n  }\n\n  static async kekFromEphemeralPeer({\n    keyAgreementKey,\n    epk,\n  }: common.types.KeyEncryptionKeyFromEphemeralPublicKeyOptions) {\n    if (!(epk && typeof epk === 'object')) {\n      throw new TypeError('\"epk\" must be an object.');\n    }\n\n    // decode public key material\n    const publicKey = base64url.toBuffer(epk.x);\n\n    // convert to LD key for Web KMS\n    const ephemeralPublicKey = {\n      type: KEY_TYPE,\n      publicKeyBase58: bs58.encode(publicKey),\n    };\n\n    // safe to use IDs like in rfc7518 or does\n    // https://tools.ietf.org/html/rfc7748#section-7 pose any issues?\n\n    // \"Party U Info\"\n    const producerInfo = publicKey;\n    // \"Party V Info\"\n    const consumerInfo = Buffer.from(keyAgreementKey.id);\n    // converts keys again....\n    // base58 encoding should only be used at the network / serialization boundary.\n    const secret = await (keyAgreementKey as common.types.KeyAgreementKeyPairInstance).deriveSecret(\n      {\n        publicKey: ephemeralPublicKey,\n      } as any\n    );\n    const keyData = await deriveKey({ secret, producerInfo, consumerInfo });\n    return {\n      kek: await KeyEncryptionKey.createKek({ keyData }),\n    };\n  }\n\n  static async kekFromStaticPeer({\n    ephemeralKeyPair,\n    staticPublicKey,\n  }: common.types.KeyEncryptionKeyFromStaticPublicKeyOptions) {\n    // TODO: consider accepting JWK format for `staticPublicKey` not just LD key\n    if (\n      !(\n        staticPublicKey.type === 'X25519KeyAgreementKey2019' ||\n        staticPublicKey.type === 'JsonWebKey2020'\n      )\n    ) {\n      throw new Error(\n        `\"staticPublicKey.type\" must be \"X25519KeyAgreementKey2019\".`\n      );\n    }\n\n    const epkPair = await X25519KeyPair.from(ephemeralKeyPair.keypair);\n\n    // \"Party U Info\"\n    const producerInfo = epkPair.publicKeyBuffer;\n    // \"Party V Info\"\n    const consumerInfo = Buffer.from(staticPublicKey.id);\n\n    const secret = await epkPair.deriveSecret({\n      publicKey: staticPublicKey,\n    } as any);\n    const keyData = await deriveKey({ secret, producerInfo, consumerInfo });\n    return {\n      kek: await KeyEncryptionKey.createKek({ keyData }),\n      epk: ephemeralKeyPair.epk,\n      apu: base64url.encode(producerInfo),\n      apv: base64url.encode(consumerInfo as any),\n    };\n  }\n\n  static fromFingerprint({ fingerprint }: any) {\n    // skip leading `z` that indicates base58 encoding\n    const buffer = bs58.decode(fingerprint.substr(1));\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L80\n    if (buffer[0] === 0xec && buffer[1] === 0x01) {\n      const publicKeyBase58 = bs58.encode(buffer.slice(2));\n      const did = `did:key:${X25519KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      const keyId = `#${X25519KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      return new X25519KeyPair({\n        id: keyId,\n        controller: did,\n        publicKeyBase58,\n      } as common.types.KeyPairBase58);\n    }\n\n    throw new Error(`Unsupported Fingerprint Type: ${fingerprint}`);\n  }\n\n  static fromEdKeyPair(ed25519KeyPair: common.types.KeyPairBase58) {\n    let publicKeyBase58;\n    let privateKeyBase58;\n\n    if (ed25519KeyPair.publicKeyBase58) {\n      publicKeyBase58 = bs58.encode(\n        convertPublicKeyToX25519(bs58.decode(ed25519KeyPair.publicKeyBase58))\n      );\n    }\n\n    if (ed25519KeyPair.privateKeyBase58) {\n      privateKeyBase58 = bs58.encode(\n        convertSecretKeyToX25519(bs58.decode(ed25519KeyPair.privateKeyBase58))\n      );\n    }\n\n    return new X25519KeyPair({\n      controller: ed25519KeyPair.controller,\n      publicKeyBase58,\n      privateKeyBase58,\n    } as common.types.KeyPairBase58);\n  }\n\n  static from(options: common.types.KeyPairBase58 | common.types.KeyPairJwk) {\n    let privateKeyBase58;\n    let publicKeyBase58;\n\n    if ((options as common.types.KeyPairBase58).publicKeyBase58) {\n      publicKeyBase58 = (options as common.types.KeyPairBase58).publicKeyBase58;\n    }\n\n    if ((options as common.types.KeyPairBase58).privateKeyBase58) {\n      privateKeyBase58 = (options as common.types.KeyPairBase58)\n        .privateKeyBase58;\n    }\n\n    if ((options as common.types.KeyPairJwk).privateKeyJwk) {\n      privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyJwk(\n        (options as common.types.KeyPairJwk).privateKeyJwk\n      );\n    }\n\n    if ((options as common.types.KeyPairJwk).publicKeyJwk) {\n      publicKeyBase58 = keyUtils.publicKeyBase58FromPublicKeyJwk(\n        (options as common.types.KeyPairJwk).publicKeyJwk\n      );\n    }\n\n    return new X25519KeyPair({\n      ...options,\n      privateKeyBase58,\n      publicKeyBase58,\n    });\n  }\n\n  constructor(options: common.types.KeyPairJwk | common.types.KeyPairBase58) {\n    this.type = 'X25519KeyAgreementKey2019';\n    this.id = options.id;\n    this.controller = options.controller;\n\n    if ((options as common.types.KeyPairBase58).publicKeyBase58) {\n      this.publicKeyBuffer = Buffer.from(\n        bs58.decode((options as common.types.KeyPairBase58).publicKeyBase58)\n      );\n    } else if ((options as common.types.JsonWebKeyPair).publicKeyJwk) {\n      this.publicKeyBuffer = Buffer.from(\n        bs58.decode(\n          keyUtils.publicKeyBase58FromPublicKeyJwk(\n            (options as common.types.JsonWebKeyPair).publicKeyJwk\n          )\n        )\n      );\n    } else {\n      throw new Error(\n        'X25519KeyPair requires publicKeyBase58 or publicKeyJwk, received none.'\n      );\n    }\n\n    if ((options as common.types.KeyPairBase58).privateKeyBase58) {\n      this.privateKeyBuffer = Buffer.from(\n        bs58.decode((options as common.types.KeyPairBase58).privateKeyBase58)\n      );\n    }\n\n    if ((options as common.types.JsonWebKeyPair).privateKeyJwk) {\n      this.privateKeyBuffer = Buffer.from(\n        bs58.decode(\n          keyUtils.privateKeyBase58FromPrivateKeyJwk(\n            (options as common.types.JsonWebKeyPair).privateKeyJwk\n          )\n        )\n      );\n    }\n\n    if (!this.id) {\n      this.id = `#${this.fingerprint()}`;\n    }\n  }\n\n  fingerprint() {\n    return X25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    } as any);\n  }\n\n  verifyFingerprint(fingerprint: any) {\n    // fingerprint should have `z` prefix indicating\n    // that it's multi-base encoded\n    if (!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      return {\n        error: new Error('`fingerprint` must be a multibase encoded string.'),\n        valid: false,\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = bs58.decode(fingerprint.slice(1));\n    } catch (e) {\n      return { error: e, valid: false };\n    }\n    let publicKeyBuffer = this.publicKeyBuffer;\n\n    // validate the first two multicodec bytes 0xec01\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L80\n    const valid =\n      fingerprintBuffer.slice(0, 2).toString('hex') === 'ec01' &&\n      publicKeyBuffer.equals(fingerprintBuffer.slice(2));\n    if (!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false,\n      };\n    }\n    return { valid };\n  }\n\n  toKeyPair(_private: boolean = false): common.types.LinkedDataKeyPair {\n    let kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n    if (_private) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(_private: boolean = false): common.types.JsonWebKeyPair {\n    let kp: any = {\n      id: this.id,\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: this.toJwk(),\n    };\n    delete kp.publicKeyJwk.kid;\n    if (_private) {\n      kp.privateKeyJwk = this.toJwk(true);\n      delete kp.privateKeyJwk.kid;\n    }\n\n    return kp;\n  }\n\n  toJwk(_private: boolean = false) {\n    const publicKeyBase58 = bs58.encode(this.publicKeyBuffer);\n    if (_private) {\n      return keyUtils.privateKeyJwkFromPrivateKeyBase58(\n        publicKeyBase58,\n        bs58.encode(this.privateKeyBuffer)\n      );\n    }\n    return keyUtils.publicKeyJwkFromPublicKeyBase58(publicKeyBase58);\n  }\n\n  deriveSecret(options: common.types.DeriveSecretOptions) {\n    let remotePubkeyBytes;\n\n    const { publicKey } = options;\n\n    if ((publicKey as any).publicKeyBase58) {\n      remotePubkeyBytes = bs58.decode(\n        (publicKey as common.types.LinkedDataKeyPair).publicKeyBase58\n      );\n    } else if ((publicKey as any).publicKeyJwk) {\n      remotePubkeyBytes = bs58.decode(\n        keyUtils.publicKeyBase58FromPublicKeyJwk(\n          (publicKey as common.types.JsonWebKeyPair).publicKeyJwk\n        )\n      );\n    }\n\n    const privateKeyBytes = this.privateKeyBuffer as Buffer;\n\n    const scalarMultipleResult = x25519.sharedKey(\n      new Uint8Array(privateKeyBytes),\n      new Uint8Array(remotePubkeyBytes),\n      true\n    );\n\n    return scalarMultipleResult;\n  }\n}\n","\n'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./did-key-bls12381.cjs.production.min.js')\n} else {\n  module.exports = require('./did-key-bls12381.cjs.development.js')\n}\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { createAction } from 'redux-actions';\n\nexport const setUniversalWalletProp = createAction(\n  'universal-wallet/SET_UNIVERSAL_WALLET_PROP',\n  (payload) => payload\n);\n","import { handleActions } from \"redux-actions\";\nimport { setUniversalWalletProp } from \"./actions\";\n\nconst initialState = {\n  name: \"UniversalWallet2020\",\n  status: \"UNLOCKED\",\n  contents: [],\n  vaultEndpoint: \"https://edv.did.ai/edvs\",\n  isSyncEnabled: true,\n  isSyncing: false,\n};\n\nexport default handleActions(\n  {\n    [setUniversalWalletProp]: (state, { payload }) => ({\n      ...state,\n      ...payload,\n    }),\n  },\n  initialState\n);\n","import { connect } from 'react-redux';\nimport * as actions from './actions';\n\nexport default connect(({ wallet }) => ({ wallet }), { ...actions });\n","import reducer from './reducer';\nimport container from './container';\n\nexport default {\n  reducer,\n  container,\n};\n","import { compose } from 'recompose';\nimport withRedux from './redux';\nimport withHandlers from './handlers';\n\nexport default compose(withRedux, withHandlers);\n","import { connectRouter } from \"connected-react-router\";\n\nimport history from \"./history\";\n\nimport wallet from \"./universal-wallet\";\n\nexport default {\n  router: connectRouter(history),\n  wallet: wallet.reducer,\n};\n","import crypto from \"crypto\";\n\nimport * as ed25519 from \"@transmute/did-key-ed25519\";\nimport * as x25519 from \"@transmute/did-key-x25519\";\nimport * as secp256k1 from \"@transmute/did-key-secp256k1\";\nimport * as bls12381 from \"@transmute/did-key-bls12381\";\nimport * as didKeyWebCrypto from \"@transmute/did-key-web-crypto\";\n\nexport const generateEd25519 = async (keys, contentType) => {\n  let _keys = keys;\n  let ed25519Key;\n  let x25519Key;\n  if (keys !== null) {\n    ed25519Key = await ed25519.Ed25519KeyPair.from(_keys.ed25519);\n    x25519Key = await x25519.X25519KeyPair.from(_keys.x25519);\n  } else {\n    ed25519Key = await ed25519.Ed25519KeyPair.generate({\n      secureRandom: () => {\n        return crypto.randomBytes(32);\n      },\n    });\n    x25519Key = await x25519.X25519KeyPair.fromEdKeyPair(\n      await ed25519Key.toKeyPair(true)\n    );\n  }\n  _keys = {\n    ed25519:\n      contentType === \"application/did+ld+json\"\n        ? await ed25519Key.toKeyPair(true)\n        : await ed25519Key.toJsonWebKeyPair(true),\n    x25519:\n      contentType === \"application/did+ld+json\"\n        ? await x25519Key.toKeyPair(true)\n        : await x25519Key.toJsonWebKeyPair(true),\n  };\n  const resolutionResponse = await ed25519.driver.resolve(\n    _keys.ed25519.controller,\n    {\n      accept: contentType,\n    }\n  );\n\n  return {\n    keys: _keys,\n    resolutionResponse,\n  };\n};\n\nexport const generateX25519 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    keyPair = await x25519.X25519KeyPair.from(keys.key);\n  } else {\n    keyPair = await x25519.X25519KeyPair.generate({\n      secureRandom: () => {\n        return crypto.randomBytes(32);\n      },\n    });\n  }\n  _keys = {\n    key:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.toKeyPair(true)\n        : await keyPair.toJsonWebKeyPair(true),\n  };\n  const resolutionResponse = await x25519.driver.resolve(_keys.key.controller, {\n    accept: contentType,\n  });\n  return {\n    keys: _keys,\n    resolutionResponse,\n  };\n};\n\nexport const generateSecp256k1 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    keyPair = await secp256k1.Secp256k1KeyPair.from(keys.key);\n  } else {\n    keyPair = await secp256k1.Secp256k1KeyPair.generate({\n      secureRandom: () => {\n        return crypto.randomBytes(32);\n      },\n    });\n  }\n  _keys = {\n    key:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.toKeyPair(true)\n        : await keyPair.toJsonWebKeyPair(true),\n  };\n  const resolutionResponse= await secp256k1.driver.resolve(_keys.key.controller, {\n    accept: contentType,\n  });\n  return {\n    keys: _keys,\n    resolutionResponse,\n  };\n};\n\nexport const generateBls12381 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    console.log(keys)\n    keyPair = new bls12381.Bls12381KeyPairs({\n      id: keys.g1.controller.split('did:key:').pop(),\n      controller: keys.g1.controller,\n      g1KeyPair: await bls12381.Bls12381G1KeyPair.from(keys.g1),\n      g2KeyPair: await bls12381.Bls12381G2KeyPair.from(keys.g2)\n    });\n  } else {\n    keyPair = await bls12381.Bls12381KeyPairs.generate();\n  }\n  _keys = {\n    g1:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.g1KeyPair.toKeyPair(true)\n        : await keyPair.g1KeyPair.toJsonWebKeyPair(true),\n    g2:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.g2KeyPair.toKeyPair(true)\n        : await keyPair.g2KeyPair.toJsonWebKeyPair(true),\n  };\n  const resolutionResponse = await bls12381.driver.resolve(_keys.g1.controller, {\n    accept: contentType,\n  });\n  return {\n    keys: _keys,\n    resolutionResponse,\n  };\n};\n\nexport const generateP256 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    keyPair = await didKeyWebCrypto.KeyPair.from(keys.key);\n  } else {\n    keyPair = await didKeyWebCrypto.KeyPair.generate({\n      kty: \"EC\",\n      crvOrSize: \"P-256\",\n    });\n  }\n  _keys = {\n    key:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.toKeyPair(true)\n        : await keyPair.toJsonWebKeyPair(true),\n  };\n  const resolutionResponse = await didKeyWebCrypto.driver.resolve(\n    _keys.key.controller,\n    {\n      accept: contentType,\n    }\n  );\n  return {\n    keys: _keys,\n    resolutionResponse,\n  };\n};\n\nexport const generateP384 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    keyPair = await didKeyWebCrypto.KeyPair.from(keys.key);\n  } else {\n    keyPair = await didKeyWebCrypto.KeyPair.generate({\n      kty: \"EC\",\n      crvOrSize: \"P-384\",\n    });\n  }\n  _keys = {\n    key:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.toKeyPair(true)\n        : await keyPair.toJsonWebKeyPair(true),\n  };\n  const resolutionResponse = await didKeyWebCrypto.driver.resolve(\n    _keys.key.controller,\n    {\n      accept: contentType,\n    }\n  );\n  return {\n    keys: _keys,\n    resolutionResponse,\n  };\n};\n\nexport const generateP521 = async (keys, contentType) => {\n  let _keys = keys;\n  let keyPair;\n  if (_keys !== null) {\n    keyPair = await didKeyWebCrypto.KeyPair.from(keys.key);\n  } else {\n    keyPair = await didKeyWebCrypto.KeyPair.generate({\n      kty: \"EC\",\n      crvOrSize: \"P-521\",\n    });\n  }\n  _keys = {\n    key:\n      contentType === \"application/did+ld+json\"\n        ? await keyPair.toKeyPair(true)\n        : await keyPair.toJsonWebKeyPair(true),\n  };\n  const resolutionResponse = await didKeyWebCrypto.driver.resolve(\n    _keys.key.controller,\n    {\n      accept: contentType,\n    }\n  );\n  return {\n    keys: _keys,\n    resolutionResponse,\n  };\n};\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\n\nimport 'brace';\nimport 'brace/mode/json';\nimport 'brace/theme/github';\n\nimport Base from \"../base/base\";\nimport {\n    generateEd25519,\n    generateX25519,\n    generateSecp256k1,\n    generateBls12381,\n    generateP256,\n    generateP384,\n    generateP521,\n  } from \"./util\";\n\n\nconst AceEditor = require('react-ace').default;\n\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n  \n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`vertical-tabpanel-${index}`}\n        aria-labelledby={`vertical-tab-${index}`}\n        {...other}\n      >\n        {value === index && <Box p={3}>{children}</Box>}\n      </div>\n    );\n  }\n  \n  TabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n  };\n  \n  function a11yProps(index) {\n    return {\n      id: `vertical-tab-${index}`,\n      \"aria-controls\": `vertical-tabpanel-${index}`,\n    };\n  }\n  \n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      backgroundColor: theme.palette.background.paper,\n      display: \"flex\",\n    },\n    tabs: {\n      borderRight: `1px solid ${theme.palette.divider}`,\n    },\n  }));\n  \n\n  const options = [\n    {\n      index: 0,\n      name: \"ed25519\",\n      refresh: generateEd25519,\n    },\n    {\n      index: 1,\n      name: \"x25519\",\n      refresh: generateX25519,\n    },\n    {\n      index: 2,\n      name: \"secp256k1\",\n      refresh: generateSecp256k1,\n    },\n    {\n      index: 3,\n      name: \"bls12381\",\n      refresh: generateBls12381,\n    },\n    {\n      index: 4,\n      name: \"P-256\",\n      refresh: generateP256,\n    },\n    {\n      index: 5,\n      name: \"P-384\",\n      refresh: generateP384,\n    },\n    {\n      index: 6,\n      name: \"P-521\",\n      refresh: generateP521,\n    },\n  ];\n\n  const Panel = ({handleGenerate, keys, resolutionResponse, contentType, handleContentTypeChange}) => {\n \n    return (\n      <Grid container spacing={4}>\n        <Grid item sm={12} xs={12}>\n          <Box display=\"flex\">\n            <Box flexGrow={1}>\n             \n      <ToggleButtonGroup\n      value={contentType}\n      exclusive\n      onChange={(event, newContentType) => {\n        handleContentTypeChange(newContentType);\n      }}\n      aria-label=\"did document representation\"\n    >\n      <ToggleButton\n        value=\"application/did+json\"\n        aria-label=\"json\"\n      >\n        did+json\n      </ToggleButton>\n      <ToggleButton\n        value=\"application/did+ld+json\"\n        aria-label=\"jsonld\"\n      >\n        did+ld+json\n      </ToggleButton>\n      <ToggleButton value=\"application/did+cbor\" aria-label=\"cbor\">\n        did+cbor\n      </ToggleButton>\n    </ToggleButtonGroup>\n  \n            </Box>\n            <Box>\n              <Button\n                variant={\"contained\"}\n                color={\"secondary\"}\n                onClick={() => {\n                  handleGenerate();\n                }}\n              >\n                Generate\n              </Button>\n            </Box>\n          </Box>\n        </Grid>\n        <Grid item sm={12} xs={12}>\n            <Typography variant={\"h6\"} gutterBottom>\n              Resolution\n            </Typography>\n            <AceEditor\n      mode={'json'}\n      theme=\"github\"\n      style={{ width: '100%' }}\n      readOnly={true}\n      wrapEnabled={true}\n      name=\"DID Document Representation\"\n      value={JSON.stringify(resolutionResponse, null, 2)}\n      editorProps={{ $blockScrolling: true }}\n    />\n          </Grid>\n        <Grid item sm={12} xs={12}>\n          <Typography variant={\"h6\"} gutterBottom>\n            Key\n          </Typography>\n          <AceEditor\n      mode={'json'}\n      theme=\"github\"\n      style={{ width: '100%' }}\n      readOnly={true}\n      wrapEnabled={true}\n      name=\"Keys\"\n      value={JSON.stringify(keys, null, 2)}\n      editorProps={{ $blockScrolling: true }}\n    />\n        </Grid>\n      </Grid>\n    );\n  };\nexport const Home = () => {\n    const classes = useStyles();\n    const [contentType, setContentType] = React.useState(\"application/did+json\");\n    const [keys, setKeys] = React.useState(null);\n    const [resolutionResponse, setResolutionResponse] = React.useState(null);\n    \n    const [tabValue, tabTabValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n      tabTabValue(newValue);\n    };\n\n    const handleContentTypeChange = async (newContentType)=>{\n      if (newContentType){\n        setContentType(newContentType);\n        const refresh = options[tabValue].refresh;\n        const result = await refresh(keys, newContentType);\n        setKeys(result.keys);\n        setResolutionResponse(result.resolutionResponse)\n      }\n    }\n\n    const handleGenerate = async (index=tabValue) => {\n        const refresh = options[index].refresh;\n        const result = await refresh(null, contentType);\n        setKeys(result.keys);\n        setResolutionResponse(result.resolutionResponse);\n      };\n    \n      React.useEffect(() => {\n        if (keys === null){\n          (async () => {\n            handleGenerate(0);\n          })();\n        }\n      }, []);\n  return (\n    <Base>\n     <div className={classes.root}>\n      <Tabs\n        orientation=\"vertical\"\n        variant=\"scrollable\"\n        value={tabValue}\n        onChange={handleChange}\n        aria-label=\"DID Types\"\n        className={classes.tabs}\n      >\n        {options.map((opt) => {\n          return (\n            <Tab\n              key={opt.index}\n              label={opt.name}\n              {...a11yProps(opt.index)}\n              onClick={() => {\n                handleGenerate(opt.index);\n              }}\n            />\n          );\n        })}\n      </Tabs>\n      {options.map((opt) => {\n        return (\n          <TabPanel\n            key={opt.index}\n            value={tabValue}\n            index={opt.index}\n            style={{ width: \"100%\" }}\n          >\n            <Panel handleGenerate={handleGenerate} keys={keys} resolutionResponse={resolutionResponse} contentType={contentType} handleContentTypeChange={handleContentTypeChange}/>\n          </TabPanel>\n        );\n      })}\n    </div>\n    \n    </Base>\n  );\n};\n\n","import React from \"react\";\nimport { Home as Page } from \"./Home\";\n\nimport { compose } from \"redux\";\n\nimport wallet from \"../../store/universal-wallet\";\n\nconst container = compose(wallet.container);\n\nexport const Home = container((props) => {\n  return <Page {...props} />;\n});\n","import { driver as ed25519Driver } from '@transmute/did-key-ed25519';\nimport { driver as x25519Driver } from '@transmute/did-key-x25519';\nimport { driver as bls12381Driver } from '@transmute/did-key-bls12381';\nimport { driver as secp256k1Driver } from '@transmute/did-key-secp256k1';\nimport { driver as didWebDriver } from '@transmute/did-key-web-crypto';\n\nconst prefixToDriverMap: any = {\n  z6Mk: ed25519Driver,\n  z6LS: x25519Driver,\n  zUC7: bls12381Driver, //g2\n  z3tE: bls12381Driver, //g1\n  z5Tc: bls12381Driver, //g1andg2\n  zQ3s: secp256k1Driver,\n  zXwp: didWebDriver,\n  zACH: didWebDriver,\n  zJss: didWebDriver,\n};\n\nexport const resolver = {\n  resolve: async (\n    didUrl: string,\n    resolutionMetaData: any = { accept: 'application/did+ld+json' }\n  ) => {\n    if (didUrl.indexOf('did:key:') !== 0) {\n      throw new Error('did must be of method did:key.');\n    }\n    const idchar: any = didUrl.split('did:key:').pop();\n    const encodedType = idchar.substring(0, 4);\n    try {\n      const result = await prefixToDriverMap[encodedType].resolve(\n        didUrl,\n        resolutionMetaData\n      );\n      return result;\n    } catch (e) {\n      console.error(e);\n      throw new Error('Unknown DID Key type: ' + encodedType);\n    }\n  },\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Base from \"../base/base\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {resolver} from \"@transmute/did-key.js\"\n\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\n\nimport 'brace';\nimport 'brace/mode/json';\nimport 'brace/theme/github';\n\n\nconst AceEditor = require('react-ace').default;\n\n\nexport const Resolver = (props) => {\n  const [contentType, setContentType] = React.useState(\"application/did+json\");\n  const [didResolutionResponse, setDidResolutionResponse] = React.useState(null)\n  React.useEffect(()=>{\n    (async ()=>{\n \n      const didResolutionResponse = await resolver.resolve(props.match.params.did, {\n        accept: 'application/did+json',\n      });\n      setDidResolutionResponse(didResolutionResponse);\n    })();\n  }, [])\n\n  const onToggleRepresentation = async (newContentType)=>{\n    setContentType(newContentType)\n    const didResolutionResponse = await resolver.resolve(props.match.params.did, {\n      accept: newContentType,\n    });\n    setDidResolutionResponse(didResolutionResponse);\n  }\n\n  return (\n    <Base>\n    <Grid container spacing={2}>\n      <Grid item xs={12}>\n\n\n<ToggleButtonGroup\n      value={contentType}\n      exclusive\n      onChange={(event, newContentType) => {\n        onToggleRepresentation(newContentType);\n      }}\n      aria-label=\"did document representation\"\n    >\n      <ToggleButton\n        value=\"application/did+json\"\n        aria-label=\"json\"\n      >\n        did+json\n      </ToggleButton>\n      <ToggleButton\n        value=\"application/did+ld+json\"\n        aria-label=\"jsonld\"\n      >\n        did+ld+json\n      </ToggleButton>\n      <ToggleButton value=\"application/did+cbor\" aria-label=\"cbor\">\n        did+cbor\n      </ToggleButton>\n    </ToggleButtonGroup>\n      </Grid>\n      <Grid item xs={12}>\n      {didResolutionResponse ? \n       <AceEditor\n       mode={'json'}\n       theme=\"github\"\n       style={{ width: '100%' }}\n       readOnly={true}\n       wrapEnabled={true}\n       name=\"Keys\"\n       value={JSON.stringify(didResolutionResponse, null, 2)}\n       editorProps={{ $blockScrolling: true }}\n     /> : <div>No did document.</div>}\n\n      </Grid>\n    </Grid>\n    </Base>\n  );\n};\n\nResolver.propTypes = {};\n","import React from \"react\";\nimport { Resolver as Page } from \"./Resolver\";\n\nimport { compose } from \"redux\";\n\nimport wallet from \"../../store/universal-wallet\";\n\nconst container = compose(wallet.container);\n\nexport const Resolver = container((props) => {\n  return <Page {...props} />;\n});\n","import { Home } from \"./home\";\nimport { Resolver } from \"./resolver\";\n\nimport { Unextractable } from './unextractable'\n\nexport const routes = [\n  { path: \"/\", exact: true, component: Home },\n  { path: \"/unextractable\", exact: true, component: Unextractable },\n  { path: \"/:did\", exact: true, component: Resolver },\n\n];\n","import React from \"react\";\nimport { Unextractable as Page } from \"./Unextractable\";\n\nimport { compose } from \"redux\";\n\nimport wallet from \"../../store/universal-wallet\";\n\nconst container = compose(wallet.container);\n\nexport const Unextractable = container((props) => {\n  return <Page {...props} />;\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Particles from 'react-particles-js';\n\nexport class ParticlesContainer extends Component {\n  render() {\n    const params = this.props.params || {\n      particles: {\n        line_linked: {\n          shadow: {\n            enable: true,\n            color: '#3CA9D1',\n            blur: 5,\n          },\n        },\n      },\n    };\n    return (\n      <React.Fragment>\n        <div\n          style={{\n            zIndex: 2,\n            position: 'absolute',\n          }}\n        >\n          {this.props.children}\n        </div>\n\n        <Particles\n          className=\"Particles\"\n          style={{\n            zIndex: 1,\n            top: 0,\n            position: 'absolute',\n          }}\n          params={params}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nParticlesContainer.propTypes = {\n  params: PropTypes.object,\n  children: PropTypes.any,\n};\n","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Theme from \"../../components/Theme/Theme\";\n\nimport { ParticlesContainer } from \"../../components/ParticlesContainer\";\n\nimport \"./404.css\";\n\nexport class NotFound extends Component {\n  render() {\n    return (\n      <Theme>\n        <div className=\"notFound\">\n          <ParticlesContainer>\n            <div className=\"copy\" style={{ padding: \"32px\" }}>\n              <Typography variant=\"h1\">404</Typography>\n              <Typography>\n                page not found.\n              </Typography>\n              <br />\n              <Button\n                variant=\"contained\"\n                color={\"secondary\"}\n                onClick={() => {\n                  window.location.href = \"/\";\n                }}\n              >\n                Go Home\n              </Button>\n            </div>\n          </ParticlesContainer>\n        </div>\n      </Theme>\n    );\n  }\n}\n\nexport default NotFound;\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport storage from \"redux-persist/lib/storage\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport withReduxEnhancer from \"addon-redux/enhancer\";\n\nimport rootReducer from \".\";\nimport history from \"./history\";\n\nexport default (appReducers = {}) => {\n  // Persistance configuration\n  const persistConfig = {\n    key: \"root\",\n    whitelist: [\"wallet\"],\n    storage,\n  };\n\n  const middlewares = [thunk, routerMiddleware(history)];\n\n  // TODO: refactor for production\n  if (process.env.NODE_ENV !== \"production\") {\n    // const reduxListener = createStorybookListener();\n    // middlewares.push(reduxListener);\n  }\n\n  // Store.\n  const store = createStore(\n    persistReducer(\n      persistConfig,\n      combineReducers({ ...rootReducer, ...appReducers })\n    ),\n    composeWithDevTools(\n      compose(applyMiddleware(...middlewares), withReduxEnhancer)\n    )\n  );\n\n  // Persistor.\n  const persistor = persistStore(store);\n  return {\n    store,\n    persistor,\n    history,\n  };\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport { Switch, Route } from \"react-router-dom\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/lib/integration/react\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport createStore from \"./store/create\";\nimport { routes } from \"./pages\";\nimport { NotFound } from \"./pages/errors/404\";\n\nconst { store, persistor, history } = createStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor}>\n      <ConnectedRouter history={history}>\n        <Switch>\n          {routes.map(({ exact, path, component }) => (\n            <Route key={path} exact={exact} path={path} component={component} />\n          ))}\n          <Route path=\"*\" render={() => <NotFound />} />\n        </Switch>\n      </ConnectedRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nconsole.log(\n  `\nHello Developer 🧙‍♂️! \nCheckout our corporate website if you are interested in working with us: \n✨ https://www.transmute.industries/\n`\n);\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport HomeIcon from \"@material-ui/icons/Home\";\n\nimport history from \"../../store/history\";\n\nconst StyledMenu = withStyles({\n  paper: {\n    border: \"1px solid #d3d4d5\",\n  },\n})((props) => (\n  <Menu\n    elevation={0}\n    getContentAnchorEl={null}\n    anchorOrigin={{\n      vertical: \"bottom\",\n      horizontal: \"center\",\n    }}\n    transformOrigin={{\n      vertical: \"top\",\n      horizontal: \"center\",\n    }}\n    {...props}\n  />\n));\n\nconst StyledMenuItem = withStyles((theme) => ({\n  root: {\n    \"&:focus\": {\n      backgroundColor: theme.palette.primary.main,\n      \"& .MuiListItemIcon-root, & .MuiListItemText-primary\": {\n        color: theme.palette.common.white,\n      },\n    },\n  },\n}))(MenuItem);\n\nexport default function CustomizedMenus() {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div>\n      <IconButton\n        color={\"inherit\"}\n        aria-controls=\"customized-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n      >\n        <MoreVertIcon />\n      </IconButton>\n      <StyledMenu\n        id=\"customized-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <StyledMenuItem\n          onClick={() => {\n            history.push(\"/\");\n          }}\n        >\n          <ListItemIcon>\n            <HomeIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText primary=\"Home\" />\n        </StyledMenuItem>\n      </StyledMenu>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport HttpIcon from \"@material-ui/icons/Http\";\nimport CodeIcon from \"@material-ui/icons/Code\";\nimport GavelIcon from \"@material-ui/icons/Gavel\";\nimport BuildIcon from \"@material-ui/icons/Build\";\nimport PictureAsPdfIcon from \"@material-ui/icons/PictureAsPdf\";\nimport YouTubeIcon from \"@material-ui/icons/YouTube\";\nimport history from \"../../store/history\";\n\nexport default function DrawerContent() {\n  return (\n    <List>\n      <ListItem\n        button\n        onClick={() => {\n          history.push(\"/\");\n        }}\n      >\n        <ListItemIcon>\n          <HomeIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Home\"} />\n      </ListItem>\n\n      {/* Need to update vc.js to support better key structure.*/}\n\n      {/* <ListItem\n        button\n        onClick={() => {\n          history.push(\"/workbench\");\n        }}\n      >\n        <ListItemIcon>\n          <BuildIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Workbench\"} />\n      </ListItem>\n\n      <ListItem\n        button\n        onClick={() => {\n          history.push(\"/offline\");\n        }}\n      >\n        <ListItemIcon>\n          <PictureAsPdfIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"PDF Demo\"} />\n      </ListItem>\n\n      <ListItem\n        button\n        onClick={() => {\n          history.push(\"/videos\");\n        }}\n      >\n        <ListItemIcon>\n          <YouTubeIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Videos\"} />\n      </ListItem> */}\n\n      <ListItem\n        button\n        onClick={() => {\n          window.open(\"https://w3c-ccg.github.io/did-method-key/\");\n        }}\n      >\n        <ListItemIcon>\n          <GavelIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Spec\"} />\n      </ListItem>\n\n      <ListItem\n        button\n        onClick={() => {\n          window.open(\"https://github.com/transmute-industries/did-key.js\");\n        }}\n      >\n        <ListItemIcon>\n          <CodeIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Code\"} />\n      </ListItem>\n    </List>\n  );\n}\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\n\nimport Theme from \"../../components/Theme/Theme\";\nimport logo from \"../../assets/logo.svg\";\n\nimport Menu from \"./menu\";\nimport DrawerContent from \"./drawer\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    width: \"100%\",\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: \"none\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: \"nowrap\",\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: \"hidden\",\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default function MiniDrawer({ children }) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Theme>\n      <div className={classes.root}>\n        <CssBaseline />\n        <AppBar\n          position=\"fixed\"\n          className={clsx(classes.appBar, {\n            [classes.appBarShift]: open,\n          })}\n        >\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              edge=\"start\"\n              className={clsx(classes.menuButton, {\n                [classes.hide]: open,\n              })}\n            >\n              <MenuIcon />\n            </IconButton>\n            <img\n              src={logo}\n              alt={\"logo\"}\n              className={classes.title}\n              style={{ height: \"28px\" }}\n            />\n            <div style={{ flexGrow: 1 }}></div>\n            <Menu />\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          variant=\"permanent\"\n          className={clsx(classes.drawer, {\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          })}\n          classes={{\n            paper: clsx({\n              [classes.drawerOpen]: open,\n              [classes.drawerClose]: !open,\n            }),\n          }}\n        >\n          <div className={classes.toolbar}>\n            <IconButton onClick={handleDrawerClose}>\n              {theme.direction === \"rtl\" ? (\n                <ChevronRightIcon />\n              ) : (\n                <ChevronLeftIcon />\n              )}\n            </IconButton>\n          </div>\n          <Divider />\n          <DrawerContent />\n        </Drawer>\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n          {children}\n        </main>\n      </div>\n    </Theme>\n  );\n}\n","import base64url from 'base64url';\n\nimport * as ed25519 from '@stablelib/ed25519';\n\nimport canonicalize from 'canonicalize';\n\nclass JWSVerificationFailed extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'JWSVerificationFailed';\n  }\n}\n\nconst _jwkToSecretKey = (jwk: any) => {\n  const d = base64url.toBuffer(jwk.d);\n  const x = base64url.toBuffer(jwk.x);\n  const secretKey = new Uint8Array(Buffer.concat([d, x]));\n  return secretKey;\n};\n\nconst _jwkToPublicKey = (jwk: any) => {\n  const x = base64url.toBuffer(jwk.x);\n  const publicKey = new Uint8Array(x);\n  return publicKey;\n};\n\nexport const decode = (jws: string, options = { complete: false }) => {\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n\n  if (options.complete) {\n    return {\n      header: JSON.parse(base64url.decode(encodedHeader)),\n      payload: JSON.parse(base64url.decode(encodedPayload)),\n      signature: encodedSignature,\n    };\n  }\n  return JSON.parse(base64url.decode(encodedPayload));\n};\n\nexport const sign = (\n  payload: any,\n  privateKeyJwk: any,\n  header: any = {\n    alg: 'EdDSA',\n  }\n) => {\n  const secretKey = _jwkToSecretKey(privateKeyJwk);\n  const encodedHeader = base64url.encode(canonicalize(header));\n  const encodedPayload = base64url.encode(canonicalize(payload));\n  const message = new Uint8Array(\n    Buffer.from(`${encodedHeader}.${encodedPayload}`)\n  );\n  const signature = ed25519.sign(secretKey, message);\n  const encodedSignature = base64url.encode(Buffer.from(signature));\n  const jws = `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\n  return jws;\n};\n\nexport const signDetached = (\n  payload: Buffer,\n  privateKeyJwk: any,\n  header: any = {\n    alg: 'EdDSA',\n  }\n) => {\n  const secretKey = _jwkToSecretKey(privateKeyJwk);\n  const encodedHeader = base64url.encode(canonicalize(header));\n  const message = new Uint8Array(\n    Buffer.concat([\n      Buffer.from(encodedHeader, 'utf-8'),\n      Buffer.from('.', 'utf-8'),\n      payload,\n    ])\n  );\n  const signature = ed25519.sign(secretKey, message);\n  const encodedSignature = base64url.encode(Buffer.from(signature));\n  const jws = `${encodedHeader}..${encodedSignature}`;\n  return jws;\n};\n\nexport const verify = (jws: string, publicKeyJwk: any) => {\n  const publicKey = _jwkToPublicKey(publicKeyJwk);\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n\n  const message = new Uint8Array(\n    Buffer.from(`${encodedHeader}.${encodedPayload}`)\n  );\n  const verified = ed25519.verify(\n    publicKey,\n    message,\n    new Uint8Array(base64url.toBuffer(encodedSignature))\n  );\n\n  if (verified) {\n    return JSON.parse(base64url.decode(encodedPayload));\n  }\n\n  throw new JWSVerificationFailed('signature verification failed');\n};\n\nexport const verifyDetached = (\n  jws: string,\n  payload: Buffer,\n  publicKeyJwk: any\n) => {\n  const publicKey = _jwkToPublicKey(publicKeyJwk);\n  const [encodedHeader, encodedSignature] = jws.split('..');\n  const message = new Uint8Array(\n    Buffer.concat([\n      Buffer.from(encodedHeader, 'utf-8'),\n      Buffer.from('.', 'utf-8'),\n      payload,\n    ])\n  );\n  const verified = ed25519.verify(\n    publicKey,\n    message,\n    new Uint8Array(base64url.toBuffer(encodedSignature))\n  );\n  return verified;\n};\n\nexport default {\n  decode,\n\n  sign,\n  signDetached,\n\n  verify,\n  verifyDetached,\n};\n","import bs58 from 'bs58';\n\nimport * as ed25519 from '@stablelib/ed25519';\nimport * as keyUtils from './keyUtils';\n\nimport * as common from '@transmute/did-key-common';\n\nimport { X25519KeyPair } from '@transmute/did-key-x25519';\n\n@common.types.staticImplements<common.types.KeyPairClass>()\nexport class Ed25519KeyPair {\n  public id: string;\n  public type: string;\n  public controller: string;\n\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  static fingerprintFromPublicKey(\n    keypair: common.types.KeyPairJwk | common.types.KeyPairBase58\n  ) {\n    let pubkeyBytes: any;\n\n    if ((keypair as any).publicKeyBase58) {\n      pubkeyBytes = bs58.decode(\n        (keypair as common.types.KeyPairBase58).publicKeyBase58\n      );\n    }\n\n    if ((keypair as any).publicKeyJwk) {\n      pubkeyBytes = bs58.decode(\n        keyUtils.publicKeyBase58FromPublicKeyJwk(\n          (keypair as common.types.KeyPairJwk).publicKeyJwk\n        )\n      );\n    }\n    // ed25519 cryptonyms are multicodec encoded values, specifically:\n    // (multicodec ed25519-pub 0xed01 + key bytes)\n\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    buffer[0] = 0xed;\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${bs58.encode(buffer)}`;\n  }\n  static async generate(options: common.types.KeyPairGenerateOptions) {\n    let key;\n    if (options.secureRandom) {\n      key = ed25519.generateKeyPair({\n        isAvailable: true,\n        randomBytes: options.secureRandom,\n      });\n    } else {\n      throw new Error('options.secureRandom is required.');\n    }\n\n    const publicKeyBase58 = bs58.encode(key.publicKey);\n    const privateKeyBase58 = bs58.encode(key.secretKey);\n\n    const did = `did:key:${Ed25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    const keyId = `#${Ed25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    return new Ed25519KeyPair({\n      id: keyId,\n      controller: did,\n      publicKeyBase58,\n      privateKeyBase58,\n    });\n  }\n\n  static fromFingerprint({ fingerprint }: any) {\n    // skip leading `z` that indicates base58 encoding\n    const buffer = bs58.decode(fingerprint.substr(1));\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L81\n    if (buffer[0] === 0xed && buffer[1] === 0x01) {\n      const publicKeyBase58 = bs58.encode(buffer.slice(2));\n      const did = `did:key:${Ed25519KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      const keyId = `#${Ed25519KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      return new Ed25519KeyPair({\n        id: keyId,\n        controller: did,\n        publicKeyBase58,\n      });\n    }\n\n    throw new Error(`Unsupported Fingerprint Type: ${fingerprint}`);\n  }\n  // todo: consider moving this type conversion cancer to common.\n  static from(options: common.types.KeyPairBase58 | common.types.KeyPairJwk) {\n    let privateKeyBase58;\n    let publicKeyBase58;\n\n    if ((options as common.types.KeyPairBase58).publicKeyBase58) {\n      publicKeyBase58 = (options as common.types.KeyPairBase58).publicKeyBase58;\n    }\n\n    if ((options as common.types.KeyPairBase58).privateKeyBase58) {\n      privateKeyBase58 = (options as common.types.KeyPairBase58)\n        .privateKeyBase58;\n    }\n\n    if ((options as common.types.KeyPairJwk).privateKeyJwk) {\n      privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyJwk(\n        (options as common.types.KeyPairJwk).privateKeyJwk\n      );\n    }\n\n    if ((options as common.types.KeyPairJwk).publicKeyJwk) {\n      publicKeyBase58 = keyUtils.publicKeyBase58FromPublicKeyJwk(\n        (options as common.types.KeyPairJwk).publicKeyJwk\n      );\n    }\n\n    return new Ed25519KeyPair({\n      ...options,\n      privateKeyBase58,\n      publicKeyBase58,\n    });\n  }\n\n  constructor(options: any = {}) {\n    this.type = 'Ed25519VerificationKey2018';\n    this.id = options.id;\n    this.controller = options.controller;\n\n    if (options.publicKeyBase58) {\n      this.publicKeyBuffer = bs58.decode(options.publicKeyBase58);\n    } else if (options.publicKeyJwk) {\n      this.publicKeyBuffer = bs58.decode(\n        keyUtils.publicKeyBase58FromPublicKeyJwk(options.publicKeyJwk)\n      );\n    } else {\n      throw new Error(\n        'Ed25519KeyPair requires publicKeyBase58 or publicKeyJwk, recieved neither.'\n      );\n    }\n\n    if (options.privateKeyBase58) {\n      this.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n    }\n\n    if (this.controller && !this.id) {\n      this.id = `${this.controller}#${this.fingerprint()}`;\n    }\n  }\n\n  publicNode() {\n    return this.toKeyPair(false);\n  }\n\n  fingerprint() {\n    return Ed25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    } as any);\n  }\n  verifyFingerprint(fingerprint: any) {\n    // fingerprint should have `z` prefix indicating\n    // that it's multi-base encoded\n    if (!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      return {\n        error: new Error('`fingerprint` must be a multibase encoded string.'),\n        valid: false,\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = bs58.decode(fingerprint.slice(1));\n    } catch (e) {\n      return { error: e, valid: false };\n    }\n\n    // validate the first two multicodec bytes 0xed01\n    const valid =\n      fingerprintBuffer.slice(0, 2).toString('hex') === 'ed01' &&\n      this.publicKeyBuffer.equals(fingerprintBuffer.slice(2));\n    if (!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false,\n      };\n    }\n    return { valid };\n  }\n\n  async toJwk(exportPrivateKey: boolean = false) {\n    if (exportPrivateKey) {\n      return keyUtils.privateKeyJwkFromPrivateKeyBase58(\n        bs58.encode(this.privateKeyBuffer)\n      );\n    }\n    return keyUtils.publicKeyJwkFromPublicKeyBase58(\n      bs58.encode(this.publicKeyBuffer)\n    );\n  }\n\n  toX25519KeyPair(exportPrivateKey: boolean = false) {\n    if (exportPrivateKey) {\n      return X25519KeyPair.fromEdKeyPair({\n        controller: this.controller,\n        publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n        privateKeyBase58: bs58.encode(this.privateKeyBuffer),\n      } as any);\n    } else {\n      return X25519KeyPair.fromEdKeyPair({\n        controller: this.controller,\n        publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n      } as any);\n    }\n  }\n\n  toKeyPair(exportPrivateKey: boolean = false) {\n    const kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n\n    if (exportPrivateKey) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(exportPrivateKey: boolean = false) {\n    const kp: any = {\n      id: this.id,\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: keyUtils.publicKeyJwkFromPublicKeyBase58(\n        bs58.encode(this.publicKeyBuffer)\n      ),\n    };\n\n    delete kp.publicKeyJwk.kid;\n    if (exportPrivateKey) {\n      kp.privateKeyJwk = keyUtils.privateKeyJwkFromPrivateKeyBase58(\n        bs58.encode(this.privateKeyBuffer)\n      );\n      delete kp.privateKeyJwk.kid;\n    }\n\n    return kp;\n  }\n\n  signer() {\n    if (!this.privateKeyBuffer) {\n      throw new Error('No private key to sign with.');\n    }\n    let { privateKeyBuffer } = this;\n    return {\n      async sign({ data }: any) {\n        const signatureUInt8Array = ed25519.sign(privateKeyBuffer, data);\n        return signatureUInt8Array;\n      },\n    };\n  }\n  verifier() {\n    if (!this.publicKeyBuffer) {\n      throw new Error('No public key to verify with.');\n    }\n    let { publicKeyBuffer } = this;\n    return {\n      async verify({ data, signature }: any) {\n        let verified = false;\n        try {\n          verified = ed25519.verify(publicKeyBuffer, data, signature);\n        } catch (e) {\n          console.error('An error occurred when verifying signature: ', e);\n        }\n        return verified;\n      },\n    };\n  }\n}\n","import crypto from 'crypto';\n\nimport * as keyUtils from './keyUtils';\nimport bs58 from 'bs58';\nimport secp256k1 from 'secp256k1';\n\nimport * as common from '@transmute/did-key-common';\n\nconst _generate = (secureRandom: any) => {\n  let privateKey;\n  do {\n    privateKey = secureRandom();\n  } while (!secp256k1.privateKeyVerify(privateKey));\n\n  const publicKey = secp256k1.publicKeyCreate(privateKey);\n  return { publicKey, privateKey };\n};\n\n@common.types.staticImplements<common.types.KeyPairClass>()\nexport class Secp256k1KeyPair {\n  public id: string;\n  public type: string;\n  public controller: string;\n\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  static fingerprintFromPublicKey(\n    keypair: common.types.KeyPairJwk | common.types.KeyPairBase58\n  ) {\n    let pubkeyBytes: any;\n\n    if ((keypair as any).publicKeyBase58) {\n      pubkeyBytes = bs58.decode(\n        (keypair as common.types.KeyPairBase58).publicKeyBase58\n      );\n    }\n\n    if ((keypair as any).publicKeyJwk) {\n      pubkeyBytes = new Uint8Array(\n        Buffer.from(\n          keyUtils.publicKeyHexFromJwk(\n            (keypair as common.types.KeyPairJwk).publicKeyJwk\n          )\n        )\n      );\n    }\n\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    // See https://github.com/multiformats/multicodec/blob/master/table.csv\n    // 0xe7 is Secp256k1 public key\n    buffer[0] = 0xe7; //\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${bs58.encode(buffer)}`;\n  }\n\n  static async generate(options: any = {}) {\n    let privateKey;\n    let publicKey;\n    if (options.secureRandom) {\n      ({ privateKey, publicKey } = _generate(options.secureRandom));\n    }\n\n    if (!privateKey) {\n      throw new Error('Cannot generate private key.');\n    }\n\n    const publicKeyBase58 = keyUtils.publicKeyBase58FromPublicKeyHex(\n      Buffer.from(publicKey).toString('hex')\n    );\n    const privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyHex(\n      Buffer.from(privateKey).toString('hex')\n    );\n\n    const did = `did:key:${Secp256k1KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n    const keyId = `#${Secp256k1KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    } as any)}`;\n\n    return new Secp256k1KeyPair({\n      id: keyId,\n      controller: did,\n      publicKeyBase58,\n      privateKeyBase58,\n    });\n  }\n\n  static async from(options: any) {\n    let privateKeyBase58 = options.privateKeyBase58;\n    let publicKeyBase58 = options.publicKeyBase58;\n\n    if (options.privateKeyHex) {\n      privateKeyBase58 = await keyUtils.privateKeyBase58FromPrivateKeyHex(\n        options.privateKeyHex\n      );\n    }\n\n    if (options.publicKeyHex) {\n      publicKeyBase58 = await keyUtils.publicKeyBase58FromPublicKeyHex(\n        options.publicKeyHex\n      );\n    }\n\n    if (options.privateKeyJwk) {\n      privateKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyHex(\n        await keyUtils.privateKeyHexFromJwk(options.privateKeyJwk)\n      );\n    }\n\n    if (options.publicKeyJwk) {\n      publicKeyBase58 = keyUtils.privateKeyBase58FromPrivateKeyHex(\n        await keyUtils.publicKeyHexFromJwk(options.publicKeyJwk)\n      );\n    }\n\n    return new Secp256k1KeyPair({\n      ...options,\n      privateKeyBase58,\n      publicKeyBase58,\n    });\n  }\n\n  static fromFingerprint({ fingerprint }: any) {\n    // skip leading `z` that indicates base58 encoding\n    const buffer = bs58.decode(fingerprint.substr(1));\n\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L77\n    if (buffer[0] === 0xe7 && buffer[1] === 0x01) {\n      const publicKeyBase58 = bs58.encode(buffer.slice(2));\n      const did = `did:key:${Secp256k1KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      const keyId = `#${Secp256k1KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      } as any)}`;\n      return new Secp256k1KeyPair({\n        id: keyId,\n        controller: did,\n        publicKeyBase58,\n      });\n    }\n\n    throw new Error(`Unsupported Fingerprint Type: ${fingerprint}`);\n  }\n\n  constructor(options: any = {}) {\n    this.type = 'EcdsaSecp256k1VerificationKey2019';\n    this.id = options.id;\n    this.controller = options.controller;\n\n    if (options.publicKeyBase58) {\n      this.publicKeyBuffer = bs58.decode(options.publicKeyBase58);\n    } else if (options.publicKeyJwk) {\n      this.publicKeyBuffer = Buffer.from(\n        keyUtils.publicKeyHexFromJwk(options.publicKeyJwk),\n        'hex'\n      );\n    } else {\n      throw new Error(\n        'Secp256k1KeyPair requires publicKeyBase58 or publicKeyJwk, recieved neither.'\n      );\n    }\n\n    if (options.privateKeyBase58) {\n      this.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n    }\n\n    if (options.privateKeyJwk) {\n      this.privateKeyBuffer = Buffer.from(\n        keyUtils.privateKeyHexFromJwk(options.privateKeyJwk),\n        'hex'\n      );\n    }\n\n    if (this.controller && !this.id) {\n      this.id = `${this.controller}#${this.fingerprint()}`;\n    }\n  }\n\n  publicNode() {\n    return this.toKeyPair(false);\n  }\n\n  signer() {\n    if (!this.privateKeyBuffer) {\n      throw new Error('No private key to sign with.');\n    }\n    let { privateKeyBuffer } = this;\n    return {\n      async sign({ data }: any) {\n        const messageHashUInt8Array = crypto\n          .createHash('sha256')\n          .update(data)\n          .digest();\n\n        const sigObj: any = secp256k1.ecdsaSign(\n          messageHashUInt8Array,\n          new Uint8Array(privateKeyBuffer)\n        );\n\n        return sigObj.signature;\n      },\n    };\n  }\n\n  verifier() {\n    if (!this.publicKeyBuffer) {\n      throw new Error('No public key to verify with.');\n    }\n    let { publicKeyBuffer } = this;\n    return {\n      async verify({ data, signature }: any) {\n        const messageHashUInt8Array = crypto\n          .createHash('sha256')\n          .update(data)\n          .digest();\n\n        let verified = false;\n        try {\n          verified = secp256k1.ecdsaVerify(\n            signature,\n            messageHashUInt8Array,\n            new Uint8Array(publicKeyBuffer)\n          );\n        } catch (e) {\n          console.error('An error occurred when verifying signature: ', e);\n        }\n        return verified;\n      },\n    };\n  }\n\n  fingerprint() {\n    return Secp256k1KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    } as any);\n  }\n\n  verifyFingerprint(fingerprint: string) {\n    // fingerprint should have `z` prefix indicating\n    // that it's multi-base encoded\n    if (!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      return {\n        error: new Error('`fingerprint` must be a multibase encoded string.'),\n        valid: false,\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = bs58.decode(fingerprint.slice(1));\n    } catch (e) {\n      return { error: e, valid: false };\n    }\n    let { publicKeyBuffer } = this;\n\n    // validate the first two multicodec bytes 0xe701\n    const valid =\n      fingerprintBuffer.slice(0, 2).toString('hex') === 'e701' &&\n      publicKeyBuffer.equals(fingerprintBuffer.slice(2));\n    if (!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false,\n      };\n    }\n    return { valid };\n  }\n\n  toJwk(_private: boolean = false) {\n    if (_private) {\n      if (!this.privateKeyBuffer) {\n        throw new Error('No private key to export');\n      }\n      return keyUtils.privateKeyJwkFromPrivateKeyHex(\n        this.privateKeyBuffer.toString('hex')\n      );\n    }\n    return keyUtils.publicKeyJwkFromPublicKeyHex(\n      this.publicKeyBuffer.toString('hex')\n    );\n  }\n\n  async toHex(_private: boolean = false) {\n    if (_private) {\n      if (!this.privateKeyBuffer) {\n        throw new Error('No private key to export');\n      }\n      return keyUtils.privateKeyHexFromJwk(\n        await keyUtils.privateKeyJwkFromPrivateKeyHex(\n          this.privateKeyBuffer.toString('hex')\n        )\n      );\n    }\n    return keyUtils.publicKeyHexFromJwk(\n      await keyUtils.publicKeyJwkFromPublicKeyHex(\n        this.publicKeyBuffer.toString('hex')\n      )\n    );\n  }\n\n  toKeyPair(exportPrivate = false) {\n    const kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n    if (exportPrivate) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(exportPrivate: boolean = false): any {\n    let kp: any = {\n      id: this.id,\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: this.toJwk(),\n    };\n    delete kp.publicKeyJwk.kid;\n    if (exportPrivate) {\n      kp.privateKeyJwk = this.toJwk(true);\n      delete kp.privateKeyJwk.kid;\n    }\n\n    return kp;\n  }\n}\n","import base64url from 'base64url';\n\nimport crypto from 'crypto';\nimport secp256k1 from 'secp256k1';\n\nimport {\n  ISecp256k1PrivateKeyJwk,\n  ISecp256k1PublicKeyJwk,\n  privateKeyUInt8ArrayFromJwk,\n  publicKeyUInt8ArrayFromJwk,\n} from './keyUtils';\n\n/** error matching @panva/jose for JWS verification failure. */\nclass JWSVerificationFailed extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'JWSVerificationFailed';\n  }\n}\n\n/** JWS Header */\nexport interface IJWSHeader {\n  /** algorithm, ES256K */\n  alg: string;\n\n  /** type, JWT */\n  typ?: string;\n  /** signing key id, ... */\n  kid?: string;\n}\n\n/** Produce a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\nexport const signDetached = async (\n  // in the case of EcdsaSecp256k1Signature2019 this is the result of createVerifyData\n  payload: Buffer,\n  privateKeyJwk: ISecp256k1PrivateKeyJwk,\n  header = {\n    alg: 'ES256K',\n    b64: false,\n    crit: ['b64'],\n  }\n) => {\n  const privateKeyUInt8Array = await privateKeyUInt8ArrayFromJwk(privateKeyJwk);\n\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n\n  const message = Buffer.from(toBeSignedBuffer);\n\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n  const sigObj: any = secp256k1.ecdsaSign(\n    messageHashUInt8Array,\n    privateKeyUInt8Array\n  );\n\n  const encodedSignature = base64url.encode(Buffer.from(sigObj.signature));\n\n  return `${encodedHeader}..${encodedSignature}`;\n};\n\n/** Verify a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\nexport const verifyDetached = async (\n  jws: string,\n  payload: Buffer,\n  publicKeyJwk: ISecp256k1PublicKeyJwk\n) => {\n  if (jws.indexOf('..') === -1) {\n    throw new JWSVerificationFailed('not a valid rfc7797 jws.');\n  }\n  const [encodedHeader, encodedSignature] = jws.split('..');\n  const header = JSON.parse(base64url.decode(encodedHeader));\n  if (header.alg !== 'ES256K') {\n    throw new Error('JWS alg is not signed with ES256K.');\n  }\n  if (\n    header.b64 !== false ||\n    !header.crit ||\n    !header.crit.length ||\n    header.crit[0] !== 'b64'\n  ) {\n    throw new Error('JWS Header is not in rfc7797 format (not detached).');\n  }\n  const publicKeyUInt8Array = await publicKeyUInt8ArrayFromJwk(publicKeyJwk);\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n  const message = Buffer.from(toBeSignedBuffer);\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n  const signatureUInt8Array = base64url.toBuffer(encodedSignature);\n  let signatureLowerS = secp256k1.signatureNormalize(signatureUInt8Array);\n  const verified = secp256k1.ecdsaVerify(\n    signatureLowerS,\n    messageHashUInt8Array,\n    publicKeyUInt8Array\n  );\n\n  if (verified) {\n    return true;\n  }\n  const erroObject = {\n    signature: signatureUInt8Array.toString('hex'),\n    // message: messageHashUInt8Array.toString('hex'),\n    // publicKey: publicKeyUInt8Array.toString('hex'),\n  };\n  throw new JWSVerificationFailed(\n    'ECDSA Verify Failed: ' + JSON.stringify(erroObject, null, 2)\n  );\n};\n\n/** Produce a normal ES256K JWS */\nexport const sign = async (\n  payload: any,\n  privateKeyJwk: ISecp256k1PrivateKeyJwk,\n  header: IJWSHeader = { alg: 'ES256K' }\n) => {\n  const privateKeyUInt8Array = await privateKeyUInt8ArrayFromJwk(privateKeyJwk);\n\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n  const encodedPayload = base64url.encode(JSON.stringify(payload));\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n  const message = Buffer.from(toBeSigned);\n\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n\n  const sigObj: any = secp256k1.ecdsaSign(\n    messageHashUInt8Array,\n    privateKeyUInt8Array\n  );\n\n  const encodedSignature = base64url.encode(sigObj.signature);\n  return `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\n};\n\n/** Verify an ES256K JWS, returns the decoded object if successful, throws otherwise. */\nexport const verify = async (\n  jws: string,\n  publicKeyJwk: ISecp256k1PublicKeyJwk\n) => {\n  const publicKeyUInt8Array = await publicKeyUInt8ArrayFromJwk(publicKeyJwk);\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n\n  const message = Buffer.from(toBeSigned);\n  const digest = crypto\n    .createHash('sha256')\n    .update(message)\n    .digest();\n\n  const messageHashUInt8Array = digest;\n\n  const signatureUInt8Array = base64url.toBuffer(encodedSignature);\n  let signatureLowerS = secp256k1.signatureNormalize(signatureUInt8Array);\n\n  const verified = secp256k1.ecdsaVerify(\n    signatureLowerS,\n    messageHashUInt8Array,\n    publicKeyUInt8Array\n  );\n  if (verified) {\n    return JSON.parse(base64url.decode(encodedPayload));\n  }\n  const erroObject = {\n    signature: signatureUInt8Array.toString('hex'),\n    message: messageHashUInt8Array.toString('hex'),\n    publicKey: publicKeyUInt8Array.toString('hex'),\n  };\n  throw new JWSVerificationFailed(\n    'ECDSA Verify Failed: ' + JSON.stringify(erroObject, null, 2)\n  );\n};\n\n/** decode a JWS (without verifying it) */\nexport const decode = (jws: string, options = { complete: false }) => {\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n\n  if (options.complete) {\n    return {\n      header: JSON.parse(base64url.decode(encodedHeader)),\n      payload: JSON.parse(base64url.decode(encodedPayload)),\n      signature: encodedSignature,\n    };\n  }\n  return JSON.parse(base64url.decode(encodedPayload));\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\n\nimport { darken, lighten } from \"@material-ui/core/styles/colorManipulator\";\n\nconst primaryColor = \"#594aa8\";\nconst secondaryColor = \"#fcb373\";\n\nconst font1 = '\"Rajdhani\"';\nconst font2 = '\"Roboto Condensed\"';\nconst font3 = '\"Lato\"';\n\nconst fontWeightLight = 300;\nconst fontWeightRegular = 400;\nconst fontWeightMedium = 600;\n\nclass Theme extends Component {\n  render() {\n    const { children } = this.props;\n    const theme = createMuiTheme({\n      splashImage: \"\",\n      palette: {\n        type: \"light\",\n        primary: {\n          light: lighten(primaryColor, 0.07),\n          main: primaryColor,\n          dark: darken(primaryColor, 0.07),\n        },\n        secondary: {\n          light: lighten(secondaryColor, 0.07),\n          main: secondaryColor,\n          dark: darken(secondaryColor, 0.07),\n        },\n      },\n      typography: {\n        useNextVariants: true,\n        fontSize: 16,\n        fontFamily: [font1, font2, font3].join(\",\"),\n        h1: {\n          fontFamily: font1,\n          fontWeight: fontWeightMedium,\n        },\n        h2: {\n          fontFamily: font1,\n          fontWeight: fontWeightMedium,\n        },\n        h3: {\n          fontFamily: font1,\n          fontWeight: fontWeightMedium,\n        },\n        h4: {\n          fontFamily: font2,\n          textTransform: \"uppercase\",\n          letterSpacing: \"0.1em\",\n          fontWeight: fontWeightRegular,\n        },\n        h5: {\n          fontFamily: font2,\n          textTransform: \"uppercase\",\n          letterSpacing: \"0.1em\",\n          fontWeight: fontWeightRegular,\n        },\n        h6: {\n          fontFamily: font2,\n          textTransform: \"uppercase\",\n          letterSpacing: \"0.05em\",\n          fontWeight: fontWeightRegular,\n        },\n        subtitle1: {\n          fontFamily: font1,\n          fontWeight: fontWeightRegular,\n        },\n        subtitle2: {\n          fontFamily: font2,\n          fontWeight: fontWeightRegular,\n        },\n        body1: {\n          fontFamily: font3,\n          fontWeight: fontWeightRegular,\n        },\n        body2: {\n          fontFamily: font3,\n          fontWeight: fontWeightRegular,\n        },\n        button: {\n          fontFamily: font2,\n          fontWeight: fontWeightRegular,\n        },\n        caption: {\n          fontFamily: font2,\n          fontWeight: fontWeightRegular,\n        },\n        overline: {\n          fontFamily: font2,\n          letterSpacing: \"0.15em\",\n          textTransform: \"uppercase\",\n          fontWeight: fontWeightLight,\n        },\n      },\n\n      overrides: {\n        MuiInput: {\n          // Name of the component ⚛️ / style sheet\n          input: {\n            fontFamily: font3,\n          },\n        },\n        MuiInputLabel: {\n          // Name of the component ⚛️ / style sheet\n          root: {\n            fontFamily: font2,\n          },\n        },\n        MuiAppBar: {\n          root: {\n            // boxShadow: 'none',\n          },\n        },\n        MuiButton: {\n          // Name of the rule\n          contained: {\n            boxShadow: \"none\",\n          },\n        },\n      },\n    });\n    return <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>;\n  }\n}\n\nTheme.propTypes = {\n  children: PropTypes.any.isRequired,\n};\n\nexport default Theme;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 466;","import {\n    documentLoaderFactory,\n    contexts,\n  } from \"@transmute/jsonld-document-loader\";\n  \n\n  import { driver as webCryptoDriver} from '@transmute/did-key-web-crypto'\n  \n  const golem = documentLoaderFactory.pluginFactory.build({\n    contexts: {\n      ...contexts.W3C_Decentralized_Identifiers,\n      ...contexts.W3C_Verifiable_Credentials,\n      ...contexts.W3ID_Security_Vocabulary,\n    },\n  });\n  \n  golem.addContext({\n    \"https://w3c-ccg.github.io/lds-jws2020/contexts/lds-jws2020-v1.json\": require(\"./lds-jws2020-v1.json\"),\n  });\n  \n  golem.addResolver({\n    'did:key:': {\n      resolve: async (uri) => {\n        const { didDocument } = await webCryptoDriver.resolve(uri, {\n          accept: 'application/did+json',\n        });\n        return didDocument;\n      },\n    },\n  })\n  \n  const documentLoader = golem.buildDocumentLoader();\n  \n  export { documentLoader };","import { withHandlers } from \"recompose\";\nimport { EdvClient } from \"edv-client\";\nimport { UniversalWallet2020, VaultClient } from \"@transmute/universal-wallet\";\n\n// correct horse battery staple\n\nconst getClient = async (wallet) => {\n  let _wallet = new UniversalWallet2020(wallet.contents);\n  const entropy = _wallet.contents.find((c) => {\n    return c.type === \"Entropy\";\n  });\n  const ed25519Key = _wallet.contents.find((c) => {\n    return c.type === \"Ed25519VerificationKey2018\";\n  });\n  ed25519Key.controller = ed25519Key.id.split(\"#\")[0];\n  const x25519Key = _wallet.contents.find((c) => {\n    return c.type === \"X25519KeyAgreementKey2019\";\n  });\n  x25519Key.controller = x25519Key.id.split(\"#\")[0];\n  let client = await VaultClient.fromDerivedContents(\n    wallet.vaultEndpoint,\n    ed25519Key,\n    x25519Key,\n    Buffer.from(entropy.value, \"hex\")\n  );\n  return client;\n};\n\nconst isContentPersisted = (localContents, id) => {\n  return (\n    localContents.find((c) => {\n      return c.id === id;\n    }) !== undefined\n  );\n};\n\nexport default withHandlers({\n  setUniversalWalletProp: ({ setUniversalWalletProp }) => (payload) => {\n    setUniversalWalletProp(payload);\n  },\n  generateWallet: ({ setUniversalWalletProp }) => async (_seed) => {\n    if (!_seed) {\n      throw new Error(\"seed is required.\");\n    }\n    let wallet = await UniversalWallet2020.generate(_seed);\n    setUniversalWalletProp({\n      status: wallet.status,\n      contents: wallet.contents,\n    });\n  },\n  toggleLockStatus: ({ setUniversalWalletProp }) => async ({\n    status,\n    password,\n    contents,\n  }) => {\n    let wallet = new UniversalWallet2020(contents);\n    wallet.status = status;\n\n    if (status === \"LOCKED\") {\n      await wallet.unlock(password);\n    }\n    if (status === \"UNLOCKED\") {\n      await wallet.lock(password);\n    }\n    setUniversalWalletProp({\n      status: wallet.status,\n      contents: wallet.contents,\n    });\n  },\n\n  deleteWallet: ({ setUniversalWalletProp }) => async () => {\n    setUniversalWalletProp({\n      status: \"UNLOCKED\",\n      contents: [],\n    });\n  },\n\n  importWallet: ({ setUniversalWalletProp }) => async (encryptedWallet) => {\n    let wallet = new UniversalWallet2020();\n    await wallet.import(encryptedWallet);\n    setUniversalWalletProp({\n      status: wallet.status,\n      contents: wallet.contents,\n    });\n  },\n\n  exportWallet: () => async (status, contents) => {\n    if (status !== \"LOCKED\") {\n      throw new Error(\"Cannot export unlocked wallet.\");\n    }\n    let wallet = new UniversalWallet2020(contents);\n    wallet.status = status;\n    return wallet.export();\n  },\n\n  saveWallet: ({ setUniversalWalletProp }) => async (contents) => {\n    setUniversalWalletProp({\n      contents,\n    });\n  },\n  issueCredential: ({ wallet, setUniversalWalletProp }) => async ({\n    credential,\n    options,\n  }) => {\n    let _wallet = new UniversalWallet2020(wallet.contents);\n    const verifiableCredential = await _wallet.issue({\n      credential,\n      options,\n    });\n    setUniversalWalletProp({\n      contents: [verifiableCredential, ..._wallet.contents],\n    });\n  },\n  proveVerifiableCredential: ({ wallet, setUniversalWalletProp }) => async ({\n    verifiableCredential,\n    options,\n  }) => {\n    let _wallet = new UniversalWallet2020(wallet.contents);\n    const verifiablePresentation = await _wallet.prove({\n      verifiableCredential,\n      options,\n    });\n    setUniversalWalletProp({\n      contents: [verifiablePresentation, ..._wallet.contents],\n    });\n  },\n  syncVault: ({ wallet, setUniversalWalletProp }) => async () => {\n    setUniversalWalletProp({\n      isSyncing: true,\n    });\n    const client = await getClient(wallet);\n\n    let contents = [];\n    try {\n      contents = await client.getWalletContents();\n    } catch (e) {\n      console.log(e);\n      if (e.message === \"Request failed with status code 404\") {\n        // no-op we will add content that does not existt anyway..\n      }\n    }\n    // console.log('remote wallet contents: ', contents);\n\n    for (const content of wallet.contents) {\n      // console.log({ content });\n      const isPersisted = isContentPersisted(contents, content.id);\n      // console.log({ isPersisted });\n      if (!isPersisted) {\n        let data = JSON.parse(JSON.stringify(content));\n        delete data.tableData;\n        const doc = {\n          id: await EdvClient.generateId(),\n          content: {\n            schema: \"https://schema.org/UniversalWallet\",\n            data,\n          },\n        };\n        await client.addWalletContent(doc);\n        // console.log({ response });\n      }\n    }\n\n    contents = await client.getWalletContents();\n    setUniversalWalletProp({\n      isSyncing: false,\n      contents,\n    });\n  },\n});\n","module.exports = __webpack_public_path__ + \"static/media/logo.33b194d8.svg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Base from \"../base/base\";\nimport { openDB } from 'idb';\nimport {KeyPair, createDetachedJws} from '@transmute/did-key-web-crypto'\n\nimport * as vcjs from \"@transmute/vc.js\";\n\nimport {\n  JsonWebKey,\n  JsonWebSignature,\n} from \"@transmute/json-web-signature-2020\";\nimport Room from 'ipfs-pubsub-room'\n\n\nimport credential from './credential.json'\nimport {documentLoader} from './documentLoader'\nimport { Typography } from \"@material-ui/core\";\nimport {getLibp2p} from './libp2p';\n\nconst dbPromise = openDB('keyval-store', 1, {\n  upgrade(db) {\n    db.createObjectStore('keyval');\n  },\n});\n\nconst idbKeyval = {\n  async get(key) {\n    return (await dbPromise).get('keyval', key);\n  },\n  async set(key, val) {\n    return (await dbPromise).put('keyval', val, key);\n  },\n  async delete(key) {\n    return (await dbPromise).delete('keyval', key);\n  },\n  async clear() {\n    return (await dbPromise).clear('keyval');\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys('keyval');\n  },\n};\n\nlet peerCredentials = {};\nwindow.peerCredentials = peerCredentials;\n\nexport const Unextractable = () => {\n\n  const [yourNode, setYourNode] = React.useState({\n  })\n\n  const [observedCredentials, setObservedCredentials] = React.useState({\n  })\n\n  React.useEffect(()=>{\n    (async ()=>{\n      let usableKey  = await idbKeyval.get('myKey')\n\n      if (usableKey === undefined){\n        const algorithm = { name: 'ECDSA', namedCurve: 'P-256'}\n        const extractable = false;\n        // const keyUsages = ['encrypt', 'decrypt', 'sign', 'verify', 'deriveKey', 'deriveBits', 'deriveBits', 'wrapKey', 'unwrapKey'];\n        const keyUsages = ['sign', 'verify'];\n        const result = await crypto.subtle.generateKey(algorithm, extractable, keyUsages);\n        try{\n          await crypto.subtle.exportKey('jwk', result.privateKey)\n        } catch(e){\n          console.info('Expected Unextractable: ', e.message);\n        }\n        usableKey  = await idbKeyval.set('myKey', result)\n      } else {\n        // console.log(usableKey)\n        // now we have a key to use...\n      }\n\n      const publicKeyJwk =  await crypto.subtle.exportKey('jwk', usableKey.publicKey)\n      const keyJson = (await KeyPair.from({publicKeyJwk})).toJsonWebKeyPair(false)\n      keyJson.id = keyJson.controller + keyJson.id;\n      const keypair = await JsonWebKey.from(keyJson)\n      \n      keypair.signer = ()=> {\n        return {\n          sign: async ({data}) => {\n           \n            return createDetachedJws({\n              sign: async (data) => {\n                const signature = await crypto.subtle.sign(\n                  {\n                    name: 'ECDSA',\n                    hash: { name: 'SHA-256' },\n                  },\n                  usableKey.privateKey,\n                  data\n                );\n                return signature;\n              },\n            }, data, { alg: 'ES256', b64: false, crit: ['b64'] });\n          },\n        }\n      };\n\n      if (window.location.hash === ''){\n        window.location = '#' + keypair.controller;\n      }\n\n      const {libp2p} = await getLibp2p();\n\n      const peerId = libp2p.peerId.toB58String();\n\n       const suite = new JsonWebSignature({\n        key: keypair,\n        date: credential.issuanceDate,\n      });\n\n      const verifiableCredential = await vcjs.ld.issue({\n        credential: {\n          ...credential,\n          issuer: {\n            ...credential.issuer,\n            id: keypair.controller,\n          },\n          credentialSubject: {\n            ...credential.credentialSubject,\n            id: peerId\n          }\n        },\n        suite,\n        documentLoader: async (uri) => {\n          const res = await documentLoader(uri);\n          // uncomment to debug\n          // console.log(res);\n          return res;\n        },\n      });\n\n      setYourNode(verifiableCredential)\n     \n\n      const room = new Room(libp2p, 'https://did.key.transmute.industries')\n\n      setInterval(()=>{\n        room.broadcast(Buffer.from(JSON.stringify({type: 'peerIdAssertion', verifiableCredential})))\n      }, 10 * 1000)\n\n      room.on('peer joined', (peer) => {\n        console.log('Peer joined the room', peer)\n      })\n      \n      room.on('peer left', (peer) => {\n        console.log('Peer left...', peer)\n      })\n      \n      // now started to listen to room\n      room.on('subscribed', () => {\n        console.log('Now connected!')\n      })\n\n      room.on('message', async (message) => {\n        const messageJson = JSON.parse(Buffer.from(message.data).toString());\n        if (messageJson.type === 'peerIdAssertion'){\n          const result = await vcjs.ld.verifyCredential({\n            credential: { ...messageJson.verifiableCredential },\n            suite: new JsonWebSignature(),\n            documentLoader: async (uri) => {\n              const res = await documentLoader(uri);\n              // uncomment to debug\n              // console.log(res);\n              return res;\n            },\n          });\n     \n          if (result.verified){\n            console.log(`\\n\\nVerified Peer ${JSON.stringify(messageJson.verifiableCredential, null, 2)}`);\n            setObservedCredentials( (observedCredentials) => {\n              return {...observedCredentials,\n                [messageJson.verifiableCredential.credentialSubject.id]: messageJson.verifiableCredential}\n            })\n          } else {\n            console.error(result)\n          }\n        }\n      })     \n    })()\n  }, [])\n  return (\n    <Base>\n    <Typography>\n      WebRTC Demo of Verifiable Credentials and Unextractable Web Crypto DID Key.\n    </Typography>\n\n    <Typography variant={'h6'}>\n      Your Are:\n    </Typography>\n      <pre>{JSON.stringify(yourNode, null, 2 )}</pre>\n    <Typography variant={'h6'}>\n      Your Peers:\n    </Typography>\n    <pre>{JSON.stringify(observedCredentials, null, 2 )}</pre>\n    </Base>\n  );\n};\n\nUnextractable.propTypes = {};\n","import Libp2p from 'libp2p'\nimport Websockets from 'libp2p-websockets'\nimport WebRTCStar from 'libp2p-webrtc-star'\nimport { NOISE } from 'libp2p-noise'\nimport Mplex from 'libp2p-mplex'\nimport Bootstrap from 'libp2p-bootstrap'\nimport Gossipsub from 'libp2p-gossipsub'\n\nexport const getLibp2p = async ()=>{\n\n    const libp2p = await Libp2p.create({\n        addresses: {\n          listen: [\n            '/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star',\n            // '/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star'\n          ]\n        },\n        modules: {\n          transport: [Websockets, WebRTCStar],\n          connEncryption: [NOISE],\n          streamMuxer: [Mplex],\n          peerDiscovery: [Bootstrap],\n          pubsub: Gossipsub\n        },\n        config: {\n          peerDiscovery: {\n           [Bootstrap.tag]: {\n              enabled: true,\n              list: [\n                '/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN',\n                '/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',\n                '/dnsaddr/bootstrap.libp2p.io/p2p/QmZa1sAxajnQjVM8WjWXoMbmPd7NsWhfKsPkErzpm9wGkp',\n                '/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',\n                '/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt'\n              ]\n            }\n          }\n        }\n      })\n  \n  await libp2p.start()\n\n  window.libp2p = libp2p\n  return {libp2p}\n}","import { Crypto } from '@peculiar/webcrypto';\n\nfunction isNodejs() {\n  return (\n    typeof process === 'object' &&\n    typeof process.versions === 'object' &&\n    typeof process.versions.node !== 'undefined' &&\n    typeof window !== undefined\n  );\n}\n\nlet crypto: Crypto;\n\nif (isNodejs()) {\n  crypto = new Crypto();\n} else {\n  crypto = window.crypto as Crypto;\n}\n\nexport default crypto;\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\n\nimport { types } from '@transmute/did-key-common';\n\nexport const jwkToBase58 = (jwk: any): types.LinkedDataKeyPair => {\n  let keypair: any = {};\n  if (jwk.d) {\n    keypair.privateKeyBase58 = bs58.encode(\n      Buffer.concat([base64url.toBuffer(jwk.d)])\n    );\n  }\n  if (jwk.x) {\n    keypair.publicKeyBase58 = bs58.encode(\n      Buffer.concat([base64url.toBuffer(jwk.x)])\n    );\n  }\n  if (jwk.x && jwk.y) {\n    keypair.publicKeyBase58 = bs58.encode(\n      Buffer.concat([base64url.toBuffer(jwk.x), base64url.toBuffer(jwk.y)])\n    );\n  }\n\n  return keypair;\n};\n","export const fingerprintToDid = (fingerprint: string, methodName = 'key') => {\n  return `did:${methodName}:${fingerprint}`;\n};\n","import { types } from '@transmute/did-key-common';\n\nimport { jwkToBase58 } from './jwkToBase58';\nimport { getMultibaseFromJwk } from './getMultibaseFromJwk';\nimport { fingerprintToDid } from './fingerprintToDid';\n\nexport const fromJwk = (jwk: any): types.LinkedDataKeyPair => {\n  const id = getMultibaseFromJwk(jwk);\n  const controller = fingerprintToDid(id);\n  return {\n    id: `#${id}`,\n    type: 'JsonWebKey2020',\n    controller,\n    ...(jwkToBase58(jwk) as any),\n  };\n};\n","import bs58 from 'bs58';\n\nimport { crvToMulticodecPrefix } from '../constants';\nimport { jwkToBase58 } from './jwkToBase58';\n\nexport const getMultibaseFromJwk = (publicKeyJwk: any): string => {\n  const { publicKeyBase58 } = jwkToBase58(publicKeyJwk);\n  const publicKeyBytes = bs58.decode(publicKeyBase58);\n  const prefix = crvToMulticodecPrefix[publicKeyJwk.crv];\n  const buffer = new Uint8Array(3 + publicKeyBytes.length);\n  // https://github.com/multiformats/multicodec/pull/190\n  buffer[0] = 0x12;\n  buffer[1] = prefix;\n  buffer[2] = 0x01;\n  buffer.set(publicKeyBytes, 3);\n  // prefix with `z` to indicate multi-base base58btc encoding\n  return `z${bs58.encode(buffer)}`;\n};\n","import crypto from '../crypto';\nimport { Jws } from '@transmute/did-key-common';\n\nimport { crvToJwsHashAlg } from '../constants';\n\nconst { createJws, verifyJws, createDetachedJws, verifyDetachedJws } = Jws;\n\nexport { createJws, verifyJws, createDetachedJws, verifyDetachedJws };\n\nexport const privateKeyToSigner = async (privateKeyJwk: any) => {\n  const privateKey = await crypto.subtle.importKey(\n    'jwk',\n    privateKeyJwk,\n    {\n      name: 'ECDSA',\n      namedCurve: privateKeyJwk.crv,\n    },\n    true,\n    ['sign']\n  );\n\n  return {\n    sign: async (data: Buffer) => {\n      const signature = await crypto.subtle.sign(\n        {\n          name: 'ECDSA',\n          hash: { name: crvToJwsHashAlg[privateKeyJwk.crv] },\n        },\n        privateKey,\n        data\n      );\n      return signature as Buffer;\n    },\n  };\n};\n\nexport const publicKeyToVerifier = async (publicKeyJwk: any) => {\n  const publicKey = await crypto.subtle.importKey(\n    'jwk',\n    publicKeyJwk,\n    {\n      name: 'ECDSA',\n      namedCurve: publicKeyJwk.crv,\n    },\n    true,\n    ['verify']\n  );\n\n  return {\n    verify: async (toBeVerified: Buffer, signature: Buffer) => {\n      const verified = await crypto.subtle.verify(\n        {\n          name: 'ECDSA',\n          hash: { name: crvToJwsHashAlg[publicKeyJwk.crv] },\n        },\n        publicKey,\n        signature,\n        toBeVerified\n      );\n      return verified;\n    },\n  };\n};\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\n\nimport { types } from '@transmute/did-key-common';\n\nexport const base58KeyPairToJwk = (\n  keypair: types.LinkedDataKeyPair\n): object => {\n  const publicKeyBuffer = bs58.decode(keypair.publicKeyBase58);\n\n  const x = base64url.encode(\n    publicKeyBuffer.slice(0, publicKeyBuffer.length / 2)\n  );\n\n  const y = base64url.encode(publicKeyBuffer.slice(publicKeyBuffer.length / 2));\n\n  let jwk: any = { x, y };\n\n  if (keypair.privateKeyBase58) {\n    jwk.d = base64url.encode(bs58.decode(keypair.privateKeyBase58));\n  }\n\n  return jwk;\n};\n","import bs58 from 'bs58';\nimport { multicodecToJwkType } from '../constants';\nexport const getJwkTypeFromMultibase = (fingerprint: string) => {\n  const buffer = bs58.decode(fingerprint.substring(1));\n\n  if (buffer[0] !== 0x12) {\n    throw new Error(`Unsupported multibase ${buffer[0].toString(16)}`);\n  }\n\n  const type = multicodecToJwkType[buffer[1]];\n  if (!type) {\n    throw new Error(\n      `Unsupported multibase ${buffer[0].toString(16)} ${buffer[1].toString(\n        16\n      )}`\n    );\n  }\n  return type;\n};\n","import { types } from '@transmute/did-key-common';\n\nimport { base58KeyPairToJwk } from './base58KeyPairToJwk';\nimport { getJwkTypeFromMultibase } from './getJwkTypeFromMultibase';\nexport const toJwkPair = (\n  keypair: types.LinkedDataKeyPair\n): types.JsonWebKeyPair => {\n  // console.log('toJwkPair', keypair);\n  const id = keypair.id.substring(keypair.id.indexOf('#') + 1);\n  let _keypair: any = {\n    id: keypair.id,\n    type: 'JsonWebKey2020',\n    controller: keypair.controller,\n  };\n\n  _keypair.publicKeyJwk = {\n    ...getJwkTypeFromMultibase(id),\n    ...base58KeyPairToJwk({\n      publicKeyBase58: keypair.publicKeyBase58,\n    } as any),\n  };\n\n  if (keypair.privateKeyBase58) {\n    _keypair.privateKeyJwk = {\n      ...getJwkTypeFromMultibase(id),\n      ...base58KeyPairToJwk({\n        publicKeyBase58: keypair.publicKeyBase58,\n        privateKeyBase58: keypair.privateKeyBase58,\n      } as any),\n    };\n  }\n\n  return _keypair;\n};\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\n\nimport { generate } from './functions/generate';\nimport { fromJwk } from './functions/fromJwk';\n\nimport { deriveSecret } from './Jwe';\nimport { privateKeyToSigner, publicKeyToVerifier } from './Jws';\nimport { toJwkPair } from './functions/toJwkPair';\nimport { fingerprintToDid } from './functions/fingerprintToDid';\nimport { getJwkTypeFromMultibase } from './functions/getJwkTypeFromMultibase';\n\nimport { types } from '@transmute/did-key-common';\n\nimport {\n  getEpkGenerator,\n  deriveKey,\n  KeyEncryptionKey,\n} from '@transmute/did-key-cipher';\n\n/* class decorator */\nfunction staticImplements<T>() {\n  return <U extends T>(constructor: U) => {\n    return constructor;\n  };\n}\n\nconst KEY_TYPE = 'JsonWebKey2020';\n\n@staticImplements<types.KeyAgreementKeyPairClass>()\nexport class KeyPair implements types.KeyAgreementKeyPairInstance {\n  public static JWE_ALG: types.ECDH_ES_A256KW = 'ECDH-ES+A256KW';\n\n  static generate = async (options?: any) => {\n    const { privateKeyJwk } = await generate(options);\n    return new KeyPair({ ...fromJwk(privateKeyJwk) });\n  };\n\n  static from = (options?: any) => {\n    return new KeyPair({ ...options });\n  };\n\n  static fromFingerprint = async ({ fingerprint }: any) => {\n    const data = getJwkTypeFromMultibase(fingerprint);\n    if (data.kty) {\n      const publicKeyBytes = bs58.decode(fingerprint.substring(1));\n\n      const publicKeyBase58 = bs58.encode(publicKeyBytes.slice(3));\n\n      return new KeyPair({\n        id: '#' + fingerprint,\n        controller: fingerprintToDid(fingerprint),\n        type: 'JsonWebKey2020',\n        publicKeyBase58,\n      });\n    }\n    throw new Error('Cannot create key from fingerprint ' + fingerprint);\n  };\n\n  static fingerprintFromPublicKey(\n    keypair: types.KeyPairJwk | types.KeyPairBase58\n  ) {\n    let kp = KeyPair.from(keypair);\n    return kp.id.substring(1);\n  }\n\n  static async generateEphemeralKeyPair(\n    epkArgs: any\n  ): Promise<types.EpkResult> {\n    return getEpkGenerator(KeyPair, epkArgs)();\n  }\n\n  static async kekFromEphemeralPeer({\n    keyAgreementKey,\n    epk,\n  }: types.KeyEncryptionKeyFromEphemeralPublicKeyOptions) {\n    if (!(epk && typeof epk === 'object')) {\n      throw new TypeError('\"epk\" must be an object.');\n    }\n\n    // convert to LD key for Web KMS\n    const ephemeralPublicKey = new KeyPair({\n      publicKeyJwk: epk,\n    } as any);\n\n    // safe to use IDs like in rfc7518 or does\n    // https://tools.ietf.org/html/rfc7748#section-7 pose any issues?\n\n    // \"Party U Info\"\n    const producerInfo = ephemeralPublicKey.publicKeyBuffer;\n    // \"Party V Info\"\n    const consumerInfo = Buffer.from(keyAgreementKey.id);\n    // converts keys again....\n    // base58 encoding should only be used at the network / serialization boundary.\n    const secret = await (keyAgreementKey as types.KeyAgreementKeyPairInstance).deriveSecret(\n      {\n        publicKey: ephemeralPublicKey.toJsonWebKeyPair(),\n      } as any\n    );\n    const keyData = await deriveKey({ secret, producerInfo, consumerInfo });\n    return {\n      kek: await KeyEncryptionKey.createKek({ keyData }),\n    };\n  }\n\n  static async kekFromStaticPeer({\n    ephemeralKeyPair,\n    staticPublicKey,\n  }: types.KeyEncryptionKeyFromStaticPublicKeyOptions) {\n    if (staticPublicKey.type !== KEY_TYPE) {\n      throw new Error(`\"staticPublicKey.type\" must be \"${KEY_TYPE}\".`);\n    }\n\n    const epkPair = await KeyPair.from(ephemeralKeyPair.keypair);\n\n    // \"Party U Info\"\n    const producerInfo = epkPair.publicKeyBuffer;\n    // \"Party V Info\"\n    const consumerInfo = Buffer.from(staticPublicKey.id);\n\n    const secret = await epkPair.deriveSecret({\n      publicKey: staticPublicKey,\n    } as any);\n    const keyData = await deriveKey({ secret, producerInfo, consumerInfo });\n    return {\n      kek: await KeyEncryptionKey.createKek({ keyData }),\n      epk: ephemeralKeyPair.epk,\n      apu: base64url.encode(producerInfo),\n      apv: base64url.encode(consumerInfo as any),\n    };\n  }\n\n  public id: string;\n  public type: string;\n  public controller: string;\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  constructor(options: any) {\n    this.id = options.id;\n    this.type = options.type || 'JsonWebKey2020';\n\n    this.controller = options.controller;\n    if (options.publicKeyBase58) {\n      this.publicKeyBuffer = bs58.decode(options.publicKeyBase58);\n    } else if (options.publicKeyJwk) {\n      const args = fromJwk(options.publicKeyJwk);\n      this.publicKeyBuffer = bs58.decode(args.publicKeyBase58);\n      this.id = options.id || args.id;\n      this.controller = args.controller;\n    } else {\n      throw new Error('publicKeyJwk or publicKeyBase58 is required.');\n    }\n\n    if (options.privateKeyBase58) {\n      this.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n    } else if (options.privateKeyJwk) {\n      const { privateKeyBase58 } = fromJwk(options.privateKeyJwk);\n      this.privateKeyBuffer = bs58.decode(privateKeyBase58);\n    }\n  }\n\n  fingerprint() {\n    const { id } = this.toJsonWebKeyPair();\n    return id.substring(1);\n  }\n\n  toKeyPair(exportPrivateKey = false) {\n    let options: any = {\n      id: this.id,\n      type: 'UnsupportedVerificationMethod2020',\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n    if (exportPrivateKey) {\n      options.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return options;\n  }\n\n  toJsonWebKeyPair(exportPrivateKey = false) {\n    const options = this.toKeyPair(exportPrivateKey);\n    return toJwkPair(options);\n  }\n\n  async signer() {\n    const { privateKeyJwk } = this.toJsonWebKeyPair(true);\n    return privateKeyToSigner(privateKeyJwk);\n  }\n\n  async verifier() {\n    const { publicKeyJwk } = this.toJsonWebKeyPair();\n    return publicKeyToVerifier(publicKeyJwk);\n  }\n\n  deriveSecret(options: types.DeriveSecretOptions) {\n    const { privateKeyJwk } = this.toJsonWebKeyPair(true);\n    let publicKeyJwk;\n\n    if ((options.publicKey as any).publicKeyJwk) {\n      publicKeyJwk = (options.publicKey as any).publicKeyJwk;\n    } else if ((options.publicKey as any).publicKeyBase58) {\n      ({ publicKeyJwk } = toJwkPair(options.publicKey as any));\n    } else {\n      throw new Error(\n        'Cannot deriveSecret from remote... publicKeyJwk or publicKeyBase58 must be present.'\n      );\n    }\n    return deriveSecret(privateKeyJwk, publicKeyJwk);\n  }\n}\n","import crypto from '../crypto';\n\nexport const deriveSecret = async (\n  privateKeyJwk: any,\n  publicKeyJwk: any\n): Promise<Uint8Array> => {\n  // console.log(privateKeyJwk, publicKeyJwk);\n  const privateKey = await crypto.subtle.importKey(\n    'jwk',\n    privateKeyJwk,\n    {\n      name: 'ECDH',\n      namedCurve: privateKeyJwk.crv,\n    },\n    true,\n    ['deriveBits']\n  );\n  const publicKey = await crypto.subtle.importKey(\n    'jwk',\n    publicKeyJwk,\n    {\n      name: 'ECDH',\n      namedCurve: publicKeyJwk.crv,\n    },\n    true,\n    ['deriveBits']\n  );\n  const result = await crypto.subtle.deriveBits(\n    {\n      name: 'ECDH',\n      public: publicKey,\n    },\n    privateKey,\n    256\n  );\n  return new Uint8Array(result);\n};\n","import { SUPPORTED_EC } from '../constants';\nimport crypto from '../crypto';\n\nexport interface GenerateOptions {\n  kty: string;\n  crvOrSize: string;\n}\n\nexport const generate = async (\n  options: GenerateOptions = { kty: 'EC', crvOrSize: 'P-256' }\n) => {\n  if (options.kty === 'EC' && SUPPORTED_EC.indexOf(options.crvOrSize) !== -1) {\n    let kp = await crypto.subtle.generateKey(\n      {\n        name: 'ECDSA',\n        namedCurve: options.crvOrSize,\n      },\n      true,\n      ['sign', 'verify']\n    );\n    const jwk = await crypto.subtle.exportKey('jwk', kp.privateKey);\n    return {\n      publicKeyJwk: {\n        kty: jwk.kty,\n        crv: jwk.crv,\n        x: jwk.x,\n        y: jwk.y,\n      },\n      privateKeyJwk: {\n        kty: jwk.kty,\n        crv: jwk.crv,\n        x: jwk.x,\n        y: jwk.y,\n        d: jwk.d,\n      },\n    };\n  }\n\n  throw new Error(\n    `Generate does not support ${options.kty} and ${options.crvOrSize}`\n  );\n};\n","/* class decorator */\nexport const staticImplements = <T>() => {\n  return <U extends T>(constructor: U) => {\n    return constructor;\n  };\n};\n\nexport * from './JWE_ALG';\nexport * from './JWS_ALG';\n\nexport * from './KeyPairClass';\nexport * from './KeyPairInstance';\nexport * from './KeyAgreementKeyPairClass';\nexport * from './KeyPairGenerateOptions';\nexport * from './EpkResult';\nexport * from './KeyEncryptionKeyFromEphemeralPublicKeyOptions';\nexport * from './KeyEncryptionKeyFromStaticPublicKeyOptions';\nexport * from './DeriveSecretOptions';\n\nexport * from './KeyPairBase';\n\nexport * from './KeyPairJwk';\nexport * from './JsonWebKeyPair';\n\nexport * from './KeyPairBase58';\nexport * from './LinkedDataKeyPair';\n\nexport * from './KeyAgreementKeyPairInstance';\n","import base64url from 'base64url';\nimport canonicalize from 'canonicalize';\n\nexport const createJws = async (signer: any, payload: any, header: object) => {\n  const encodedHeader = base64url.encode(canonicalize(header));\n  const encodedPayload = base64url.encode(canonicalize(payload));\n  const toBeSigned = `${encodedHeader}.${encodedPayload}`;\n  const signature = await signer.sign(Buffer.from(toBeSigned));\n  return `${toBeSigned}.${base64url.encode(Buffer.from(signature))}`;\n};\n\nexport const verifyJws = async (verifier: any, jws: string) => {\n  const [header, payload, signature] = jws.split('.');\n  const toBeVerified = `${header}.${payload}`;\n  const verified = await verifier.verify(\n    Buffer.from(toBeVerified),\n    base64url.toBuffer(signature)\n  );\n\n  return verified;\n};\n\nexport const createDetachedJws = async (\n  signer: any,\n  payload: Buffer,\n  header: object\n) => {\n  const encodedHeader = base64url.encode(\n    canonicalize({ ...header, b64: false, crit: ['b64'] })\n  );\n\n  const toBeSigned = new Uint8Array(\n    Buffer.concat([\n      Buffer.from(encodedHeader, 'utf-8'),\n      Buffer.from('.', 'utf-8'),\n      payload,\n    ])\n  );\n  const signature = await signer.sign(Buffer.from(toBeSigned));\n  const encodedSignature = base64url.encode(Buffer.from(signature));\n  return `${encodedHeader}..${encodedSignature}`;\n};\n\nexport const verifyDetachedJws = async (\n  verifier: any,\n  payload: Buffer,\n  signature: string\n) => {\n  const [encodedHeader, encodedSignature] = signature.split('..');\n\n  const toBeVerified = new Uint8Array(\n    Buffer.concat([\n      Buffer.from(encodedHeader, 'utf-8'),\n      Buffer.from('.', 'utf-8'),\n      payload,\n    ])\n  );\n\n  const verified = await verifier.verify(\n    Buffer.from(toBeVerified),\n    base64url.toBuffer(encodedSignature)\n  );\n\n  return verified;\n};\n","const cbor = require('borc');\n\nexport const getVerificationMethod = (\n  instance: any,\n  contentType: string = 'application/did+ld+json'\n) => {\n\n  switch (contentType) {\n    case 'application/did+json': {\n      return  instance.toJsonWebKeyPair();\n    }\n    case 'application/did+cbor': {\n     return  instance.toJsonWebKeyPair();\n    }\n    case 'application/did+ld+json': {\n     return instance.toKeyPair();\n    }\n  }\n  throw new Error(\n    'This implementation of did:key does not support: ' + contentType\n  );\n};\n\nconst supportedContentTypes = ['application/did+json', 'application/did+ld+json', 'application/did+cbor'];\n\nexport const keyToDidDoc = async (\n  didKeyPairInstance: any,\n  contentType: string = 'application/did+ld+json' \n) => {\n  if (supportedContentTypes.indexOf(contentType) === -1){\n    throw new Error('Unsupported DID Document representation. ' + contentType)\n  }\n  const did = `did:key:${didKeyPairInstance.fingerprint()}`;\n  const externalKeyRepresentation = getVerificationMethod(\n    didKeyPairInstance,\n    contentType\n  );\n  let verificationRelationships: any = {\n    verificationMethod: [externalKeyRepresentation],\n  };\n\n  if (didKeyPairInstance.verifier) {\n    verificationRelationships = {\n      ...verificationRelationships,\n      authentication: [externalKeyRepresentation.id],\n      assertionMethod: [externalKeyRepresentation.id],\n      capabilityInvocation: [externalKeyRepresentation.id],\n      capabilityDelegation: [externalKeyRepresentation.id],\n    };\n  }\n\n  if (didKeyPairInstance.deriveSecret) {\n    verificationRelationships = {\n      ...verificationRelationships,\n      keyAgreement: [externalKeyRepresentation.id],\n    };\n  }\n\n  if (didKeyPairInstance.type === 'Ed25519VerificationKey2018') {\n    const kek = await didKeyPairInstance.toX25519KeyPair(false);\n    const externalKeyRepresentation2 = getVerificationMethod(kek, contentType);\n    verificationRelationships = {\n      ...verificationRelationships,\n      verificationMethod: [\n        ...verificationRelationships.verificationMethod,\n        externalKeyRepresentation2,\n      ],\n      keyAgreement: [externalKeyRepresentation2.id],\n    };\n  }\n  const didDocument = {\n    '@context': [\n      'https://www.w3.org/ns/did/v1',\n      {\n        '@base': did,\n      },\n    ],\n    id: did,\n    ...verificationRelationships,\n  };\n\n  return didDocument;\n};\n\n// resolve ( did, did-resolution-input-metadata )\n//      -> ( did-resolution-metadata, did-document, did-document-metadata )\nexport const getResolve = (DidKeyPairClass: any) => {\n  const resolve = async (\n    didUri: string,\n    resolutionMetaData: any = { accept: 'application/did+ld+json' }\n  ) => {\n    const fingerprint = didUri\n      .split('#')[0]\n      .split('did:key:')\n      .pop();\n    const publicKey = await DidKeyPairClass.fromFingerprint({ fingerprint });\n    const didDocument = await keyToDidDoc(publicKey, resolutionMetaData.accept)\n\n    const didResolutionResponse = {\n      didDocument,\n      didDocumentMetaData: {\n        'content-type': resolutionMetaData.accept,\n      },\n      didResolutionMetaData: {},\n    }\n    if (resolutionMetaData.accept === 'application/did+cbor'){\n      return cbor.encode(didResolutionResponse);\n    }\n    return didResolutionResponse;\n  };\n  return resolve;\n};\n","export const getGet = (resolve: any) => {\n  const get = async ({ did, url }: any = {}) => {\n    did = did || url;\n    if (!did) {\n      throw new TypeError('\"did\" must be a string.');\n    }\n    const result = await resolve(did);\n    return result.didDocument;\n  };\n  return get;\n};\n"],"sourceRoot":""}