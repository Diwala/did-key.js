import * as ed25519 from '..';
import {
  Ed25519Signature2018,
  Ed25519KeyPair,
} from '@transmute/ed25519-signature-2018';
import * as vcjs from '@transmute/vc.js';
import axios from 'axios';

jest.setTimeout(1 * 60 * 1000);

const documentLoader = async (iri: string) => {
  if (iri.startsWith('did:key:z6M')) {
    const { didDocument } = await ed25519.resolve(iri, {
      accept: 'application/did+ld+json',
    });
    return {
      documentUrl: iri,
      document: didDocument,
    };
  }

  try {
    // DO NOT DO THIS IN PRODUCTION
    // You should be make network requests
    // without first checking an allow list.
    const { data } = await axios({
      method: 'GET',
      url: iri,
      headers: {
        accept: 'application/ld+json',
      },
    });
    return {
      documentUrl: iri,
      document: data,
    };
  } catch (e) {
    console.error(e);
    throw e;
  }
};

const credential = {
  '@context': ['https://www.w3.org/2018/credentials/v1'],
  id: 'http://example.gov/credentials/3732',
  type: ['VerifiableCredential'],
  issuer: {
    id: 'did:example:123456789abcdefghi',
  },
  issuanceDate: '2020-03-10T04:24:12.164Z',
  credentialSubject: {
    id: 'did:example:ebfeb1f712ebc6f1c276e12ec21',
  },
};

it('can issue, prove and verify', async () => {
  const key = await ed25519.Ed25519KeyPair.generate({
    secureRandom: () => {
      return Buffer.from(
        '4e61bc1918ea6a47ae3307331be7798196a1a8e7cfe4b6e8f7c9a5f36017d929',
        'hex'
      );
    },
  });

  const vc = await vcjs.ld.issue({
    credential,
    suite: new Ed25519Signature2018({
      key: Ed25519KeyPair.from(
        await key.export({
          type: 'Ed25519VerificationKey2018',
          privateKey: true,
        })
      ),
    }),
    documentLoader,
  });
  const vp = await vcjs.ld.signPresentation({
    presentation: await vcjs.ld.createPresentation({
      verifiableCredential: vc,
      holder: key.controller,
      documentLoader,
    }),
    challenge: '123',
    suite: new Ed25519Signature2018({
      key,
    }),
    documentLoader,
  });
  const presentation = await vcjs.ld.verify({
    presentation: vp,
    challenge: '123',
    suite: new Ed25519Signature2018(),
    documentLoader,
  });

  console.log(JSON.stringify(presentation, null, 2));
});
